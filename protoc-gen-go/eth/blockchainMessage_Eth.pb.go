// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchainMessage_Eth.proto

package eth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Blockchain struct {
	// The name of the blockchain represented, in the form of $COIN.$CHAIN.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The current height of the blockchain; i.e., the number of blocks in the blockchain.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The hash of the latest confirmed block in the blockchain; in Ethereum, the hashing function is Keccak/SHA3.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// The time of the latest update to the blockchain; typically when the latest block was added.
	Time string `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// The BlockCypher URL to query for more information on the latest confirmed block; returns a Block.
	LatestUrl string `protobuf:"bytes,5,opt,name=latest_url,json=latestUrl,proto3" json:"latest_url,omitempty"`
	// The hash of the second-to-latest confirmed block in the blockchain.
	PreviousHash string `protobuf:"bytes,6,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	// The BlockCypher URL to query for more information on the second-to-latest confirmed block; returns a Block.
	PreviousUrl string `protobuf:"bytes,7,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
	// Number of unconfirmed transactions in memory pool (likely to be included in next block).
	UnconfirmedCount int32 `protobuf:"varint,8,opt,name=unconfirmed_count,json=unconfirmedCount,proto3" json:"unconfirmed_count,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed within 1 to 2 blocks.
	HighGasPrice int32 `protobuf:"varint,9,opt,name=high_gas_price,json=highGasPrice,proto3" json:"high_gas_price,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed within 3 to 6 blocks.
	MediumGasPrice int32 `protobuf:"varint,10,opt,name=medium_gas_price,json=mediumGasPrice,proto3" json:"medium_gas_price,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed in 7 or more blocks.
	LowGasPrice int32 `protobuf:"varint,11,opt,name=low_gas_price,json=lowGasPrice,proto3" json:"low_gas_price,omitempty"`
	// Optional The current height of the latest fork to the blockchain; when no competing blockchain fork present, not returned with endpoints that return Blockchains.
	LastForkHeight int32 `protobuf:"varint,13,opt,name=last_fork_height,json=lastForkHeight,proto3" json:"last_fork_height,omitempty"`
	// Optional The hash of the latest confirmed block in the latest fork of the blockchain; when no competing blockchain fork present, not returned with endpoints that return Blockchains.
	LastForkHash         string   `protobuf:"bytes,14,opt,name=last_fork_hash,json=lastForkHash,proto3" json:"last_fork_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blockchain) Reset()         { *m = Blockchain{} }
func (m *Blockchain) String() string { return proto.CompactTextString(m) }
func (*Blockchain) ProtoMessage()    {}
func (*Blockchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_c92771f581643dba, []int{0}
}

func (m *Blockchain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blockchain.Unmarshal(m, b)
}
func (m *Blockchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blockchain.Marshal(b, m, deterministic)
}
func (m *Blockchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blockchain.Merge(m, src)
}
func (m *Blockchain) XXX_Size() int {
	return xxx_messageInfo_Blockchain.Size(m)
}
func (m *Blockchain) XXX_DiscardUnknown() {
	xxx_messageInfo_Blockchain.DiscardUnknown(m)
}

var xxx_messageInfo_Blockchain proto.InternalMessageInfo

func (m *Blockchain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Blockchain) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Blockchain) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Blockchain) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Blockchain) GetLatestUrl() string {
	if m != nil {
		return m.LatestUrl
	}
	return ""
}

func (m *Blockchain) GetPreviousHash() string {
	if m != nil {
		return m.PreviousHash
	}
	return ""
}

func (m *Blockchain) GetPreviousUrl() string {
	if m != nil {
		return m.PreviousUrl
	}
	return ""
}

func (m *Blockchain) GetUnconfirmedCount() int32 {
	if m != nil {
		return m.UnconfirmedCount
	}
	return 0
}

func (m *Blockchain) GetHighGasPrice() int32 {
	if m != nil {
		return m.HighGasPrice
	}
	return 0
}

func (m *Blockchain) GetMediumGasPrice() int32 {
	if m != nil {
		return m.MediumGasPrice
	}
	return 0
}

func (m *Blockchain) GetLowGasPrice() int32 {
	if m != nil {
		return m.LowGasPrice
	}
	return 0
}

func (m *Blockchain) GetLastForkHeight() int32 {
	if m != nil {
		return m.LastForkHeight
	}
	return 0
}

func (m *Blockchain) GetLastForkHash() string {
	if m != nil {
		return m.LastForkHash
	}
	return ""
}

type Block struct {
	// The hash of the block; in Ethereum, the hashing function is Keccak/SHA3
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The height of the block in the blockchain; i.e., there are height earlier blocks in its blockchain.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The depth of the block in the blockchain; i.e., there are depth later blocks in its blockchain.
	Depth int32 `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	// The name of the blockchain represented, in the form of $COIN.$CHAIN
	Chain string `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	// The total number of wei transacted in this block.
	Total int32 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of fees—in wei—collected by miners in this block.
	Fees int32 `protobuf:"varint,6,opt,name=fees,proto3" json:"fees,omitempty"`
	// Raw size of block (including header and all transactions) in bytes.
	Size int32 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// Block version.
	Ver int32 `protobuf:"varint,8,opt,name=ver,proto3" json:"ver,omitempty"`
	// Recorded time at which block was built.
	Time *timestamp.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	// The time BlockCypher’s servers receive the block.
	ReceivedTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	// The Ethereum address of the miner that received the coinbase and fee reward.
	CoinbaseAddr string `protobuf:"bytes,11,opt,name=coinbase_addr,json=coinbaseAddr,proto3" json:"coinbase_addr,omitempty"`
	// Address of the peer that sent BlockCypher’s servers this block.
	RelayedBy string `protobuf:"bytes,12,opt,name=relayed_by,json=relayedBy,proto3" json:"relayed_by,omitempty"`
	// The number used by a miner to generate this block.
	Nonce int32 `protobuf:"varint,13,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Number of transactions in this block.
	NTx int32 `protobuf:"varint,14,opt,name=n_tx,json=nTx,proto3" json:"n_tx,omitempty"`
	// The hash of the previous block in the blockchain.
	PrevBlock string `protobuf:"bytes,15,opt,name=prev_block,json=prevBlock,proto3" json:"prev_block,omitempty"`
	// The BlockCypher URL to query for more information on the previous block.
	PrevBlockUrl *any.Any `protobuf:"bytes,16,opt,name=prev_block_url,json=prevBlockUrl,proto3" json:"prev_block_url,omitempty"`
	// The base BlockCypher URL to receive transaction details. To get more details about specific transactions, you must concatenate this URL with the desired transaction hash(es).
	TxUrl *any.Any `protobuf:"bytes,17,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	// The Merkle root of this block.
	MrklRoot string `protobuf:"bytes,18,opt,name=mrkl_root,json=mrklRoot,proto3" json:"mrkl_root,omitempty"`
	// An array of transaction hashes in this block (initiated by externally controlled accounts). By default, only 20 are included.
	Txids []string `protobuf:"bytes,19,rep,name=txids,proto3" json:"txids,omitempty"`
	// An array of internal transaction hashes (initiated by internal contracts) in this block. By default, only 20 are included.
	InternalTxids []string `protobuf:"bytes,20,rep,name=internal_txids,json=internalTxids,proto3" json:"internal_txids,omitempty"`
	// Optional If there are more transactions that couldn’t fit in the txids array, this is the BlockCypher URL to query the next set of transactions (within a Block object).
	NextTxids *any.Any `protobuf:"bytes,21,opt,name=next_txids,json=nextTxids,proto3" json:"next_txids,omitempty"`
	// Optional If there are more internal transactions that couldn’t fit in the internal_txids array, this is the BlockCypher URL to query the next set of transactions (within a Block object).
	NextInternalTxids *any.Any `protobuf:"bytes,22,opt,name=next_internal_txids,json=nextInternalTxids,proto3" json:"next_internal_txids,omitempty"`
	// List of uncle blocks by hash included by the miner of this block. You can read more about uncles here.
	Uncles               []string `protobuf:"bytes,23,rep,name=uncles,proto3" json:"uncles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_c92771f581643dba, []int{1}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Block) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Block) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Block) GetFees() int32 {
	if m != nil {
		return m.Fees
	}
	return 0
}

func (m *Block) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Block) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *Block) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Block) GetReceivedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ReceivedTime
	}
	return nil
}

func (m *Block) GetCoinbaseAddr() string {
	if m != nil {
		return m.CoinbaseAddr
	}
	return ""
}

func (m *Block) GetRelayedBy() string {
	if m != nil {
		return m.RelayedBy
	}
	return ""
}

func (m *Block) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Block) GetNTx() int32 {
	if m != nil {
		return m.NTx
	}
	return 0
}

func (m *Block) GetPrevBlock() string {
	if m != nil {
		return m.PrevBlock
	}
	return ""
}

func (m *Block) GetPrevBlockUrl() *any.Any {
	if m != nil {
		return m.PrevBlockUrl
	}
	return nil
}

func (m *Block) GetTxUrl() *any.Any {
	if m != nil {
		return m.TxUrl
	}
	return nil
}

func (m *Block) GetMrklRoot() string {
	if m != nil {
		return m.MrklRoot
	}
	return ""
}

func (m *Block) GetTxids() []string {
	if m != nil {
		return m.Txids
	}
	return nil
}

func (m *Block) GetInternalTxids() []string {
	if m != nil {
		return m.InternalTxids
	}
	return nil
}

func (m *Block) GetNextTxids() *any.Any {
	if m != nil {
		return m.NextTxids
	}
	return nil
}

func (m *Block) GetNextInternalTxids() *any.Any {
	if m != nil {
		return m.NextInternalTxids
	}
	return nil
}

func (m *Block) GetUncles() []string {
	if m != nil {
		return m.Uncles
	}
	return nil
}

type ChainEndpointRequest struct {
	Network              string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainEndpointRequest) Reset()         { *m = ChainEndpointRequest{} }
func (m *ChainEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*ChainEndpointRequest) ProtoMessage()    {}
func (*ChainEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c92771f581643dba, []int{2}
}

func (m *ChainEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainEndpointRequest.Unmarshal(m, b)
}
func (m *ChainEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainEndpointRequest.Marshal(b, m, deterministic)
}
func (m *ChainEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainEndpointRequest.Merge(m, src)
}
func (m *ChainEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_ChainEndpointRequest.Size(m)
}
func (m *ChainEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainEndpointRequest proto.InternalMessageInfo

func (m *ChainEndpointRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

type BlockHashEndpointRequest struct {
	Network   string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Filters response to only include transaction hashes after txstart in the block.
	Txstart int32 `protobuf:"varint,3,opt,name=txstart,proto3" json:"txstart,omitempty"`
	// Filters response to only include a maximum of limit transactions hashes in the block. Maximum value allowed is 500.
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHashEndpointRequest) Reset()         { *m = BlockHashEndpointRequest{} }
func (m *BlockHashEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*BlockHashEndpointRequest) ProtoMessage()    {}
func (*BlockHashEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c92771f581643dba, []int{3}
}

func (m *BlockHashEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHashEndpointRequest.Unmarshal(m, b)
}
func (m *BlockHashEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHashEndpointRequest.Marshal(b, m, deterministic)
}
func (m *BlockHashEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHashEndpointRequest.Merge(m, src)
}
func (m *BlockHashEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_BlockHashEndpointRequest.Size(m)
}
func (m *BlockHashEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHashEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHashEndpointRequest proto.InternalMessageInfo

func (m *BlockHashEndpointRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BlockHashEndpointRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *BlockHashEndpointRequest) GetTxstart() int32 {
	if m != nil {
		return m.Txstart
	}
	return 0
}

func (m *BlockHashEndpointRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type BlockHeightEndpointRequest struct {
	Network     string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	BlockHeight string `protobuf:"bytes,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Filters response to only include transaction hashes after txstart in the block.
	Txstart int32 `protobuf:"varint,3,opt,name=txstart,proto3" json:"txstart,omitempty"`
	// Filters response to only include a maximum of limit transactions hashes in the block. Maximum value allowed is 500.
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeightEndpointRequest) Reset()         { *m = BlockHeightEndpointRequest{} }
func (m *BlockHeightEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*BlockHeightEndpointRequest) ProtoMessage()    {}
func (*BlockHeightEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c92771f581643dba, []int{4}
}

func (m *BlockHeightEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeightEndpointRequest.Unmarshal(m, b)
}
func (m *BlockHeightEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeightEndpointRequest.Marshal(b, m, deterministic)
}
func (m *BlockHeightEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeightEndpointRequest.Merge(m, src)
}
func (m *BlockHeightEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_BlockHeightEndpointRequest.Size(m)
}
func (m *BlockHeightEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeightEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeightEndpointRequest proto.InternalMessageInfo

func (m *BlockHeightEndpointRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BlockHeightEndpointRequest) GetBlockHeight() string {
	if m != nil {
		return m.BlockHeight
	}
	return ""
}

func (m *BlockHeightEndpointRequest) GetTxstart() int32 {
	if m != nil {
		return m.Txstart
	}
	return 0
}

func (m *BlockHeightEndpointRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*Blockchain)(nil), "fairwaycorp.blockchainprotobuf.eth.Blockchain")
	proto.RegisterType((*Block)(nil), "fairwaycorp.blockchainprotobuf.eth.Block")
	proto.RegisterType((*ChainEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.eth.ChainEndpointRequest")
	proto.RegisterType((*BlockHashEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.eth.BlockHashEndpointRequest")
	proto.RegisterType((*BlockHeightEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.eth.BlockHeightEndpointRequest")
}

func init() { proto.RegisterFile("blockchainMessage_Eth.proto", fileDescriptor_c92771f581643dba) }

var fileDescriptor_c92771f581643dba = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdf, 0x8f, 0xdb, 0x44,
	0x10, 0x56, 0x9a, 0x73, 0xda, 0x4c, 0x7e, 0x70, 0xe7, 0x1e, 0x87, 0xb9, 0x0a, 0x71, 0x0d, 0x45,
	0x3a, 0x09, 0x5d, 0x82, 0xe8, 0x1b, 0x12, 0xaa, 0x7a, 0xa5, 0x50, 0x1e, 0x90, 0x90, 0x75, 0xbc,
	0xf0, 0x62, 0xad, 0xed, 0x89, 0xbd, 0x8a, 0xbd, 0x1b, 0x76, 0xd7, 0x77, 0x09, 0x8f, 0xf0, 0xc4,
	0x7f, 0xc4, 0x9f, 0x87, 0x66, 0xd6, 0x4e, 0x42, 0x11, 0x47, 0xfb, 0xb6, 0xf3, 0xed, 0x37, 0xe3,
	0xf1, 0x7c, 0xdf, 0x68, 0xe1, 0x49, 0x5a, 0xe9, 0x6c, 0x95, 0x95, 0x42, 0xaa, 0x1f, 0xd1, 0x5a,
	0x51, 0x60, 0xf2, 0xda, 0x95, 0xf3, 0xb5, 0xd1, 0x4e, 0x87, 0xb3, 0xa5, 0x90, 0xe6, 0x4e, 0x6c,
	0x33, 0x6d, 0xd6, 0xf3, 0x3d, 0x91, 0x2f, 0xd3, 0x66, 0x39, 0x47, 0x57, 0x9e, 0x7f, 0x5a, 0x68,
	0x5d, 0x54, 0xb8, 0xe8, 0xc0, 0x85, 0x93, 0x35, 0x5a, 0x27, 0xea, 0xb5, 0x2f, 0x72, 0xfe, 0xf1,
	0xdb, 0x04, 0xa1, 0xb6, 0xfe, 0x6a, 0xf6, 0x57, 0x1f, 0xe0, 0x7a, 0x57, 0x36, 0x0c, 0xe1, 0x48,
	0x89, 0x1a, 0xa3, 0xde, 0x45, 0xef, 0x72, 0x18, 0xf3, 0x39, 0x3c, 0x83, 0x41, 0x89, 0xb2, 0x28,
	0x5d, 0xf4, 0xe0, 0xa2, 0x77, 0x19, 0xc4, 0x6d, 0x44, 0xdc, 0x52, 0xd8, 0x32, 0xea, 0x7b, 0x2e,
	0x9d, 0x09, 0xa3, 0x8f, 0x47, 0x47, 0x1e, 0xa3, 0x73, 0xf8, 0x09, 0x40, 0x25, 0x1c, 0x5a, 0x97,
	0x34, 0xa6, 0x8a, 0x02, 0xbe, 0x19, 0x7a, 0xe4, 0x67, 0x53, 0x85, 0x9f, 0xc1, 0x64, 0x6d, 0xf0,
	0x56, 0xea, 0xc6, 0x26, 0x5c, 0x6f, 0xc0, 0x8c, 0x71, 0x07, 0xbe, 0xa1, 0xba, 0x4f, 0x61, 0x17,
	0x73, 0x95, 0x87, 0xcc, 0x19, 0x75, 0x18, 0xd5, 0xf9, 0x02, 0x4e, 0x1a, 0x95, 0x69, 0xb5, 0x94,
	0xa6, 0xc6, 0x3c, 0xc9, 0x74, 0xa3, 0x5c, 0xf4, 0x88, 0x3b, 0x3e, 0x3e, 0xb8, 0x78, 0x45, 0x78,
	0xf8, 0x0c, 0xa6, 0xa5, 0x2c, 0xca, 0xa4, 0x10, 0x36, 0x59, 0x1b, 0x99, 0x61, 0x34, 0x64, 0xe6,
	0x98, 0xd0, 0xef, 0x85, 0xfd, 0x89, 0xb0, 0xf0, 0x12, 0x8e, 0x6b, 0xcc, 0x65, 0x53, 0x1f, 0xf0,
	0x80, 0x79, 0x53, 0x8f, 0xef, 0x98, 0x33, 0x98, 0x54, 0xfa, 0xee, 0x80, 0x36, 0x62, 0xda, 0xa8,
	0xd2, 0x77, 0x87, 0xd5, 0x2a, 0x61, 0x5d, 0xb2, 0xd4, 0x66, 0x95, 0xb4, 0x13, 0x9d, 0xf8, 0x6a,
	0x84, 0x7f, 0xa7, 0xcd, 0xea, 0x8d, 0x9f, 0xec, 0x33, 0x98, 0x1e, 0x30, 0x69, 0x26, 0x53, 0x3f,
	0x93, 0x1d, 0x4f, 0xd8, 0x72, 0xf6, 0xfb, 0x00, 0x02, 0x96, 0x6e, 0xa7, 0x44, 0xef, 0x40, 0x89,
	0xff, 0x52, 0xed, 0x14, 0x82, 0x1c, 0xd7, 0xce, 0xcb, 0x16, 0xc4, 0x3e, 0x20, 0x94, 0x0d, 0xd0,
	0x0a, 0xe7, 0x03, 0x42, 0x9d, 0x76, 0xc2, 0x8b, 0x16, 0xc4, 0x3e, 0xa0, 0xaf, 0x2d, 0x11, 0x2d,
	0xeb, 0x14, 0xc4, 0x7c, 0x26, 0xcc, 0xca, 0xdf, 0x90, 0x75, 0x09, 0x62, 0x3e, 0x87, 0xc7, 0xd0,
	0xbf, 0x45, 0xd3, 0x4a, 0x40, 0xc7, 0x70, 0xde, 0xba, 0x83, 0x66, 0x3d, 0xfa, 0xea, 0x7c, 0xee,
	0x6d, 0x39, 0xdf, 0x99, 0xf9, 0xa6, 0xf3, 0x6d, 0xeb, 0x9c, 0x17, 0x30, 0x31, 0x98, 0xa1, 0xbc,
	0xc5, 0x3c, 0xe1, 0x44, 0xf8, 0xdf, 0xc4, 0x71, 0x97, 0x40, 0x10, 0x79, 0x2b, 0xd3, 0x52, 0xa5,
	0xc2, 0x62, 0x22, 0xf2, 0xdc, 0xb0, 0x2c, 0xc3, 0x78, 0xdc, 0x81, 0x2f, 0xf3, 0xdc, 0x90, 0x3f,
	0x0d, 0x56, 0x62, 0x8b, 0x79, 0x92, 0x6e, 0xa3, 0xb1, 0xf7, 0x67, 0x8b, 0x5c, 0x6f, 0x69, 0x08,
	0x4a, 0xab, 0x0c, 0x5b, 0xad, 0x7c, 0x10, 0x9e, 0xc0, 0x91, 0x4a, 0xdc, 0x86, 0x85, 0x09, 0xe2,
	0xbe, 0xba, 0xd9, 0x50, 0x1d, 0xf2, 0x63, 0xc2, 0x5b, 0x1a, 0x7d, 0xe0, 0xeb, 0x10, 0xe2, 0x45,
	0xfa, 0x1a, 0xa6, 0xfb, 0x6b, 0x36, 0xf1, 0x31, 0xff, 0xcd, 0xe9, 0xbf, 0xfe, 0xe6, 0xa5, 0xda,
	0x7a, 0xfb, 0x73, 0xa2, 0xf7, 0xf6, 0xc0, 0x6d, 0x38, 0xe7, 0xe4, 0x9e, 0x9c, 0xc0, 0x6d, 0x88,
	0xfc, 0x04, 0x86, 0xb5, 0x59, 0x55, 0x89, 0xd1, 0xda, 0x45, 0x21, 0xb7, 0xf1, 0x88, 0x80, 0x58,
	0x6b, 0x96, 0xdf, 0x6d, 0x64, 0x6e, 0xa3, 0xc7, 0x17, 0x7d, 0x12, 0x9a, 0x83, 0xf0, 0x73, 0x98,
	0x4a, 0xe5, 0xd0, 0x28, 0x51, 0x25, 0xfe, 0xfa, 0x94, 0xaf, 0x27, 0x1d, 0x7a, 0xc3, 0xb4, 0xe7,
	0x00, 0x0a, 0x37, 0xae, 0xa5, 0x7c, 0x78, 0x4f, 0x2b, 0x43, 0xe2, 0xf9, 0xa4, 0x6f, 0xe1, 0x31,
	0x27, 0xbd, 0xf5, 0x81, 0xb3, 0x7b, 0xb2, 0x4f, 0x28, 0xe1, 0x87, 0x7f, 0x7c, 0xfa, 0x0c, 0x06,
	0x8d, 0xca, 0x2a, 0xb4, 0xd1, 0x47, 0xdc, 0x59, 0x1b, 0xcd, 0xbe, 0x84, 0xd3, 0x57, 0xe4, 0xd5,
	0xd7, 0x2a, 0x5f, 0x6b, 0xa9, 0x5c, 0x8c, 0xbf, 0x36, 0x68, 0x5d, 0x18, 0xc1, 0x43, 0x85, 0xee,
	0x4e, 0x9b, 0x55, 0xbb, 0x15, 0x5d, 0x38, 0xfb, 0xa3, 0x07, 0x11, 0x0f, 0x96, 0x96, 0xe8, 0x9d,
	0xd3, 0x48, 0x5d, 0xaf, 0x1c, 0x6f, 0xda, 0x03, 0xaf, 0x6e, 0xda, 0xd5, 0xa1, 0x44, 0xb7, 0xb1,
	0x4e, 0x18, 0xd7, 0x2e, 0x56, 0x17, 0xd2, 0xc4, 0x2b, 0x59, 0x4b, 0xc7, 0xab, 0x15, 0xc4, 0x3e,
	0x98, 0xfd, 0xd9, 0x83, 0x73, 0xdf, 0x05, 0xaf, 0xe5, 0xbb, 0xf7, 0xf1, 0x14, 0xc6, 0x6d, 0x1f,
	0xfb, 0xed, 0x1e, 0xc6, 0xa3, 0x74, 0x5f, 0xeb, 0x7d, 0x7b, 0xb9, 0x7e, 0xf1, 0xcb, 0x37, 0x85,
	0x74, 0x65, 0x93, 0xce, 0x33, 0x5d, 0x2f, 0xda, 0x07, 0xe7, 0x8a, 0x5e, 0x9c, 0xc5, 0xfe, 0xc5,
	0xb9, 0xda, 0x3d, 0x1e, 0x7c, 0xc8, 0xae, 0x0a, 0x54, 0x57, 0x85, 0x5e, 0xa0, 0x2b, 0xd3, 0x01,
	0x43, 0xcf, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xed, 0x72, 0x85, 0xca, 0x06, 0x00, 0x00,
}
