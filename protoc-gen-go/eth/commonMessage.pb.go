// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commonMessage.proto

package eth // import "github.com/chainweaver/protobuf/protoc-gen-go/eth"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkAllowingAlias int32

const (
	NetworkAllowingAlias_MAIN    NetworkAllowingAlias = 0
	NetworkAllowingAlias_main    NetworkAllowingAlias = 0
	NetworkAllowingAlias_ROPSTEN NetworkAllowingAlias = 1
	NetworkAllowingAlias_ropsten NetworkAllowingAlias = 1
)

var NetworkAllowingAlias_name = map[int32]string{
	0: "MAIN",
	// Duplicate value: 0: "main",
	1: "ROPSTEN",
	// Duplicate value: 1: "ropsten",
}
var NetworkAllowingAlias_value = map[string]int32{
	"MAIN":    0,
	"main":    0,
	"ROPSTEN": 1,
	"ropsten": 1,
}

func (x NetworkAllowingAlias) String() string {
	return proto.EnumName(NetworkAllowingAlias_name, int32(x))
}
func (NetworkAllowingAlias) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{0}
}

type NullValue struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullValue) Reset()         { *m = NullValue{} }
func (m *NullValue) String() string { return proto.CompactTextString(m) }
func (*NullValue) ProtoMessage()    {}
func (*NullValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{0}
}
func (m *NullValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullValue.Unmarshal(m, b)
}
func (m *NullValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullValue.Marshal(b, m, deterministic)
}
func (dst *NullValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullValue.Merge(dst, src)
}
func (m *NullValue) XXX_Size() int {
	return xxx_messageInfo_NullValue.Size(m)
}
func (m *NullValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NullValue.DiscardUnknown(m)
}

var xxx_messageInfo_NullValue proto.InternalMessageInfo

type Blockchain struct {
	// The name of the blockchain represented, in the form of $COIN.$CHAIN.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The current height of the blockchain; i.e., the number of blocks in the blockchain.
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The hash of the latest confirmed block in the blockchain; in Ethereum, the hashing function is Keccak/SHA3.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// The time of the latest update to the blockchain; typically when the latest block was added.
	Time string `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// The BlockCypher URL to query for more information on the latest confirmed block; returns a Block.
	LatestUrl string `protobuf:"bytes,5,opt,name=latest_url,json=latestUrl,proto3" json:"latest_url,omitempty"`
	// The hash of the second-to-latest confirmed block in the blockchain.
	PreviousHash string `protobuf:"bytes,6,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	// The BlockCypher URL to query for more information on the second-to-latest confirmed block; returns a Block.
	PreviousUrl string `protobuf:"bytes,7,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
	// Number of unconfirmed transactions in memory pool (likely to be included in next block).
	UnconfirmedCount uint32 `protobuf:"varint,8,opt,name=unconfirmed_count,json=unconfirmedCount,proto3" json:"unconfirmed_count,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed within 1 to 2 blocks.
	HighGasPrice []byte `protobuf:"bytes,9,opt,name=high_gas_price,json=highGasPrice,proto3" json:"high_gas_price,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed within 1 to 2 blocks. This is a hex string.
	HighGasPriceHex string `protobuf:"bytes,10,opt,name=high_gas_price_hex,json=highGasPriceHex,proto3" json:"high_gas_price_hex,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed within 3 to 6 blocks.
	MediumGasPrice []byte `protobuf:"bytes,11,opt,name=medium_gas_price,json=mediumGasPrice,proto3" json:"medium_gas_price,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed within 3 to 6 blocks. This is a hex string.
	MediumGasPriceHex string `protobuf:"bytes,12,opt,name=medium_gas_price_hex,json=mediumGasPriceHex,proto3" json:"medium_gas_price_hex,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed in 7 or more blocks.
	LowGasPrice []byte `protobuf:"bytes,13,opt,name=low_gas_price,json=lowGasPrice,proto3" json:"low_gas_price,omitempty"`
	// A rolling average of the gas price (in wei) for transactions to be confirmed in 7 or more blocks. This is a hex string.
	LowGasPriceHex string `protobuf:"bytes,14,opt,name=low_gas_price_hex,json=lowGasPriceHex,proto3" json:"low_gas_price_hex,omitempty"`
	// Optional The current height of the latest fork to the blockchain; when no competing blockchain fork present, not returned with endpoints that return Blockchains.
	LastForkHeight uint32 `protobuf:"varint,15,opt,name=last_fork_height,json=lastForkHeight,proto3" json:"last_fork_height,omitempty"`
	// Optional The hash of the latest confirmed block in the latest fork of the blockchain; when no competing blockchain fork present, not returned with endpoints that return Blockchains.
	LastForkHash         string   `protobuf:"bytes,16,opt,name=last_fork_hash,json=lastForkHash,proto3" json:"last_fork_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blockchain) Reset()         { *m = Blockchain{} }
func (m *Blockchain) String() string { return proto.CompactTextString(m) }
func (*Blockchain) ProtoMessage()    {}
func (*Blockchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{1}
}
func (m *Blockchain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blockchain.Unmarshal(m, b)
}
func (m *Blockchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blockchain.Marshal(b, m, deterministic)
}
func (dst *Blockchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blockchain.Merge(dst, src)
}
func (m *Blockchain) XXX_Size() int {
	return xxx_messageInfo_Blockchain.Size(m)
}
func (m *Blockchain) XXX_DiscardUnknown() {
	xxx_messageInfo_Blockchain.DiscardUnknown(m)
}

var xxx_messageInfo_Blockchain proto.InternalMessageInfo

func (m *Blockchain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Blockchain) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Blockchain) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Blockchain) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Blockchain) GetLatestUrl() string {
	if m != nil {
		return m.LatestUrl
	}
	return ""
}

func (m *Blockchain) GetPreviousHash() string {
	if m != nil {
		return m.PreviousHash
	}
	return ""
}

func (m *Blockchain) GetPreviousUrl() string {
	if m != nil {
		return m.PreviousUrl
	}
	return ""
}

func (m *Blockchain) GetUnconfirmedCount() uint32 {
	if m != nil {
		return m.UnconfirmedCount
	}
	return 0
}

func (m *Blockchain) GetHighGasPrice() []byte {
	if m != nil {
		return m.HighGasPrice
	}
	return nil
}

func (m *Blockchain) GetHighGasPriceHex() string {
	if m != nil {
		return m.HighGasPriceHex
	}
	return ""
}

func (m *Blockchain) GetMediumGasPrice() []byte {
	if m != nil {
		return m.MediumGasPrice
	}
	return nil
}

func (m *Blockchain) GetMediumGasPriceHex() string {
	if m != nil {
		return m.MediumGasPriceHex
	}
	return ""
}

func (m *Blockchain) GetLowGasPrice() []byte {
	if m != nil {
		return m.LowGasPrice
	}
	return nil
}

func (m *Blockchain) GetLowGasPriceHex() string {
	if m != nil {
		return m.LowGasPriceHex
	}
	return ""
}

func (m *Blockchain) GetLastForkHeight() uint32 {
	if m != nil {
		return m.LastForkHeight
	}
	return 0
}

func (m *Blockchain) GetLastForkHash() string {
	if m != nil {
		return m.LastForkHash
	}
	return ""
}

type Block struct {
	// The hash of the block; in Ethereum, the hashing function is Keccak/SHA3
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The height of the block in the blockchain; i.e., there are height earlier blocks in its blockchain.
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The depth of the block in the blockchain; i.e., there are depth later blocks in its blockchain.
	Depth uint32 `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	// The name of the blockchain represented, in the form of $COIN.$CHAIN
	Chain string `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	// The total number of wei transacted in this block.
	Total []byte `protobuf:"bytes,5,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of wei transacted in this block. This is a hex string.
	TotalHex string `protobuf:"bytes,6,opt,name=total_hex,json=totalHex,proto3" json:"total_hex,omitempty"`
	// The total number of fees—in wei—collected by miners in this block.
	Fees []byte `protobuf:"bytes,7,opt,name=fees,proto3" json:"fees,omitempty"`
	// The total number of fees—in wei—collected by miners in this block. This is a hex string.
	FeesHex string `protobuf:"bytes,8,opt,name=fees_hex,json=feesHex,proto3" json:"fees_hex,omitempty"`
	// Raw size of block (including header and all transactions) in bytes.
	Size uint32 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// Block version.
	Ver uint32 `protobuf:"varint,10,opt,name=ver,proto3" json:"ver,omitempty"`
	// Recorded time at which block was built.
	Time string `protobuf:"bytes,11,opt,name=time,proto3" json:"time,omitempty"`
	// The time BlockCypher’s servers receive the block.
	ReceivedTime string `protobuf:"bytes,12,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	// The Ethereum address of the miner that received the coinbase and fee reward.
	CoinbaseAddr string `protobuf:"bytes,13,opt,name=coinbase_addr,json=coinbaseAddr,proto3" json:"coinbase_addr,omitempty"`
	// Address of the peer that sent BlockCypher’s servers this block.
	RelayedBy string `protobuf:"bytes,14,opt,name=relayed_by,json=relayedBy,proto3" json:"relayed_by,omitempty"`
	// The number used by a miner to generate this block.
	Nonce []byte `protobuf:"bytes,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Number of transactions in this block.
	NTx uint32 `protobuf:"varint,16,opt,name=n_tx,json=nTx,proto3" json:"n_tx,omitempty"`
	// The hash of the previous block in the blockchain.
	PrevBlock string `protobuf:"bytes,17,opt,name=prev_block,json=prevBlock,proto3" json:"prev_block,omitempty"`
	// The BlockCypher URL to query for more information on the previous block.
	PrevBlockUrl string `protobuf:"bytes,18,opt,name=prev_block_url,json=prevBlockUrl,proto3" json:"prev_block_url,omitempty"`
	// The base BlockCypher URL to receive transaction details. To get more details about specific transactions, you must concatenate this URL with the desired transaction hash(es).
	TxUrl string `protobuf:"bytes,19,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	// The Merkle root of this block.
	MrklRoot string `protobuf:"bytes,20,opt,name=mrkl_root,json=mrklRoot,proto3" json:"mrkl_root,omitempty"`
	// An array of transaction hashes in this block (initiated by externally controlled accounts). By default, only 20 are included.
	Txids []string `protobuf:"bytes,21,rep,name=txids,proto3" json:"txids,omitempty"`
	// An array of internal transaction hashes (initiated by internal contracts) in this block. By default, only 20 are included.
	InternalTxids []string `protobuf:"bytes,22,rep,name=internal_txids,json=internalTxids,proto3" json:"internal_txids,omitempty"`
	// Optional If there are more transactions that couldn’t fit in the txids array, this is the BlockCypher URL to query the next set of transactions (within a Block object).
	NextTxids string `protobuf:"bytes,23,opt,name=next_txids,json=nextTxids,proto3" json:"next_txids,omitempty"`
	// Optional If there are more internal transactions that couldn’t fit in the internal_txids array, this is the BlockCypher URL to query the next set of transactions (within a Block object).
	NextInternalTxids string `protobuf:"bytes,24,opt,name=next_internal_txids,json=nextInternalTxids,proto3" json:"next_internal_txids,omitempty"`
	// List of uncle blocks by hash included by the miner of this block. You can read more about uncles here.
	Uncles               []string `protobuf:"bytes,25,rep,name=uncles,proto3" json:"uncles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{2}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Block) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Block) GetTotal() []byte {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *Block) GetTotalHex() string {
	if m != nil {
		return m.TotalHex
	}
	return ""
}

func (m *Block) GetFees() []byte {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Block) GetFeesHex() string {
	if m != nil {
		return m.FeesHex
	}
	return ""
}

func (m *Block) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Block) GetVer() uint32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *Block) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Block) GetReceivedTime() string {
	if m != nil {
		return m.ReceivedTime
	}
	return ""
}

func (m *Block) GetCoinbaseAddr() string {
	if m != nil {
		return m.CoinbaseAddr
	}
	return ""
}

func (m *Block) GetRelayedBy() string {
	if m != nil {
		return m.RelayedBy
	}
	return ""
}

func (m *Block) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Block) GetNTx() uint32 {
	if m != nil {
		return m.NTx
	}
	return 0
}

func (m *Block) GetPrevBlock() string {
	if m != nil {
		return m.PrevBlock
	}
	return ""
}

func (m *Block) GetPrevBlockUrl() string {
	if m != nil {
		return m.PrevBlockUrl
	}
	return ""
}

func (m *Block) GetTxUrl() string {
	if m != nil {
		return m.TxUrl
	}
	return ""
}

func (m *Block) GetMrklRoot() string {
	if m != nil {
		return m.MrklRoot
	}
	return ""
}

func (m *Block) GetTxids() []string {
	if m != nil {
		return m.Txids
	}
	return nil
}

func (m *Block) GetInternalTxids() []string {
	if m != nil {
		return m.InternalTxids
	}
	return nil
}

func (m *Block) GetNextTxids() string {
	if m != nil {
		return m.NextTxids
	}
	return ""
}

func (m *Block) GetNextInternalTxids() string {
	if m != nil {
		return m.NextInternalTxids
	}
	return ""
}

func (m *Block) GetUncles() []string {
	if m != nil {
		return m.Uncles
	}
	return nil
}

type TXRef struct {
	// Height of the block that contains this transaction input/output. If it’s unconfirmed, this will equal -1.
	BlockHeight int32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The hash of the transaction containing this input/output.
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Index of this input in the enclosing transaction. 0 if it’s an input, -1 if it’s an output.
	TxInputN uint32 `protobuf:"varint,3,opt,name=tx_input_n,json=txInputN,proto3" json:"tx_input_n,omitempty"`
	// Index of this output in the enclosing transaction. -1 if it’s an input, 0 if it’s an output.
	TxOutputN uint32 `protobuf:"varint,4,opt,name=tx_output_n,json=txOutputN,proto3" json:"tx_output_n,omitempty"`
	// The value transfered by this input/output in wei exchanged in the enclosing transaction.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// The value transfered by this input/output in wei exchanged in the enclosing transaction. This is a hex string.
	ValueHex string `protobuf:"bytes,6,opt,name=value_hex,json=valueHex,proto3" json:"value_hex,omitempty"`
	// true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,7,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	// Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
	Confirmations uint32 `protobuf:"varint,8,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions.
	RefBalance []byte `protobuf:"bytes,9,opt,name=ref_balance,json=refBalance,proto3" json:"ref_balance,omitempty"`
	// Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions. This is a hex string.
	RefBalanceHex string `protobuf:"bytes,10,opt,name=ref_balance_hex,json=refBalanceHex,proto3" json:"ref_balance_hex,omitempty"`
	// Optional Time at which transaction was included in a block; only present for confirmed transactions.
	Confirmed string `protobuf:"bytes,11,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
	DoubleOf             string   `protobuf:"bytes,12,opt,name=double_of,json=doubleOf,proto3" json:"double_of,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXRef) Reset()         { *m = TXRef{} }
func (m *TXRef) String() string { return proto.CompactTextString(m) }
func (*TXRef) ProtoMessage()    {}
func (*TXRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{3}
}
func (m *TXRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXRef.Unmarshal(m, b)
}
func (m *TXRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXRef.Marshal(b, m, deterministic)
}
func (dst *TXRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXRef.Merge(dst, src)
}
func (m *TXRef) XXX_Size() int {
	return xxx_messageInfo_TXRef.Size(m)
}
func (m *TXRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TXRef.DiscardUnknown(m)
}

var xxx_messageInfo_TXRef proto.InternalMessageInfo

func (m *TXRef) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TXRef) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TXRef) GetTxInputN() uint32 {
	if m != nil {
		return m.TxInputN
	}
	return 0
}

func (m *TXRef) GetTxOutputN() uint32 {
	if m != nil {
		return m.TxOutputN
	}
	return 0
}

func (m *TXRef) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TXRef) GetValueHex() string {
	if m != nil {
		return m.ValueHex
	}
	return ""
}

func (m *TXRef) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *TXRef) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TXRef) GetRefBalance() []byte {
	if m != nil {
		return m.RefBalance
	}
	return nil
}

func (m *TXRef) GetRefBalanceHex() string {
	if m != nil {
		return m.RefBalanceHex
	}
	return ""
}

func (m *TXRef) GetConfirmed() string {
	if m != nil {
		return m.Confirmed
	}
	return ""
}

func (m *TXRef) GetDoubleOf() string {
	if m != nil {
		return m.DoubleOf
	}
	return ""
}

type TXSkeleton struct {
	// A temporary TX, usually returned fully filled.
	Tx *TX `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Array of hex-encoded data for you to sign, containing one element for you to sign. Still an array to maintain parity with the Bitcoin API.
	Tosign []string `protobuf:"bytes,2,rep,name=tosign,proto3" json:"tosign,omitempty"`
	// Array of signatures corresponding to all the data in tosign, typically provided by you. Only one signature is required.
	Signatures []string `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Optional Array of errors in the form “error”:“description-of-error”. This is only returned if there was an error in any stage of transaction generation, and is usually accompanied by a HTTP 400 code.
	Errors               []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXSkeleton) Reset()         { *m = TXSkeleton{} }
func (m *TXSkeleton) String() string { return proto.CompactTextString(m) }
func (*TXSkeleton) ProtoMessage()    {}
func (*TXSkeleton) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{4}
}
func (m *TXSkeleton) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXSkeleton.Unmarshal(m, b)
}
func (m *TXSkeleton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXSkeleton.Marshal(b, m, deterministic)
}
func (dst *TXSkeleton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXSkeleton.Merge(dst, src)
}
func (m *TXSkeleton) XXX_Size() int {
	return xxx_messageInfo_TXSkeleton.Size(m)
}
func (m *TXSkeleton) XXX_DiscardUnknown() {
	xxx_messageInfo_TXSkeleton.DiscardUnknown(m)
}

var xxx_messageInfo_TXSkeleton proto.InternalMessageInfo

func (m *TXSkeleton) GetTx() *TX {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TXSkeleton) GetTosign() []string {
	if m != nil {
		return m.Tosign
	}
	return nil
}

func (m *TXSkeleton) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *TXSkeleton) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type InputType struct {
	Sequence             uint32   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Addresses            []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InputType) Reset()         { *m = InputType{} }
func (m *InputType) String() string { return proto.CompactTextString(m) }
func (*InputType) ProtoMessage()    {}
func (*InputType) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{5}
}
func (m *InputType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputType.Unmarshal(m, b)
}
func (m *InputType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputType.Marshal(b, m, deterministic)
}
func (dst *InputType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputType.Merge(dst, src)
}
func (m *InputType) XXX_Size() int {
	return xxx_messageInfo_InputType.Size(m)
}
func (m *InputType) XXX_DiscardUnknown() {
	xxx_messageInfo_InputType.DiscardUnknown(m)
}

var xxx_messageInfo_InputType proto.InternalMessageInfo

func (m *InputType) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *InputType) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type OutputType struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ValueHex             string   `protobuf:"bytes,2,opt,name=value_hex,json=valueHex,proto3" json:"value_hex,omitempty"`
	Script               string   `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	Addresses            []string `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutputType) Reset()         { *m = OutputType{} }
func (m *OutputType) String() string { return proto.CompactTextString(m) }
func (*OutputType) ProtoMessage()    {}
func (*OutputType) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{6}
}
func (m *OutputType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputType.Unmarshal(m, b)
}
func (m *OutputType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputType.Marshal(b, m, deterministic)
}
func (dst *OutputType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputType.Merge(dst, src)
}
func (m *OutputType) XXX_Size() int {
	return xxx_messageInfo_OutputType.Size(m)
}
func (m *OutputType) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputType.DiscardUnknown(m)
}

var xxx_messageInfo_OutputType proto.InternalMessageInfo

func (m *OutputType) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *OutputType) GetValueHex() string {
	if m != nil {
		return m.ValueHex
	}
	return ""
}

func (m *OutputType) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *OutputType) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type TX struct {
	// Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1.
	BlockHeight int32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The hash of the transaction.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Array of Ethereum addresses involved in the transaction.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The total number of wei exchanged in this transaction.
	Total []byte `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of wei exchanged in this transaction. This is a hex string.
	TotalHex string `protobuf:"bytes,5,opt,name=total_hex,json=totalHex,proto3" json:"total_hex,omitempty"`
	// The total number of fees—in wei—collected by miners in this transaction. Equal to gas_price * gas_used.
	Fees []byte `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty"`
	// The total number of fees—in wei—collected by miners in this transaction. Equal to gas_price * gas_used. This is a hex string.
	FeesHex string `protobuf:"bytes,7,opt,name=fees_hex,json=feesHex,proto3" json:"fees_hex,omitempty"`
	// The size of the transaction in bytes.
	Size uint32 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	// The amount of gas used by this transaction.
	GasUsed []byte `protobuf:"bytes,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// The amount of gas used by this transaction. This is a hex string.
	GasUsedHex string `protobuf:"bytes,10,opt,name=gas_used_hex,json=gasUsedHex,proto3" json:"gas_used_hex,omitempty"`
	// The price of gas—in wei—in this transaction.
	GasPrice []byte `protobuf:"bytes,11,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// The price of gas—in wei—in this transaction. This is a hex string.
	GasPriceHex string `protobuf:"bytes,12,opt,name=gas_price_hex,json=gasPriceHex,proto3" json:"gas_price_hex,omitempty"`
	// Address of the peer that sent BlockCypher’s servers this transaction. May be empty.
	RelayedBy string `protobuf:"bytes,13,opt,name=relayed_by,json=relayedBy,proto3" json:"relayed_by,omitempty"`
	// Time this transaction was received by BlockCypher’s servers.
	Received string `protobuf:"bytes,14,opt,name=received,proto3" json:"received,omitempty"`
	// Version number of this transaction.
	Ver uint32 `protobuf:"varint,15,opt,name=ver,proto3" json:"ver,omitempty"`
	// true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,16,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	// Total number of inputs in the transaction.
	VinSz uint32 `protobuf:"varint,17,opt,name=vin_sz,json=vinSz,proto3" json:"vin_sz,omitempty"`
	// Total number of outputs in the transaction.
	VoutSz uint32 `protobuf:"varint,18,opt,name=vout_sz,json=voutSz,proto3" json:"vout_sz,omitempty"`
	// Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
	Confirmations uint32 `protobuf:"varint,19,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// An array object containing a single input with a sequence number (used as a nonce for account balances) and an Ethereum account address. Only contains one input in the array; we still use an array to maintain parity with the Bitcoin API.
	Inputs []*InputType `protobuf:"bytes,20,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// An array object containing a single output with value (in wei), script, and an Ethereum account address. Only contains one output in the array; we still use an array to maintain parity with the Bitcoin API.
	Outputs []*OutputType `protobuf:"bytes,21,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Optional If this transaction executed a contract which propagated its own subsequent transactions, then this array will be present, containing the hashes of those subsequent internal transactions.
	InternalTxids []string `protobuf:"bytes,22,rep,name=internal_txids,json=internalTxids,proto3" json:"internal_txids,omitempty"`
	// Optional If this transaction was initiated by a contract, this field will be present, conveying the hash of the parent transaction that executed the contract resulting in this transaction (the inverse of an internal_txids hash).
	ParentTx string `protobuf:"bytes,23,opt,name=parent_tx,json=parentTx,proto3" json:"parent_tx,omitempty"`
	// Optional Time at which transaction was included in a block; only present for confirmed transactions.
	Confirmed string `protobuf:"bytes,24,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional If creating a transaction, can optionally set a higher default gas limit (useful if your recepient is a contract). If not set, default is 21000 gas for external accounts and 80000 for contract accounts.
	GasLimit []byte `protobuf:"bytes,25,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Optional If creating a transaction, can optionally set a higher default gas limit (useful if your recepient is a contract). If not set, default is 21000 gas for external accounts and 80000 for contract accounts. This is a hex string.
	GasLimitHex string `protobuf:"bytes,26,opt,name=gas_limit_hex,json=gasLimitHex,proto3" json:"gas_limit_hex,omitempty"`
	// Optional If true, this transaction was used to create a contract and contract account. Note that the contract address (in the outputs field) will be blank until the transaction is confirmed.
	ContractCreation bool `protobuf:"varint,27,opt,name=contract_creation,json=contractCreation,proto3" json:"contract_creation,omitempty"`
	// Optional Number of peers that have sent this transaction to BlockCypher; only present for unconfirmed transactions.
	ReceiveCount uint32 `protobuf:"varint,28,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
	// Optional Hash of the block that contains this transaction; only present for confirmed transactions.
	BlockHash string `protobuf:"bytes,29,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions.
	BlockIndex uint32 `protobuf:"varint,30,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	// Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
	DoubleOf string `protobuf:"bytes,31,opt,name=double_of,json=doubleOf,proto3" json:"double_of,omitempty"`
	// Optional If this transaction has an execution error, then this field will be included (e.g. “out of gas”).
	ExecutionError       string   `protobuf:"bytes,32,opt,name=execution_error,json=executionError,proto3" json:"execution_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TX) Reset()         { *m = TX{} }
func (m *TX) String() string { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()    {}
func (*TX) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{7}
}
func (m *TX) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TX.Unmarshal(m, b)
}
func (m *TX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TX.Marshal(b, m, deterministic)
}
func (dst *TX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TX.Merge(dst, src)
}
func (m *TX) XXX_Size() int {
	return xxx_messageInfo_TX.Size(m)
}
func (m *TX) XXX_DiscardUnknown() {
	xxx_messageInfo_TX.DiscardUnknown(m)
}

var xxx_messageInfo_TX proto.InternalMessageInfo

func (m *TX) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TX) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TX) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TX) GetTotal() []byte {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *TX) GetTotalHex() string {
	if m != nil {
		return m.TotalHex
	}
	return ""
}

func (m *TX) GetFees() []byte {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *TX) GetFeesHex() string {
	if m != nil {
		return m.FeesHex
	}
	return ""
}

func (m *TX) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TX) GetGasUsed() []byte {
	if m != nil {
		return m.GasUsed
	}
	return nil
}

func (m *TX) GetGasUsedHex() string {
	if m != nil {
		return m.GasUsedHex
	}
	return ""
}

func (m *TX) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *TX) GetGasPriceHex() string {
	if m != nil {
		return m.GasPriceHex
	}
	return ""
}

func (m *TX) GetRelayedBy() string {
	if m != nil {
		return m.RelayedBy
	}
	return ""
}

func (m *TX) GetReceived() string {
	if m != nil {
		return m.Received
	}
	return ""
}

func (m *TX) GetVer() uint32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *TX) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *TX) GetVinSz() uint32 {
	if m != nil {
		return m.VinSz
	}
	return 0
}

func (m *TX) GetVoutSz() uint32 {
	if m != nil {
		return m.VoutSz
	}
	return 0
}

func (m *TX) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TX) GetInputs() []*InputType {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TX) GetOutputs() []*OutputType {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TX) GetInternalTxids() []string {
	if m != nil {
		return m.InternalTxids
	}
	return nil
}

func (m *TX) GetParentTx() string {
	if m != nil {
		return m.ParentTx
	}
	return ""
}

func (m *TX) GetConfirmed() string {
	if m != nil {
		return m.Confirmed
	}
	return ""
}

func (m *TX) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *TX) GetGasLimitHex() string {
	if m != nil {
		return m.GasLimitHex
	}
	return ""
}

func (m *TX) GetContractCreation() bool {
	if m != nil {
		return m.ContractCreation
	}
	return false
}

func (m *TX) GetReceiveCount() uint32 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *TX) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TX) GetBlockIndex() uint32 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *TX) GetDoubleOf() string {
	if m != nil {
		return m.DoubleOf
	}
	return ""
}

func (m *TX) GetExecutionError() string {
	if m != nil {
		return m.ExecutionError
	}
	return ""
}

type Address struct {
	// The requested address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Total amount of confirmed wei received by this address.
	TotalReceived []byte `protobuf:"bytes,2,opt,name=total_received,json=totalReceived,proto3" json:"total_received,omitempty"`
	// Total amount of confirmed wei received by this address. This is a hex string.
	TotalReceivedHex string `protobuf:"bytes,3,opt,name=total_received_hex,json=totalReceivedHex,proto3" json:"total_received_hex,omitempty"`
	// Total amount of confirmed wei sent by this address.
	TotalSent []byte `protobuf:"bytes,4,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	// Total amount of confirmed wei sent by this address. This is a hex string.
	TotalSentHex string `protobuf:"bytes,5,opt,name=total_sent_hex,json=totalSentHex,proto3" json:"total_sent_hex,omitempty"`
	// Balance of confirmed wei on this address. (i.e., for transactions whose confirmations > 0).
	Balance []byte `protobuf:"bytes,6,opt,name=balance,proto3" json:"balance,omitempty"`
	// Balance of confirmed wei on this address. (i.e., for transactions whose confirmations > 0). This is a hex string.
	BalanceHex string `protobuf:"bytes,7,opt,name=balance_hex,json=balanceHex,proto3" json:"balance_hex,omitempty"`
	// Balance of unconfirmed wei on this address. Can be negative (if unconfirmed transactions are just spending part of an address balance). Only unconfirmed transactions (haven’t made it into a block) are included in this calculation.
	UnconfirmedBalance []byte `protobuf:"bytes,8,opt,name=unconfirmed_balance,json=unconfirmedBalance,proto3" json:"unconfirmed_balance,omitempty"`
	// Balance of unconfirmed wei on this address. Can be negative (if unconfirmed transactions are just spending part of an address balance). Only unconfirmed transactions (haven’t made it into a block) are included in this calculation. This is a hex string.
	UnconfirmedBalanceHex string `protobuf:"bytes,9,opt,name=unconfirmed_balance_hex,json=unconfirmedBalanceHex,proto3" json:"unconfirmed_balance_hex,omitempty"`
	// Total balance of wei, including confirmed and unconfirmed transactions, for this address.
	FinalBalance []byte `protobuf:"bytes,10,opt,name=final_balance,json=finalBalance,proto3" json:"final_balance,omitempty"`
	// Total balance of wei, including confirmed and unconfirmed transactions, for this address. This is a hex string.
	FinalBalanceHex string `protobuf:"bytes,11,opt,name=final_balance_hex,json=finalBalanceHex,proto3" json:"final_balance_hex,omitempty"`
	// Number of confirmed transactions on this address. Only transactions that have made it into a block (confirmations > 0) are counted.
	NTx uint32 `protobuf:"varint,12,opt,name=n_tx,json=nTx,proto3" json:"n_tx,omitempty"`
	// Number of unconfirmed transactions for this address. Only unconfirmed transactions (confirmations == 0) are counted.
	UnconfirmedNTx uint32 `protobuf:"varint,13,opt,name=unconfirmed_n_tx,json=unconfirmedNTx,proto3" json:"unconfirmed_n_tx,omitempty"`
	// Final number of transactions, including confirmed and unconfirmed transactions, for this address.
	FinalNTx uint32 `protobuf:"varint,14,opt,name=final_n_tx,json=finalNTx,proto3" json:"final_n_tx,omitempty"`
	// Optional To retrieve base URL transactions. To get the full URL, concatenate this URL with a transaction’s hash.
	TxUrl string `protobuf:"bytes,15,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	// Optional Array of transaction summaries for this address. Usually only returned from the standard Address Endpoint.
	Txrefs []*TXRef `protobuf:"bytes,16,rep,name=txrefs,proto3" json:"txrefs,omitempty"`
	// Optional All unconfirmed transaction summaries for this address. Usually only returned from the standard Address Endpoint.
	UnconfirmedTxrefs []*TXRef `protobuf:"bytes,17,rep,name=unconfirmed_txrefs,json=unconfirmedTxrefs,proto3" json:"unconfirmed_txrefs,omitempty"`
	// Optional If true, then the Address object contains more transactions than shown. Useful for determining whether to poll the API for more transaction information.
	HasMore              bool     `protobuf:"varint,18,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{8}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (dst *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(dst, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetTotalReceived() []byte {
	if m != nil {
		return m.TotalReceived
	}
	return nil
}

func (m *Address) GetTotalReceivedHex() string {
	if m != nil {
		return m.TotalReceivedHex
	}
	return ""
}

func (m *Address) GetTotalSent() []byte {
	if m != nil {
		return m.TotalSent
	}
	return nil
}

func (m *Address) GetTotalSentHex() string {
	if m != nil {
		return m.TotalSentHex
	}
	return ""
}

func (m *Address) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *Address) GetBalanceHex() string {
	if m != nil {
		return m.BalanceHex
	}
	return ""
}

func (m *Address) GetUnconfirmedBalance() []byte {
	if m != nil {
		return m.UnconfirmedBalance
	}
	return nil
}

func (m *Address) GetUnconfirmedBalanceHex() string {
	if m != nil {
		return m.UnconfirmedBalanceHex
	}
	return ""
}

func (m *Address) GetFinalBalance() []byte {
	if m != nil {
		return m.FinalBalance
	}
	return nil
}

func (m *Address) GetFinalBalanceHex() string {
	if m != nil {
		return m.FinalBalanceHex
	}
	return ""
}

func (m *Address) GetNTx() uint32 {
	if m != nil {
		return m.NTx
	}
	return 0
}

func (m *Address) GetUnconfirmedNTx() uint32 {
	if m != nil {
		return m.UnconfirmedNTx
	}
	return 0
}

func (m *Address) GetFinalNTx() uint32 {
	if m != nil {
		return m.FinalNTx
	}
	return 0
}

func (m *Address) GetTxUrl() string {
	if m != nil {
		return m.TxUrl
	}
	return ""
}

func (m *Address) GetTxrefs() []*TXRef {
	if m != nil {
		return m.Txrefs
	}
	return nil
}

func (m *Address) GetUnconfirmedTxrefs() []*TXRef {
	if m != nil {
		return m.UnconfirmedTxrefs
	}
	return nil
}

func (m *Address) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type AddressKeychain struct {
	// Standard address representation.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex-encoded Public key.
	Public string `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
	// Hex-encoded Private key.
	Private              string   `protobuf:"bytes,3,opt,name=private,proto3" json:"private,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressKeychain) Reset()         { *m = AddressKeychain{} }
func (m *AddressKeychain) String() string { return proto.CompactTextString(m) }
func (*AddressKeychain) ProtoMessage()    {}
func (*AddressKeychain) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{9}
}
func (m *AddressKeychain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressKeychain.Unmarshal(m, b)
}
func (m *AddressKeychain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressKeychain.Marshal(b, m, deterministic)
}
func (dst *AddressKeychain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressKeychain.Merge(dst, src)
}
func (m *AddressKeychain) XXX_Size() int {
	return xxx_messageInfo_AddressKeychain.Size(m)
}
func (m *AddressKeychain) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressKeychain.DiscardUnknown(m)
}

var xxx_messageInfo_AddressKeychain proto.InternalMessageInfo

func (m *AddressKeychain) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressKeychain) GetPublic() string {
	if m != nil {
		return m.Public
	}
	return ""
}

func (m *AddressKeychain) GetPrivate() string {
	if m != nil {
		return m.Private
	}
	return ""
}

type Contract struct {
	// Solidity code of this contract; required when creating a contract. In responses, only returned with contracts initially compiled by BlockCypher.
	Solidity string `protobuf:"bytes,1,opt,name=solidity,proto3" json:"solidity,omitempty"`
	// Parameters for either contract creation or method execution.
	Params []string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	// Named contract(s) to publish; necessary to specify when first creating a contract.
	Publish []string `protobuf:"bytes,3,rep,name=publish,proto3" json:"publish,omitempty"`
	// Private key associated with a funded Ethereum external account used to publish a contract or execute a method.
	Private string `protobuf:"bytes,4,opt,name=private,proto3" json:"private,omitempty"`
	// Maximum amount of gas to use in contract creation or method execution.
	GasLimit []byte `protobuf:"bytes,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Maximum amount of gas to use in contract creation or method execution. This is a hex string.
	GasLimitHex string `protobuf:"bytes,6,opt,name=gas_limit_hex,json=gasLimitHex,proto3" json:"gas_limit_hex,omitempty"`
	// Amount (in wei) to transfer; can be used when creating a contract or calling a method.
	Value []byte `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	// Amount (in wei) to transfer; can be used when creating a contract or calling a method. This is a hex string.
	ValueHex string `protobuf:"bytes,8,opt,name=value_hex,json=valueHex,proto3" json:"value_hex,omitempty"`
	// Name of contract as published.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Hex-encoded binary compilation of this contract.
	Bin string `protobuf:"bytes,10,opt,name=bin,proto3" json:"bin,omitempty"`
	// JSON-encoded ABI. Only returned with contracts initially compiled by BlockCypher.
	Abi string `protobuf:"bytes,11,opt,name=abi,proto3" json:"abi,omitempty"`
	// Hex-encoded address of this contract.
	Address string `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	// Timestamp when this contract was confirmed in the Ethereum blockchain.
	Created string `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
	// Hex-encoded transaction hash that created this contract.
	CreationTxHash string `protobuf:"bytes,14,opt,name=creation_tx_hash,json=creationTxHash,proto3" json:"creation_tx_hash,omitempty"`
	// If this is a response from a calling a contract method, this array of results may appear if the method returns any.
	Results              []string `protobuf:"bytes,15,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{10}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contract.Unmarshal(m, b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
}
func (dst *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(dst, src)
}
func (m *Contract) XXX_Size() int {
	return xxx_messageInfo_Contract.Size(m)
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetSolidity() string {
	if m != nil {
		return m.Solidity
	}
	return ""
}

func (m *Contract) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Contract) GetPublish() []string {
	if m != nil {
		return m.Publish
	}
	return nil
}

func (m *Contract) GetPrivate() string {
	if m != nil {
		return m.Private
	}
	return ""
}

func (m *Contract) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *Contract) GetGasLimitHex() string {
	if m != nil {
		return m.GasLimitHex
	}
	return ""
}

func (m *Contract) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Contract) GetValueHex() string {
	if m != nil {
		return m.ValueHex
	}
	return ""
}

func (m *Contract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contract) GetBin() string {
	if m != nil {
		return m.Bin
	}
	return ""
}

func (m *Contract) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contract) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Contract) GetCreationTxHash() string {
	if m != nil {
		return m.CreationTxHash
	}
	return ""
}

func (m *Contract) GetResults() []string {
	if m != nil {
		return m.Results
	}
	return nil
}

type Event struct {
	// Identifier of the event; generated when a new request is created.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of event; can be unconfirmed-tx, new-block, confirmed-tx, tx-confirmation, double-spend-tx.
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// optional Only objects with a matching hash will be sent. The hash can either be for a block or a transaction.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// optional Only transactions associated with the given address will be sent.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// optional Used in concert with the tx-confirmation event type to set the number of confirmations desired for which to receive an update. You’ll receive an updated TX for every confirmation up to this amount. The maximum allowed is 10; if not set, it will default to 6.
	Confirmations uint32 `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// optional Callback URL for this Event’s WebHook; not applicable for WebSockets usage.
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// Number of errors when attempting to POST to callback URL; not applicable for WebSockets usage.
	CallbackErrors uint32 `protobuf:"varint,7,opt,name=callback_errors,json=callbackErrors,proto3" json:"callback_errors,omitempty"`
	// filter
	Filter               string   `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonMessage_050d3d612d7dda1a, []int{11}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Event) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Event) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Event) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *Event) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Event) GetCallbackErrors() uint32 {
	if m != nil {
		return m.CallbackErrors
	}
	return 0
}

func (m *Event) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func init() {
	proto.RegisterType((*NullValue)(nil), "chainweaver.protobuf.eth.NullValue")
	proto.RegisterType((*Blockchain)(nil), "chainweaver.protobuf.eth.Blockchain")
	proto.RegisterType((*Block)(nil), "chainweaver.protobuf.eth.Block")
	proto.RegisterType((*TXRef)(nil), "chainweaver.protobuf.eth.TXRef")
	proto.RegisterType((*TXSkeleton)(nil), "chainweaver.protobuf.eth.TXSkeleton")
	proto.RegisterType((*InputType)(nil), "chainweaver.protobuf.eth.InputType")
	proto.RegisterType((*OutputType)(nil), "chainweaver.protobuf.eth.OutputType")
	proto.RegisterType((*TX)(nil), "chainweaver.protobuf.eth.TX")
	proto.RegisterType((*Address)(nil), "chainweaver.protobuf.eth.Address")
	proto.RegisterType((*AddressKeychain)(nil), "chainweaver.protobuf.eth.AddressKeychain")
	proto.RegisterType((*Contract)(nil), "chainweaver.protobuf.eth.Contract")
	proto.RegisterType((*Event)(nil), "chainweaver.protobuf.eth.Event")
	proto.RegisterEnum("chainweaver.protobuf.eth.NetworkAllowingAlias", NetworkAllowingAlias_name, NetworkAllowingAlias_value)
}

func init() { proto.RegisterFile("commonMessage.proto", fileDescriptor_commonMessage_050d3d612d7dda1a) }

var fileDescriptor_commonMessage_050d3d612d7dda1a = []byte{
	// 2351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x59, 0xdd, 0x6f, 0xdb, 0xc8,
	0x11, 0xbf, 0xd5, 0xb7, 0x46, 0x1f, 0x96, 0xd7, 0x4e, 0xc2, 0xcb, 0xa7, 0x4f, 0x49, 0x51, 0xf7,
	0x12, 0xc7, 0xce, 0x47, 0xef, 0x9a, 0x5c, 0xef, 0x00, 0x39, 0xcd, 0x5d, 0x82, 0x36, 0xce, 0x81,
	0xd6, 0x15, 0x41, 0x0f, 0x17, 0x82, 0x92, 0x56, 0x12, 0x61, 0x8a, 0x54, 0xc9, 0xa5, 0x2d, 0xbb,
	0xed, 0x53, 0xdf, 0x0c, 0xf4, 0xc5, 0xff, 0x49, 0xff, 0x89, 0x3e, 0x15, 0x28, 0x4a, 0xdc, 0x01,
	0xed, 0x63, 0x81, 0x3e, 0xf4, 0xaf, 0x28, 0x8a, 0x9d, 0x5d, 0x52, 0xa4, 0x6c, 0x29, 0x4a, 0x9f,
	0xcc, 0x99, 0x9d, 0x9d, 0x59, 0x71, 0x7e, 0xf3, 0x9b, 0x59, 0x1a, 0xd6, 0xba, 0xee, 0x68, 0xe4,
	0x3a, 0xaf, 0x98, 0xef, 0x9b, 0x03, 0x76, 0x7f, 0xec, 0xb9, 0xdc, 0xa5, 0x5a, 0x77, 0x68, 0x5a,
	0xce, 0x11, 0x33, 0x0f, 0x99, 0x27, 0x55, 0x9d, 0xa0, 0x7f, 0x9f, 0xf1, 0xe1, 0xd5, 0x7b, 0x28,
	0x75, 0xb7, 0x06, 0xcc, 0xd9, 0xf2, 0x8f, 0xcc, 0xc1, 0x80, 0x79, 0xdb, 0xee, 0x98, 0x5b, 0xae,
	0xe3, 0x6f, 0x9b, 0x8e, 0xe3, 0x72, 0x13, 0x9f, 0xe5, 0xa6, 0x66, 0x05, 0xca, 0x7b, 0x81, 0x6d,
	0xff, 0xda, 0xb4, 0x03, 0xd6, 0xfc, 0xa1, 0x08, 0xb0, 0x6b, 0xbb, 0xdd, 0x03, 0x74, 0x4e, 0x29,
	0xe4, 0x1c, 0x73, 0xc4, 0x34, 0xb2, 0x41, 0x36, 0xcb, 0x3a, 0x3e, 0xd3, 0xcb, 0x50, 0x18, 0x32,
	0x6b, 0x30, 0xe4, 0x5a, 0x66, 0x83, 0x6c, 0xd6, 0x74, 0x25, 0xd1, 0x8f, 0x21, 0x37, 0x34, 0xfd,
	0xa1, 0x96, 0x15, 0xb6, 0xbb, 0x97, 0xcf, 0x5a, 0x6b, 0xa7, 0xa4, 0xf1, 0x76, 0xf3, 0x5b, 0x73,
	0xeb, 0x64, 0x67, 0xeb, 0xc9, 0x77, 0xbf, 0xfb, 0xe4, 0xf1, 0x1f, 0x7e, 0x72, 0x47, 0x47, 0x1b,
	0x7a, 0x1b, 0x72, 0xdc, 0x1a, 0x31, 0x2d, 0x87, 0xb6, 0x2b, 0x67, 0xad, 0xea, 0x29, 0x29, 0xf7,
	0x4c, 0xce, 0xb6, 0x84, 0x5a, 0xc7, 0x45, 0xba, 0x09, 0x60, 0x9b, 0x9c, 0xf9, 0xdc, 0x08, 0x3c,
	0x5b, 0xcb, 0xa3, 0x69, 0xf9, 0xac, 0x55, 0x38, 0x25, 0xd9, 0xc0, 0xb3, 0xf4, 0xb2, 0x5c, 0xfc,
	0xc6, 0xb3, 0xe9, 0x67, 0x50, 0x1b, 0x7b, 0xec, 0xd0, 0x72, 0x03, 0xdf, 0xc0, 0x33, 0x14, 0x16,
	0x9e, 0xa1, 0x1a, 0x19, 0xbf, 0x10, 0x67, 0xb9, 0x07, 0xb1, 0x8c, 0x81, 0x8a, 0xb3, 0x81, 0x2a,
	0xd1, 0xb2, 0x08, 0x75, 0x17, 0x56, 0x03, 0xa7, 0xeb, 0x3a, 0x7d, 0xcb, 0x1b, 0xb1, 0x9e, 0xd1,
	0x75, 0x03, 0x87, 0x6b, 0x25, 0x7c, 0x11, 0x8d, 0xc4, 0xc2, 0x33, 0xa1, 0xa7, 0x77, 0xa0, 0x3e,
	0xb4, 0x06, 0x43, 0x63, 0x60, 0xfa, 0xc6, 0xd8, 0xb3, 0xba, 0x4c, 0x2b, 0x6f, 0x90, 0xcd, 0xaa,
	0x5e, 0x15, 0xda, 0xaf, 0x4c, 0xff, 0x6b, 0xa1, 0xa3, 0xcf, 0x80, 0xa6, 0xad, 0x8c, 0x21, 0x9b,
	0x68, 0x90, 0xfa, 0x09, 0x3b, 0x93, 0x6f, 0x77, 0xb6, 0x9e, 0x98, 0x5b, 0xfd, 0xd6, 0xd6, 0x97,
	0xdf, 0xdd, 0xbd, 0xa3, 0xaf, 0x24, 0x3d, 0xbc, 0x60, 0x13, 0xba, 0x09, 0x8d, 0x11, 0xeb, 0x59,
	0xc1, 0x28, 0x11, 0xac, 0x82, 0xc1, 0xea, 0x52, 0x1f, 0x87, 0xfb, 0x0a, 0xd6, 0x67, 0x2d, 0x31,
	0x60, 0x75, 0x61, 0xc0, 0xd5, 0xb4, 0x17, 0x11, 0xb2, 0x09, 0x35, 0xdb, 0x3d, 0x4a, 0xc4, 0xab,
	0x61, 0xbc, 0x8a, 0xed, 0x1e, 0xc5, 0xc1, 0x5a, 0xb0, 0x9a, 0xb2, 0xc1, 0x48, 0xf5, 0x85, 0x91,
	0xea, 0x89, 0xfd, 0xea, 0x97, 0xd9, 0xa6, 0xcf, 0x8d, 0xbe, 0xeb, 0x1d, 0x18, 0x0a, 0x79, 0x2b,
	0xf8, 0xc2, 0xeb, 0x42, 0xff, 0xa5, 0xeb, 0x1d, 0xbc, 0x90, 0x08, 0xfc, 0x1c, 0xea, 0x09, 0x4b,
	0x81, 0x83, 0x06, 0x46, 0xba, 0x72, 0xd6, 0x5a, 0x3f, 0x25, 0xab, 0x6f, 0x37, 0x7f, 0x3f, 0x0b,
	0x84, 0xd8, 0x81, 0xe9, 0x0f, 0x9f, 0xfe, 0x93, 0x9c, 0xb5, 0x7e, 0x20, 0x10, 0x92, 0x90, 0x20,
	0xd2, 0x43, 0xa2, 0xa0, 0x1d, 0x12, 0x44, 0x6d, 0x48, 0x10, 0x97, 0x21, 0x49, 0xc0, 0x32, 0x24,
	0x69, 0xe4, 0x85, 0x24, 0x05, 0xa6, 0x90, 0x9c, 0x47, 0x4b, 0x48, 0x66, 0x40, 0x11, 0x92, 0x0b,
	0xf2, 0x1f, 0x92, 0x73, 0xf9, 0x0c, 0xc9, 0x85, 0x89, 0x0b, 0x49, 0x3a, 0x0d, 0x21, 0x39, 0xff,
	0xca, 0x9b, 0xff, 0x2d, 0x41, 0x1e, 0xeb, 0x3a, 0x2e, 0x53, 0xb2, 0x44, 0x99, 0xce, 0x2b, 0xf5,
	0x75, 0xc8, 0xf7, 0xd8, 0x98, 0xcb, 0x5a, 0xaf, 0xe9, 0x52, 0x10, 0x5a, 0x64, 0x0d, 0x59, 0xd5,
	0xba, 0x14, 0x84, 0x96, 0xbb, 0xdc, 0x94, 0x05, 0x5c, 0xd5, 0xa5, 0x40, 0x1f, 0x41, 0x19, 0x1f,
	0x10, 0x0f, 0x85, 0x85, 0x78, 0x28, 0xa1, 0xa1, 0x40, 0x02, 0x85, 0x5c, 0x9f, 0x31, 0x1f, 0x2b,
	0xb4, 0xaa, 0xe3, 0x33, 0x7d, 0x00, 0x25, 0xf1, 0x17, 0xfd, 0x94, 0x16, 0xfa, 0x29, 0x0a, 0x3b,
	0xe5, 0xc6, 0xb7, 0x4e, 0x64, 0x2d, 0xd6, 0x74, 0x7c, 0xa6, 0x0d, 0xc8, 0x1e, 0x32, 0x0f, 0x8b,
	0xae, 0xa6, 0x8b, 0xc7, 0x98, 0xa2, 0x2a, 0x8b, 0x28, 0xea, 0x31, 0xd4, 0x3c, 0xd6, 0x65, 0xd6,
	0x21, 0xeb, 0x19, 0x68, 0x5d, 0xbd, 0xd8, 0xba, 0x1a, 0x59, 0xb5, 0xc5, 0xae, 0xcf, 0xa1, 0xd6,
	0x75, 0x2d, 0xa7, 0x63, 0xfa, 0xcc, 0x30, 0x7b, 0x3d, 0x0f, 0x0b, 0xa7, 0xbc, 0xab, 0x9d, 0xb5,
	0x2e, 0x9d, 0x12, 0xfa, 0x76, 0x67, 0x32, 0xcd, 0xc6, 0xe3, 0x1d, 0xc4, 0x69, 0x64, 0xde, 0xea,
	0xf5, 0x3c, 0xfa, 0x09, 0x80, 0xc7, 0x6c, 0xf3, 0x98, 0xf5, 0x8c, 0xce, 0xb1, 0x2a, 0xa6, 0x0b,
	0x20, 0x2e, 0xb7, 0x96, 0x95, 0xe9, 0xee, 0xb1, 0xc8, 0x84, 0xe3, 0x3a, 0x5d, 0x86, 0xd5, 0x53,
	0xd5, 0xa5, 0x40, 0x57, 0x21, 0xe7, 0x18, 0x7c, 0x82, 0xa5, 0x52, 0xd3, 0xb3, 0x4e, 0x7b, 0x42,
	0x7f, 0x0a, 0x20, 0x40, 0x6c, 0x74, 0x04, 0x60, 0xb4, 0xd5, 0x85, 0x40, 0x29, 0x0b, 0x4b, 0x89,
	0xac, 0x6d, 0xa8, 0x4f, 0xb7, 0x21, 0x95, 0xd2, 0x59, 0x2a, 0xad, 0xc6, 0xd6, 0x82, 0x4b, 0x37,
	0xa0, 0xc0, 0x27, 0x68, 0xb8, 0x36, 0x6b, 0x98, 0xe7, 0x13, 0x61, 0xf1, 0x08, 0xca, 0x23, 0xef,
	0xc0, 0x36, 0x3c, 0xd7, 0xe5, 0xda, 0xfa, 0xc2, 0x83, 0x94, 0x84, 0xa1, 0xee, 0xba, 0x88, 0x4e,
	0x3e, 0xb1, 0x7a, 0xbe, 0x76, 0x69, 0x23, 0x2b, 0x70, 0x88, 0x02, 0xfd, 0x11, 0xd4, 0x2d, 0x87,
	0x33, 0xcf, 0x31, 0x6d, 0x43, 0x2e, 0x5f, 0xc6, 0xe5, 0x5a, 0xa4, 0x6d, 0xa3, 0xd9, 0x26, 0x80,
	0xc3, 0x26, 0x5c, 0x99, 0x5c, 0x39, 0xd7, 0x74, 0xc4, 0xa2, 0xb4, 0x7c, 0x02, 0x6b, 0x68, 0x39,
	0xe3, 0x55, 0x9b, 0xdd, 0xb2, 0x2a, 0xac, 0x5e, 0xa6, 0x82, 0x5c, 0x86, 0x42, 0xe0, 0x74, 0x6d,
	0xe6, 0x6b, 0x1f, 0xe2, 0x19, 0x94, 0xf4, 0xf4, 0x1f, 0xe4, 0xac, 0xf5, 0x3d, 0x81, 0xbf, 0x93,
	0x98, 0x71, 0x62, 0x06, 0x92, 0x35, 0x16, 0x12, 0x59, 0x55, 0x21, 0x91, 0x75, 0x14, 0x92, 0x69,
	0x19, 0x85, 0x04, 0x2b, 0x22, 0x24, 0x71, 0x41, 0x84, 0x04, 0xc1, 0x1d, 0x12, 0x01, 0xe8, 0x98,
	0xbd, 0xd2, 0x88, 0x0d, 0x49, 0x1a, 0x8b, 0x21, 0x49, 0x80, 0x2b, 0x24, 0x12, 0x24, 0x82, 0x10,
	0x0d, 0x3e, 0x09, 0x49, 0x02, 0x17, 0x21, 0x51, 0xc9, 0x0b, 0xc9, 0x34, 0x47, 0xe2, 0x5c, 0xe2,
	0x17, 0x86, 0x64, 0xe6, 0x65, 0x37, 0xff, 0x9c, 0x85, 0x7c, 0xfb, 0x8d, 0xce, 0xfa, 0xf4, 0x23,
	0xa8, 0x4a, 0x84, 0x28, 0x6a, 0x11, 0x44, 0x94, 0xd7, 0x2b, 0xa8, 0x53, 0x44, 0x7e, 0x05, 0x8a,
	0x7c, 0x22, 0x19, 0x3c, 0x83, 0x5c, 0x52, 0xe0, 0x13, 0xec, 0xd5, 0xd7, 0x01, 0xf8, 0xc4, 0xb0,
	0x9c, 0x71, 0xc0, 0x0d, 0x47, 0xb1, 0x4f, 0x89, 0x4f, 0x5e, 0x0a, 0xc5, 0x1e, 0xbd, 0x09, 0x15,
	0x3e, 0x31, 0xdc, 0x80, 0xcb, 0xe5, 0x1c, 0x2e, 0x97, 0xf9, 0xe4, 0x35, 0x6a, 0xf6, 0x04, 0x30,
	0x0e, 0xc5, 0x94, 0x13, 0x51, 0x11, 0x0a, 0x02, 0x63, 0xf8, 0xb0, 0x0c, 0x15, 0xa1, 0xa1, 0xe0,
	0x90, 0x8f, 0xa0, 0xda, 0x73, 0x83, 0x8e, 0xcd, 0x0c, 0x7f, 0xcc, 0x9c, 0x1e, 0x52, 0x52, 0x49,
	0xaf, 0x48, 0xdd, 0xbe, 0x50, 0xd1, 0x3b, 0xa2, 0xca, 0x91, 0xf9, 0xe5, 0xb8, 0xa5, 0xa6, 0x84,
	0xb4, 0x92, 0xde, 0x82, 0x8a, 0xc7, 0xfa, 0x46, 0xc7, 0xb4, 0x4d, 0x27, 0x9e, 0x0f, 0xc0, 0x63,
	0xfd, 0x5d, 0xa9, 0xa1, 0x5f, 0xc0, 0x4a, 0xc2, 0x60, 0x89, 0xd1, 0xa0, 0x36, 0xdd, 0x2c, 0x4e,
	0x7a, 0x1d, 0xca, 0x71, 0x03, 0x92, 0x64, 0xa6, 0x4f, 0x15, 0xf4, 0x1a, 0x94, 0xd5, 0xef, 0x70,
	0xfb, 0x92, 0xbc, 0xf4, 0x92, 0x54, 0xbc, 0xee, 0x37, 0x4f, 0x09, 0x40, 0xfb, 0xcd, 0xfe, 0x01,
	0xb3, 0x19, 0x77, 0x1d, 0x7a, 0x0f, 0x32, 0x7c, 0x82, 0xe9, 0xaa, 0x3c, 0xbc, 0x7e, 0x7f, 0xde,
	0xf4, 0x79, 0xbf, 0xfd, 0x46, 0xcf, 0xf0, 0x89, 0xc0, 0x38, 0x77, 0x7d, 0x6b, 0xe0, 0x68, 0x19,
	0x89, 0x71, 0x29, 0xd1, 0x9b, 0x00, 0xe2, 0xaf, 0xc9, 0x03, 0x8f, 0xf9, 0x5a, 0x16, 0xd7, 0x12,
	0x1a, 0xb1, 0x8f, 0x79, 0x9e, 0xeb, 0xf9, 0x5a, 0x4e, 0xee, 0x93, 0x52, 0xf3, 0x39, 0x94, 0x31,
	0xcd, 0xed, 0xe3, 0x31, 0xa3, 0x57, 0xa1, 0xe4, 0xb3, 0xdf, 0x06, 0x4c, 0xbc, 0x32, 0x22, 0x51,
	0x10, 0xc9, 0xe2, 0x07, 0x0b, 0x20, 0x33, 0xdf, 0x67, 0xbe, 0x8a, 0x3d, 0x55, 0x34, 0xff, 0x44,
	0x00, 0x24, 0x1e, 0xd0, 0x51, 0x0c, 0x09, 0x32, 0x17, 0x12, 0x99, 0x25, 0x21, 0x71, 0x19, 0x0a,
	0x7e, 0xd7, 0xb3, 0xc6, 0x5c, 0x4e, 0xc0, 0xba, 0x92, 0xd2, 0xe7, 0xc9, 0xcd, 0x9e, 0xe7, 0x8f,
	0x65, 0xc8, 0xb4, 0xdf, 0x2c, 0x53, 0x14, 0x54, 0x35, 0x6e, 0x59, 0x11, 0xb2, 0x41, 0xa7, 0x7c,
	0x67, 0x67, 0x7c, 0x4f, 0x5b, 0x6f, 0x6e, 0x6e, 0xeb, 0xcd, 0xbf, 0x67, 0xeb, 0x2d, 0xcc, 0x69,
	0xbd, 0xc5, 0xf7, 0x6b, 0xbd, 0xa5, 0x44, 0xeb, 0xfd, 0x10, 0x4a, 0x62, 0x56, 0x09, 0x7c, 0xd6,
	0x53, 0xf0, 0x2f, 0x0e, 0x4c, 0xff, 0x1b, 0x9f, 0xf5, 0xe8, 0xcf, 0xa0, 0x1a, 0x2d, 0x2d, 0x01,
	0x7c, 0x50, 0xdb, 0x44, 0xa0, 0x6b, 0x50, 0x9e, 0x9d, 0x83, 0x45, 0x14, 0x39, 0x94, 0x3e, 0x85,
	0xda, 0xfb, 0x8c, 0xbe, 0x95, 0x41, 0x62, 0x1a, 0xbd, 0x91, 0x6a, 0xbe, 0x35, 0x59, 0x4f, 0xd3,
	0x1e, 0x7b, 0x15, 0x4a, 0x11, 0xbd, 0xca, 0xce, 0xac, 0xc7, 0x72, 0x34, 0x63, 0xac, 0x4c, 0x67,
	0x8c, 0x59, 0x16, 0x69, 0x9c, 0x67, 0x91, 0x4b, 0x50, 0x38, 0xb4, 0x1c, 0xc3, 0x3f, 0xc1, 0x3e,
	0x5c, 0xd3, 0xf3, 0x87, 0x96, 0xb3, 0x7f, 0x22, 0x18, 0xf2, 0xd0, 0x0d, 0xb8, 0xd0, 0x53, 0x39,
	0x9a, 0x09, 0x71, 0xff, 0xe4, 0x3c, 0xeb, 0xac, 0x5d, 0xc4, 0x3a, 0x9f, 0x41, 0x01, 0x49, 0xd4,
	0xd7, 0xd6, 0x37, 0xb2, 0x9b, 0x95, 0x87, 0xb7, 0xe7, 0x97, 0x73, 0x5c, 0x74, 0xba, 0xda, 0x42,
	0xbf, 0x80, 0xa2, 0xe4, 0x58, 0xd9, 0x61, 0x2b, 0x0f, 0xef, 0xcc, 0xdf, 0x3d, 0x2d, 0x35, 0x3d,
	0xda, 0xb4, 0x6c, 0x27, 0xbe, 0x06, 0xe5, 0xb1, 0xe9, 0x31, 0x47, 0xf4, 0x62, 0xd9, 0x88, 0xf5,
	0x92, 0x54, 0xb4, 0x67, 0x58, 0x4d, 0xbb, 0x80, 0xd5, 0x44, 0x82, 0x6d, 0x6b, 0x64, 0x71, 0xed,
	0xc3, 0x38, 0xfb, 0xbf, 0x12, 0x72, 0x94, 0x7d, 0x5c, 0xc4, 0xec, 0x5f, 0x7d, 0x67, 0xf6, 0x71,
	0xa3, 0xc8, 0xfe, 0x5d, 0x58, 0xed, 0xba, 0x0e, 0xf7, 0xcc, 0x2e, 0x37, 0xba, 0x1e, 0xc3, 0xb7,
	0xa9, 0x5d, 0xc3, 0xac, 0x35, 0xa2, 0x85, 0x67, 0x4a, 0x4f, 0x6f, 0xc7, 0xc3, 0xa1, 0xba, 0x26,
	0x5e, 0xc7, 0x54, 0x44, 0xb3, 0xa0, 0xbc, 0x22, 0xde, 0x00, 0x50, 0x85, 0x2f, 0x6a, 0xfb, 0x86,
	0xfc, 0x25, 0xb2, 0xec, 0x45, 0x81, 0xdf, 0x02, 0xc9, 0x01, 0x86, 0xe5, 0xf4, 0xd8, 0x44, 0xbb,
	0x89, 0x1e, 0xe4, 0x8e, 0x97, 0x42, 0x93, 0x26, 0xf0, 0x5b, 0x69, 0x02, 0xa7, 0x3f, 0x86, 0x15,
	0x36, 0x61, 0xdd, 0x40, 0x1c, 0xc7, 0x40, 0x1e, 0xd5, 0x36, 0xd0, 0xa4, 0x1e, 0xab, 0x9f, 0x0b,
	0x6d, 0xf3, 0x6f, 0x25, 0x28, 0xb6, 0x24, 0x6f, 0xd0, 0x87, 0x50, 0x54, 0x14, 0xa2, 0xee, 0x08,
	0xf3, 0xe7, 0xd2, 0xc8, 0x50, 0xa4, 0x54, 0x72, 0x4a, 0x0c, 0xfe, 0x0c, 0xbe, 0xf5, 0x1a, 0x6a,
	0xf5, 0xa8, 0x02, 0x7e, 0x01, 0x34, 0x6d, 0x86, 0xef, 0x3f, 0xbb, 0xf0, 0xfd, 0x37, 0x52, 0x2e,
	0x54, 0x09, 0x4a, 0x2f, 0x3e, 0x73, 0xb8, 0xe2, 0x36, 0x49, 0x69, 0xfb, 0xcc, 0xe1, 0xf4, 0xe7,
	0xd1, 0x59, 0xc4, 0xf2, 0x12, 0x24, 0x57, 0x8d, 0xb7, 0x0a, 0xe7, 0x1a, 0x14, 0xa3, 0x5e, 0x2c,
	0xb9, 0x2e, 0x12, 0xe9, 0xa7, 0x50, 0x49, 0x36, 0xe1, 0xc5, 0x8c, 0x07, 0x9d, 0x69, 0x07, 0xde,
	0x86, 0xb5, 0xe4, 0x25, 0x30, 0x72, 0x5f, 0x42, 0xf7, 0x34, 0xb1, 0x14, 0xb5, 0xfc, 0x3d, 0xb8,
	0x72, 0xc1, 0x06, 0x8c, 0x5a, 0x5e, 0x18, 0xf5, 0xd2, 0x79, 0x67, 0xe2, 0x00, 0xb7, 0xa1, 0xd6,
	0xb7, 0x44, 0xb5, 0x45, 0xa1, 0x41, 0x7e, 0x85, 0x40, 0x65, 0x14, 0x74, 0x17, 0x56, 0x53, 0x46,
	0x18, 0xae, 0xb2, 0xf8, 0x23, 0x44, 0xd2, 0x81, 0x08, 0x14, 0xdd, 0x25, 0xaa, 0xd3, 0xbb, 0xc4,
	0x26, 0x24, 0x3f, 0x8b, 0x18, 0xb8, 0x5c, 0x93, 0xb7, 0xf7, 0x84, 0x7e, 0x0f, 0x4b, 0x1a, 0xe4,
	0x01, 0xd0, 0xa6, 0x2e, 0xbb, 0x3a, 0x6a, 0xc4, 0xea, 0xf4, 0xae, 0xb0, 0x32, 0xe7, 0xae, 0xf0,
	0xa9, 0xb0, 0xf0, 0x58, 0xdf, 0xd7, 0x1a, 0xc8, 0x4a, 0xb7, 0x16, 0x8e, 0x28, 0xac, 0xaf, 0x2b,
	0x73, 0xba, 0x07, 0xc9, 0x24, 0x18, 0xca, 0xc9, 0xea, 0x72, 0x4e, 0x92, 0xf7, 0xfb, 0xb6, 0xf4,
	0xa7, 0x41, 0x71, 0x68, 0xfa, 0xaf, 0x5c, 0x8f, 0x21, 0x37, 0x97, 0xf4, 0x48, 0x7c, 0xfa, 0x1f,
	0x72, 0xd6, 0xfa, 0x37, 0x81, 0x7f, 0x91, 0x90, 0x44, 0xa5, 0x13, 0x92, 0x99, 0xca, 0x09, 0xc9,
	0x05, 0x35, 0x12, 0x92, 0x04, 0xe4, 0xe3, 0x2d, 0x11, 0xc0, 0x43, 0x12, 0x81, 0x34, 0x24, 0x49,
	0x8c, 0x86, 0xe4, 0x22, 0xe0, 0x85, 0x64, 0x1e, 0xba, 0x42, 0x92, 0xc6, 0x49, 0x48, 0xce, 0x43,
	0x22, 0xbe, 0x0a, 0x9c, 0x4b, 0x6b, 0x48, 0x12, 0xf9, 0x6b, 0xfe, 0x95, 0xc0, 0x8a, 0x62, 0x94,
	0x5f, 0xb2, 0x63, 0xf9, 0x29, 0xe0, 0xff, 0x61, 0x96, 0x6d, 0x28, 0x8c, 0x83, 0x8e, 0x6d, 0x75,
	0xd5, 0x1c, 0x16, 0x5f, 0x74, 0xe3, 0x0d, 0x0f, 0x1e, 0xe1, 0x0e, 0x65, 0x46, 0x77, 0xa0, 0x38,
	0xf6, 0xac, 0x43, 0x93, 0xb3, 0x77, 0x7c, 0x89, 0x8c, 0xcc, 0x9e, 0x36, 0xcf, 0x5a, 0xb7, 0xe0,
	0x46, 0x32, 0x25, 0xca, 0x57, 0x48, 0x22, 0x9b, 0xe6, 0x5f, 0xb2, 0x50, 0x7a, 0xa6, 0x08, 0x1e,
	0xa7, 0x4f, 0xd7, 0xb6, 0x7a, 0x16, 0x3f, 0x56, 0x5f, 0x46, 0x63, 0x59, 0x4c, 0x81, 0x63, 0xd3,
	0x33, 0x47, 0xd1, 0xe8, 0xa9, 0x24, 0x01, 0x0a, 0x74, 0x8a, 0x1f, 0x48, 0xc5, 0x42, 0x24, 0xe2,
	0x8a, 0x3a, 0xb0, 0xfc, 0x70, 0x12, 0x89, 0xe9, 0x36, 0x96, 0x7f, 0x57, 0x1b, 0x2b, 0x2c, 0xdf,
	0xc6, 0xe2, 0xa9, 0xb7, 0x38, 0x77, 0xea, 0x2d, 0x2d, 0x39, 0xf5, 0x46, 0x5f, 0x88, 0xcb, 0x89,
	0x2f, 0xc4, 0x0d, 0xc8, 0x76, 0x2c, 0x47, 0x4e, 0x6b, 0xba, 0x78, 0x14, 0x1a, 0xb3, 0x63, 0xa9,
	0xeb, 0x87, 0x78, 0x14, 0xbf, 0x3a, 0xc2, 0x82, 0xbc, 0x76, 0xc4, 0x19, 0xd7, 0xa0, 0x88, 0xad,
	0x95, 0xf5, 0xd4, 0x78, 0x15, 0x89, 0x82, 0x4b, 0xa2, 0xa6, 0x6b, 0x44, 0xf7, 0x43, 0x39, 0x64,
	0xd5, 0x23, 0x7d, 0x5b, 0xde, 0x13, 0x35, 0x28, 0x7a, 0xcc, 0x0f, 0x6c, 0xee, 0x6b, 0x2b, 0xf2,
	0x6d, 0x2b, 0xb1, 0xf9, 0x3d, 0x81, 0xfc, 0xf3, 0x43, 0xd1, 0x27, 0xea, 0x90, 0xb1, 0x7a, 0x2a,
	0x7f, 0x19, 0xab, 0x27, 0x5e, 0x0a, 0x13, 0x0b, 0x6a, 0xc0, 0x96, 0x42, 0x3c, 0x75, 0x67, 0x13,
	0x53, 0x77, 0xe2, 0xec, 0xb9, 0xf4, 0xd9, 0xcf, 0x4d, 0x5f, 0xf9, 0x8b, 0xa6, 0xaf, 0x06, 0x64,
	0x05, 0x91, 0x15, 0xe4, 0xdb, 0x08, 0x3c, 0x5b, 0x34, 0xea, 0xae, 0x69, 0xdb, 0x1d, 0xb3, 0x7b,
	0x60, 0xa8, 0xdb, 0x4f, 0x51, 0x92, 0x64, 0xa4, 0xc6, 0x3e, 0x8d, 0xb7, 0xa3, 0xbe, 0x65, 0x73,
	0xe6, 0xc9, 0x04, 0xe9, 0x4a, 0xfa, 0xf8, 0x05, 0xac, 0xef, 0x31, 0x7e, 0xe4, 0x7a, 0x07, 0x2d,
	0xdb, 0x76, 0x8f, 0x2c, 0x67, 0xd0, 0xb2, 0x2d, 0xd3, 0xa7, 0x25, 0xc8, 0xbd, 0x6a, 0xbd, 0xdc,
	0x6b, 0x7c, 0x20, 0x9e, 0x46, 0xa6, 0xe5, 0x34, 0x3e, 0xa0, 0x15, 0x28, 0xea, 0xaf, 0xbf, 0xde,
	0x6f, 0x3f, 0xdf, 0x6b, 0x10, 0x21, 0x78, 0xee, 0xd8, 0xe7, 0xcc, 0x69, 0x90, 0xab, 0x99, 0x06,
	0xd9, 0x7d, 0xf4, 0x9b, 0x07, 0x03, 0x8b, 0x0f, 0x83, 0xce, 0xfd, 0xae, 0x3b, 0xda, 0x4e, 0xb0,
	0xdf, 0x76, 0xc4, 0x7e, 0xdb, 0x89, 0x7f, 0x2f, 0x0c, 0xdc, 0x6d, 0xc6, 0x87, 0x9d, 0x02, 0xaa,
	0x1e, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x26, 0xe5, 0x15, 0x4c, 0xa9, 0x18, 0x00, 0x00,
}
