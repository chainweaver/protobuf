// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transactionMessage.proto

package btc // import "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go/btc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransactionHashEndpointRequest struct {
	Network NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	Txhash  string               `protobuf:"bytes,2,opt,name=txhash,proto3" json:"txhash,omitempty"`
	// Filters TXInputs/TXOutputs, if unset, default is 20.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filters TX to only include TXInputs from this input index and above.
	Instart int32 `protobuf:"varint,4,opt,name=instart,proto3" json:"instart,omitempty"`
	// Filters TX to only include TXOutputs from this output index and above.
	Outstart int32 `protobuf:"varint,5,opt,name=outstart,proto3" json:"outstart,omitempty"`
	// If true, includes hex-encoded raw transaction; false by default.
	IncludeHex bool `protobuf:"varint,6,opt,name=includeHex,proto3" json:"includeHex,omitempty"`
	// If true, includes the confidence attribute (useful for unconfirmed transactions). For more info about this figure, check the Confidence Factor documentation.
	IncludeConfidence    bool     `protobuf:"varint,7,opt,name=includeConfidence,proto3" json:"includeConfidence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionHashEndpointRequest) Reset()         { *m = TransactionHashEndpointRequest{} }
func (m *TransactionHashEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionHashEndpointRequest) ProtoMessage()    {}
func (*TransactionHashEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{0}
}
func (m *TransactionHashEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionHashEndpointRequest.Unmarshal(m, b)
}
func (m *TransactionHashEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionHashEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *TransactionHashEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionHashEndpointRequest.Merge(dst, src)
}
func (m *TransactionHashEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionHashEndpointRequest.Size(m)
}
func (m *TransactionHashEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionHashEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionHashEndpointRequest proto.InternalMessageInfo

func (m *TransactionHashEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *TransactionHashEndpointRequest) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *TransactionHashEndpointRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TransactionHashEndpointRequest) GetInstart() int32 {
	if m != nil {
		return m.Instart
	}
	return 0
}

func (m *TransactionHashEndpointRequest) GetOutstart() int32 {
	if m != nil {
		return m.Outstart
	}
	return 0
}

func (m *TransactionHashEndpointRequest) GetIncludeHex() bool {
	if m != nil {
		return m.IncludeHex
	}
	return false
}

func (m *TransactionHashEndpointRequest) GetIncludeConfidence() bool {
	if m != nil {
		return m.IncludeConfidence
	}
	return false
}

type UnconfirmedTransactionsEndpointRequest struct {
	Network              NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UnconfirmedTransactionsEndpointRequest) Reset() {
	*m = UnconfirmedTransactionsEndpointRequest{}
}
func (m *UnconfirmedTransactionsEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*UnconfirmedTransactionsEndpointRequest) ProtoMessage()    {}
func (*UnconfirmedTransactionsEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{1}
}
func (m *UnconfirmedTransactionsEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnconfirmedTransactionsEndpointRequest.Unmarshal(m, b)
}
func (m *UnconfirmedTransactionsEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnconfirmedTransactionsEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *UnconfirmedTransactionsEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnconfirmedTransactionsEndpointRequest.Merge(dst, src)
}
func (m *UnconfirmedTransactionsEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_UnconfirmedTransactionsEndpointRequest.Size(m)
}
func (m *UnconfirmedTransactionsEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnconfirmedTransactionsEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnconfirmedTransactionsEndpointRequest proto.InternalMessageInfo

func (m *UnconfirmedTransactionsEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

type CreateTransactionEndpointRequest struct {
	Network NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	// 	Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1.
	BlockHeight int32 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Array of bitcoin public addresses involved in the transaction.
	Addresses []string `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The total number of satoshis exchanged in this transaction.
	Total int32 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of fees—in satoshis—collected by miners in this transaction.
	Fees int32 `protobuf:"varint,6,opt,name=fees,proto3" json:"fees,omitempty"`
	// The size of the transaction in bytes.
	Size int32 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low.
	Preference string `protobuf:"bytes,8,opt,name=preference,proto3" json:"preference,omitempty"`
	// Address of the peer that sent Block’s servers this transaction.
	RelayedBy string `protobuf:"bytes,9,opt,name=relayed_by,json=relayedBy,proto3" json:"relayed_by,omitempty"`
	// Time this transaction was received by Block’s servers.
	Received string `protobuf:"bytes,10,opt,name=received,proto3" json:"received,omitempty"`
	// Version number, typically 1 for Bitcoin transactions.
	Ver int32 `protobuf:"varint,11,opt,name=ver,proto3" json:"ver,omitempty"`
	// Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time.
	LockTime int32 `protobuf:"varint,12,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,13,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	// Total number of inputs in the transaction.
	VinSz int32 `protobuf:"varint,14,opt,name=vin_sz,json=vinSz,proto3" json:"vin_sz,omitempty"`
	// Total number of outputs in the transaction.
	VoutSz int32 `protobuf:"varint,15,opt,name=vout_sz,json=voutSz,proto3" json:"vout_sz,omitempty"`
	// Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
	Confirmations int32 `protobuf:"varint,16,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// TXInput Array, limited to 20 by default.
	Inputs []*TXInput `protobuf:"bytes,17,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// TXOutput Array, limited to 20 by default.
	Outputs []*TXOutput `protobuf:"bytes,18,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here.
	OptInRbf bool `protobuf:"varint,19,opt,name=opt_in_rbf,json=optInRbf,proto3" json:"opt_in_rbf,omitempty"`
	// Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
	Confidence float32 `protobuf:"fixed32,20,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// Optional Time at which transaction was included in a block; only present for confirmed transactions.
	Confirmed string `protobuf:"bytes,21,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions.
	ReceiveCount int32 `protobuf:"varint,22,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
	// Optional Address Block will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent.
	ChangeAddress string `protobuf:"bytes,23,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Optional Hash of the block that contains this transaction; only present for confirmed transactions.
	BlockHash string `protobuf:"bytes,24,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions.
	BlockIndex int32 `protobuf:"varint,25,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	// Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
	DoubleOf string `protobuf:"bytes,26,opt,name=double_of,json=doubleOf,proto3" json:"double_of,omitempty"`
	// Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni
	DataProtocol string `protobuf:"bytes,27,opt,name=data_protocol,json=dataProtocol,proto3" json:"data_protocol,omitempty"`
	// Optional Hex-encoded bytes of the transaction, as sent over the network.
	Hex string `protobuf:"bytes,28,opt,name=hex,proto3" json:"hex,omitempty"`
	// Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the Block URL to query the next set of TXInputs (within a TX object).
	NextInputs string `protobuf:"bytes,29,opt,name=next_inputs,json=nextInputs,proto3" json:"next_inputs,omitempty"`
	// Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the Block URL to query the next set of TXOutputs(within a TX object).
	NextOutputs          string   `protobuf:"bytes,30,opt,name=next_outputs,json=nextOutputs,proto3" json:"next_outputs,omitempty"`
	IncludeToSignTx      bool     `protobuf:"varint,31,opt,name=includeToSignTx,proto3" json:"includeToSignTx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTransactionEndpointRequest) Reset()         { *m = CreateTransactionEndpointRequest{} }
func (m *CreateTransactionEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTransactionEndpointRequest) ProtoMessage()    {}
func (*CreateTransactionEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{2}
}
func (m *CreateTransactionEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTransactionEndpointRequest.Unmarshal(m, b)
}
func (m *CreateTransactionEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTransactionEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *CreateTransactionEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTransactionEndpointRequest.Merge(dst, src)
}
func (m *CreateTransactionEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTransactionEndpointRequest.Size(m)
}
func (m *CreateTransactionEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTransactionEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTransactionEndpointRequest proto.InternalMessageInfo

func (m *CreateTransactionEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *CreateTransactionEndpointRequest) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *CreateTransactionEndpointRequest) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetFees() int32 {
	if m != nil {
		return m.Fees
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetPreference() string {
	if m != nil {
		return m.Preference
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetRelayedBy() string {
	if m != nil {
		return m.RelayedBy
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetReceived() string {
	if m != nil {
		return m.Received
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetLockTime() int32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *CreateTransactionEndpointRequest) GetVinSz() int32 {
	if m != nil {
		return m.VinSz
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetVoutSz() int32 {
	if m != nil {
		return m.VoutSz
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetInputs() []*TXInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreateTransactionEndpointRequest) GetOutputs() []*TXOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *CreateTransactionEndpointRequest) GetOptInRbf() bool {
	if m != nil {
		return m.OptInRbf
	}
	return false
}

func (m *CreateTransactionEndpointRequest) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetConfirmed() string {
	if m != nil {
		return m.Confirmed
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetReceiveCount() int32 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetChangeAddress() string {
	if m != nil {
		return m.ChangeAddress
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetBlockIndex() int32 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *CreateTransactionEndpointRequest) GetDoubleOf() string {
	if m != nil {
		return m.DoubleOf
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetDataProtocol() string {
	if m != nil {
		return m.DataProtocol
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetHex() string {
	if m != nil {
		return m.Hex
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetNextInputs() string {
	if m != nil {
		return m.NextInputs
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetNextOutputs() string {
	if m != nil {
		return m.NextOutputs
	}
	return ""
}

func (m *CreateTransactionEndpointRequest) GetIncludeToSignTx() bool {
	if m != nil {
		return m.IncludeToSignTx
	}
	return false
}

type SendTransactionEndpointRequest struct {
	Network NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	// A temporary TX, usually returned fully filled but missing input scripts.
	Tx *TX `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	// Array of hex-encoded data for you to sign, one for each input.
	Tosign []string `protobuf:"bytes,3,rep,name=tosign,proto3" json:"tosign,omitempty"`
	// Array of signatures corresponding to all the data in tosign, typically provided by you.
	Signatures []string `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Array of public keys corresponding to each signature. In general, these are provided by you, and correspond to the signatures you provide.
	Pubkeys []string `protobuf:"bytes,5,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	// Optional Array of hex-encoded, work-in-progress transactions; optionally returned to validate the tosign data locally.
	TosignTx []string `protobuf:"bytes,6,rep,name=tosign_tx,json=tosignTx,proto3" json:"tosign_tx,omitempty"`
	// Optional Array of errors in the form “error”:“description-of-error”. This is only returned if there was an error in any stage of transaction generation, and is usually accompanied by a HTTP 400 code.
	Errors               []*TXerror `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SendTransactionEndpointRequest) Reset()         { *m = SendTransactionEndpointRequest{} }
func (m *SendTransactionEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*SendTransactionEndpointRequest) ProtoMessage()    {}
func (*SendTransactionEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{3}
}
func (m *SendTransactionEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTransactionEndpointRequest.Unmarshal(m, b)
}
func (m *SendTransactionEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTransactionEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *SendTransactionEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTransactionEndpointRequest.Merge(dst, src)
}
func (m *SendTransactionEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_SendTransactionEndpointRequest.Size(m)
}
func (m *SendTransactionEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTransactionEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendTransactionEndpointRequest proto.InternalMessageInfo

func (m *SendTransactionEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *SendTransactionEndpointRequest) GetTx() *TX {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SendTransactionEndpointRequest) GetTosign() []string {
	if m != nil {
		return m.Tosign
	}
	return nil
}

func (m *SendTransactionEndpointRequest) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *SendTransactionEndpointRequest) GetPubkeys() []string {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *SendTransactionEndpointRequest) GetTosignTx() []string {
	if m != nil {
		return m.TosignTx
	}
	return nil
}

func (m *SendTransactionEndpointRequest) GetErrors() []*TXerror {
	if m != nil {
		return m.Errors
	}
	return nil
}

type PushRawTransactionEndpointRequest struct {
	Network              NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	Tx                   string               `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PushRawTransactionEndpointRequest) Reset()         { *m = PushRawTransactionEndpointRequest{} }
func (m *PushRawTransactionEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*PushRawTransactionEndpointRequest) ProtoMessage()    {}
func (*PushRawTransactionEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{4}
}
func (m *PushRawTransactionEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRawTransactionEndpointRequest.Unmarshal(m, b)
}
func (m *PushRawTransactionEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRawTransactionEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *PushRawTransactionEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRawTransactionEndpointRequest.Merge(dst, src)
}
func (m *PushRawTransactionEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_PushRawTransactionEndpointRequest.Size(m)
}
func (m *PushRawTransactionEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRawTransactionEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRawTransactionEndpointRequest proto.InternalMessageInfo

func (m *PushRawTransactionEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *PushRawTransactionEndpointRequest) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

type DecodeRawTransactionEndpointRequest struct {
	Network              NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	Tx                   string               `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DecodeRawTransactionEndpointRequest) Reset()         { *m = DecodeRawTransactionEndpointRequest{} }
func (m *DecodeRawTransactionEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*DecodeRawTransactionEndpointRequest) ProtoMessage()    {}
func (*DecodeRawTransactionEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{5}
}
func (m *DecodeRawTransactionEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecodeRawTransactionEndpointRequest.Unmarshal(m, b)
}
func (m *DecodeRawTransactionEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecodeRawTransactionEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *DecodeRawTransactionEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodeRawTransactionEndpointRequest.Merge(dst, src)
}
func (m *DecodeRawTransactionEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_DecodeRawTransactionEndpointRequest.Size(m)
}
func (m *DecodeRawTransactionEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodeRawTransactionEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecodeRawTransactionEndpointRequest proto.InternalMessageInfo

func (m *DecodeRawTransactionEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *DecodeRawTransactionEndpointRequest) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

type DataEndpointRequest struct {
	Network NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	// The string representing the data to embed, can be either hex-encoded or plaintext.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Optional Your BlockCypher API token, can either be included here or as a URL Parameter in your request.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// Optional The encoding of your data, can be either string (for plaintext) or hex (for hex-encoded). If not set, defaults to hex.
	Encoding string `protobuf:"bytes,4,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Optional The hash of the transaction containing your data; only part of return object.
	Hash                 string   `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataEndpointRequest) Reset()         { *m = DataEndpointRequest{} }
func (m *DataEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*DataEndpointRequest) ProtoMessage()    {}
func (*DataEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{6}
}
func (m *DataEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataEndpointRequest.Unmarshal(m, b)
}
func (m *DataEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *DataEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataEndpointRequest.Merge(dst, src)
}
func (m *DataEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_DataEndpointRequest.Size(m)
}
func (m *DataEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataEndpointRequest proto.InternalMessageInfo

func (m *DataEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *DataEndpointRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *DataEndpointRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DataEndpointRequest) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *DataEndpointRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type TransactionPropagationEndpointRequest struct {
	Network              NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	Txhash               string               `protobuf:"bytes,2,opt,name=txhash,proto3" json:"txhash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TransactionPropagationEndpointRequest) Reset()         { *m = TransactionPropagationEndpointRequest{} }
func (m *TransactionPropagationEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPropagationEndpointRequest) ProtoMessage()    {}
func (*TransactionPropagationEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactionMessage_2ea07651926a00e6, []int{7}
}
func (m *TransactionPropagationEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionPropagationEndpointRequest.Unmarshal(m, b)
}
func (m *TransactionPropagationEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionPropagationEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *TransactionPropagationEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPropagationEndpointRequest.Merge(dst, src)
}
func (m *TransactionPropagationEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionPropagationEndpointRequest.Size(m)
}
func (m *TransactionPropagationEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPropagationEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPropagationEndpointRequest proto.InternalMessageInfo

func (m *TransactionPropagationEndpointRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *TransactionPropagationEndpointRequest) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func init() {
	proto.RegisterType((*TransactionHashEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest")
	proto.RegisterType((*UnconfirmedTransactionsEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest")
	proto.RegisterType((*CreateTransactionEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest")
	proto.RegisterType((*SendTransactionEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest")
	proto.RegisterType((*PushRawTransactionEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest")
	proto.RegisterType((*DecodeRawTransactionEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest")
	proto.RegisterType((*DataEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest")
	proto.RegisterType((*TransactionPropagationEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest")
}

func init() {
	proto.RegisterFile("transactionMessage.proto", fileDescriptor_transactionMessage_2ea07651926a00e6)
}

var fileDescriptor_transactionMessage_2ea07651926a00e6 = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdb, 0x6e, 0xdc, 0x36,
	0x13, 0xc6, 0xee, 0x7a, 0x4f, 0xf4, 0x21, 0x09, 0x9d, 0x03, 0x7f, 0xc7, 0x71, 0xd6, 0x9b, 0x3f,
	0xc1, 0x02, 0x8d, 0xd7, 0x80, 0x0b, 0x14, 0xbd, 0x29, 0x0a, 0xc7, 0x69, 0x61, 0x5f, 0xb4, 0x36,
	0xe4, 0x2d, 0x50, 0xf4, 0x46, 0xa0, 0xa4, 0x59, 0x89, 0xb0, 0x96, 0x54, 0x49, 0xca, 0x5e, 0x1b,
	0xbd, 0x2f, 0x7a, 0xdd, 0x77, 0xe8, 0x8b, 0xe4, 0x45, 0xfa, 0x28, 0x05, 0x87, 0xda, 0x43, 0x53,
	0x14, 0x75, 0x6f, 0xb6, 0x57, 0xe2, 0x7c, 0xc3, 0x99, 0x91, 0xe6, 0xfb, 0xc8, 0x11, 0x61, 0x56,
	0x73, 0x69, 0x78, 0x6c, 0x85, 0x92, 0xdf, 0x80, 0x31, 0x3c, 0x85, 0x61, 0xa1, 0x95, 0x55, 0xb4,
	0x3f, 0xe6, 0x42, 0xdf, 0xf0, 0xdb, 0x58, 0xe9, 0x62, 0x18, 0xe5, 0x2a, 0xbe, 0x8a, 0x33, 0x2e,
	0x24, 0x3a, 0xa3, 0x72, 0x3c, 0x8c, 0x6c, 0xbc, 0xb3, 0x1d, 0xab, 0xc9, 0xe4, 0xa3, 0xc0, 0xfe,
	0x6f, 0x75, 0xb2, 0x37, 0x5a, 0x64, 0x3d, 0xe5, 0x26, 0xfb, 0x4a, 0x26, 0x85, 0x12, 0xd2, 0x06,
	0xf0, 0x63, 0x09, 0xc6, 0xd2, 0x80, 0xb4, 0x25, 0xd8, 0x1b, 0xa5, 0xaf, 0x58, 0xad, 0x57, 0x1b,
	0x6c, 0x1d, 0x7d, 0x3e, 0xfc, 0xe7, 0x6a, 0xc3, 0x6f, 0x7d, 0xc8, 0x71, 0x9e, 0xab, 0x1b, 0x21,
	0xd3, 0xe3, 0x5c, 0x70, 0x13, 0xcc, 0x12, 0xd1, 0xa7, 0xa4, 0x65, 0xa7, 0x19, 0x37, 0x19, 0xab,
	0xf7, 0x6a, 0x83, 0x6e, 0x50, 0x59, 0xf4, 0x31, 0x69, 0xe6, 0x62, 0x22, 0x2c, 0x6b, 0xf4, 0x6a,
	0x83, 0x66, 0xe0, 0x0d, 0xca, 0x48, 0x5b, 0x48, 0x63, 0xb9, 0xb6, 0x6c, 0x0d, 0xf1, 0x99, 0x49,
	0x77, 0x48, 0x47, 0x95, 0xd6, 0xbb, 0x9a, 0xe8, 0x9a, 0xdb, 0x74, 0x8f, 0x10, 0x21, 0xe3, 0xbc,
	0x4c, 0xe0, 0x14, 0xa6, 0xac, 0xd5, 0xab, 0x0d, 0x3a, 0xc1, 0x12, 0x42, 0xdf, 0x92, 0x47, 0x95,
	0x75, 0xa2, 0xe4, 0x58, 0x24, 0x20, 0x63, 0x60, 0x6d, 0xdc, 0xf6, 0x57, 0x47, 0xff, 0x27, 0xf2,
	0xe6, 0x3b, 0x19, 0x3b, 0x5b, 0x4f, 0x20, 0x59, 0x6a, 0x99, 0x59, 0x41, 0xbf, 0xfa, 0x1f, 0x3a,
	0xa4, 0x77, 0xa2, 0x81, 0x5b, 0x58, 0xaa, 0xbc, 0x0a, 0xa2, 0xf6, 0xc9, 0x06, 0xc6, 0x85, 0x19,
	0x88, 0x34, 0xb3, 0x48, 0x57, 0x33, 0x58, 0x47, 0xec, 0x14, 0x21, 0x4a, 0xc9, 0x1a, 0x32, 0xd9,
	0x40, 0x26, 0x71, 0x4d, 0x77, 0x49, 0x97, 0x27, 0x89, 0x06, 0x63, 0xc0, 0xb0, 0xb5, 0x5e, 0x63,
	0xd0, 0x0d, 0x16, 0x80, 0x63, 0xd9, 0x2a, 0xcb, 0xf3, 0x8a, 0x32, 0x6f, 0xb8, 0x3c, 0x63, 0x00,
	0x83, 0x4c, 0x35, 0x03, 0x5c, 0x3b, 0xcc, 0x88, 0x3b, 0x4f, 0x4b, 0x33, 0xc0, 0xb5, 0xe3, 0xb5,
	0xd0, 0x30, 0x06, 0x8d, 0x84, 0x75, 0xb0, 0xea, 0x12, 0x42, 0x5f, 0x10, 0xa2, 0x21, 0xe7, 0xb7,
	0x90, 0x84, 0xd1, 0x2d, 0xeb, 0xa2, 0xbf, 0x5b, 0x21, 0xef, 0x6e, 0x9d, 0x64, 0x34, 0xc4, 0x20,
	0xae, 0x21, 0x61, 0x04, 0x9d, 0x73, 0x9b, 0x3e, 0x24, 0x8d, 0x6b, 0xd0, 0x6c, 0x1d, 0xab, 0xb9,
	0x25, 0x7d, 0x4e, 0xba, 0xf8, 0xf9, 0x56, 0x4c, 0x80, 0x6d, 0x78, 0x85, 0x39, 0x60, 0x24, 0x26,
	0xe0, 0x9a, 0x93, 0xa8, 0x32, 0xca, 0x21, 0x34, 0x05, 0xc8, 0x84, 0x6d, 0xa2, 0x78, 0xd6, 0x3d,
	0x76, 0xe9, 0x20, 0xfa, 0x84, 0xb4, 0xae, 0x85, 0x0c, 0xcd, 0x1d, 0xdb, 0xf2, 0xdf, 0x7a, 0x2d,
	0xe4, 0xe5, 0x1d, 0x7d, 0x46, 0xda, 0xd7, 0xaa, 0xb4, 0x0e, 0x7f, 0x80, 0x78, 0xcb, 0x99, 0x97,
	0x77, 0xf4, 0xff, 0x64, 0xb3, 0x12, 0x19, 0x47, 0x71, 0xb1, 0x87, 0xe8, 0xfe, 0x33, 0x48, 0x4f,
	0x48, 0x4b, 0xc8, 0xa2, 0xb4, 0x86, 0x3d, 0xea, 0x35, 0x06, 0xeb, 0x47, 0x9f, 0xdc, 0x87, 0xe8,
	0xd1, 0xf7, 0x67, 0x2e, 0x26, 0xa8, 0x42, 0xe9, 0xd7, 0xa4, 0xad, 0x4a, 0x8b, 0x59, 0x28, 0x66,
	0x79, 0x7b, 0xbf, 0x2c, 0xe7, 0x18, 0x14, 0xcc, 0x82, 0xe9, 0x2e, 0x21, 0xaa, 0xb0, 0xa1, 0x90,
	0xa1, 0x8e, 0xc6, 0x6c, 0x1b, 0x7b, 0xd0, 0x51, 0x85, 0x3d, 0x93, 0x41, 0x34, 0x76, 0x6c, 0xc5,
	0x8b, 0xe3, 0xf5, 0xb8, 0x57, 0x1b, 0xd4, 0x83, 0x25, 0xc4, 0x29, 0x65, 0x7e, 0xaa, 0xd8, 0x13,
	0x4f, 0xd6, 0x1c, 0xa0, 0xaf, 0xc8, 0x66, 0x45, 0x4e, 0x18, 0xab, 0x52, 0x5a, 0xf6, 0x14, 0xdb,
	0xb1, 0x51, 0x81, 0x27, 0x0e, 0xa3, 0xaf, 0xc9, 0x56, 0x9c, 0x71, 0x99, 0x42, 0x58, 0x49, 0x8c,
	0x3d, 0xc3, 0x3c, 0x9b, 0x1e, 0x3d, 0xf6, 0xa0, 0xd3, 0x45, 0x25, 0x65, 0xa7, 0x56, 0xe6, 0x4b,
	0x79, 0x21, 0x3b, 0xc9, 0xbe, 0x24, 0x5e, 0xd5, 0xa1, 0x90, 0x09, 0x4c, 0xd9, 0xff, 0xb0, 0x90,
	0x8f, 0x38, 0x73, 0x88, 0x93, 0x42, 0xc5, 0xb6, 0x1a, 0xb3, 0x1d, 0xaf, 0x1c, 0x0f, 0x9c, 0x8f,
	0xdd, 0x8b, 0x26, 0xdc, 0xf2, 0x10, 0x7b, 0x15, 0xab, 0x9c, 0x3d, 0xc7, 0x0d, 0x1b, 0x0e, 0xbc,
	0xa8, 0x30, 0x27, 0xaf, 0x0c, 0xa6, 0x6c, 0x17, 0x5d, 0x6e, 0xe9, 0x8a, 0x4a, 0x98, 0xba, 0xe6,
	0x21, 0x0f, 0x2f, 0xbc, 0x98, 0x1d, 0x74, 0xe6, 0x49, 0xda, 0x27, 0x1b, 0xb8, 0x61, 0xc6, 0xd4,
	0x1e, 0xee, 0xc0, 0xa0, 0xf3, 0xaa, 0xff, 0x03, 0xf2, 0xa0, 0xba, 0xae, 0x46, 0xea, 0x52, 0xa4,
	0x72, 0x34, 0x65, 0x2f, 0x91, 0x84, 0x8f, 0xe1, 0xfe, 0xef, 0x75, 0xb2, 0x77, 0x09, 0x32, 0x59,
	0xf1, 0x1d, 0xf2, 0x19, 0xa9, 0xdb, 0x29, 0xde, 0x1c, 0xeb, 0x47, 0x6f, 0xee, 0xa7, 0xb1, 0xa0,
	0x6e, 0xa7, 0x38, 0x24, 0x94, 0x11, 0xa9, 0x64, 0x0d, 0xbc, 0x41, 0x2a, 0xcb, 0x49, 0xca, 0x3d,
	0xb9, 0x2d, 0xf5, 0xfc, 0x76, 0x59, 0x42, 0xdc, 0xb8, 0x28, 0xca, 0xe8, 0x0a, 0x6e, 0x0d, 0x6b,
	0xa2, 0x73, 0x66, 0x3a, 0x0a, 0x7d, 0x8e, 0xd0, 0xba, 0x89, 0xe0, 0x7c, 0x1d, 0x0f, 0x8c, 0xa6,
	0xee, 0x50, 0x81, 0xd6, 0x4a, 0x1b, 0xd6, 0xfe, 0x37, 0x87, 0x0a, 0x63, 0x82, 0x2a, 0xb4, 0xff,
	0x73, 0x8d, 0xec, 0x5f, 0x94, 0x26, 0x0b, 0xf8, 0xcd, 0x8a, 0xbb, 0xbc, 0x35, 0xef, 0x72, 0xd7,
	0x75, 0xaf, 0xff, 0x4b, 0x8d, 0xbc, 0x7a, 0x0f, 0xb1, 0x4a, 0xe0, 0xbf, 0x7f, 0x97, 0x0f, 0x35,
	0xb2, 0xfd, 0x9e, 0x5b, 0xbe, 0x8a, 0xda, 0x94, 0xac, 0xb9, 0x43, 0x57, 0x55, 0xc7, 0xb5, 0x1f,
	0x38, 0x57, 0x20, 0xab, 0x19, 0xe5, 0x0d, 0x37, 0x09, 0x40, 0xc6, 0x2a, 0x11, 0x32, 0xc5, 0xff,
	0x8a, 0x6e, 0x30, 0xb7, 0xe7, 0x43, 0xad, 0xb9, 0x18, 0x6a, 0xfd, 0x5f, 0x6b, 0xe4, 0xf5, 0x52,
	0x23, 0x2f, 0xb4, 0x2a, 0x78, 0xca, 0x57, 0xd5, 0xd3, 0xbf, 0xf9, 0x65, 0x7a, 0xf7, 0xe5, 0x0f,
	0x5f, 0xa4, 0xc2, 0x66, 0x65, 0x34, 0x8c, 0xd5, 0xe4, 0xb0, 0x2a, 0x73, 0xe0, 0xea, 0x1c, 0x2e,
	0xea, 0x1c, 0xcc, 0x0a, 0x1d, 0xfa, 0x0b, 0xea, 0x20, 0x05, 0x79, 0x90, 0xaa, 0xc3, 0xc8, 0xc6,
	0x51, 0x0b, 0xa1, 0x4f, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xfc, 0xc7, 0x69, 0x5e, 0x0a,
	0x00, 0x00,
}
