// Code generated by protoc-gen-go. DO NOT EDIT.
// source: analyticsService.proto

package btc // import "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go/btc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	CreateAnalyticsJob(ctx context.Context, in *CreateAnalyticsJobRequest, opts ...grpc.CallOption) (*Job, error)
	AnalyticsJob(ctx context.Context, in *AnalyticsJobRequest, opts ...grpc.CallOption) (*Job, error)
	AnalyticsJobResults(ctx context.Context, in *AnalyticsJobResultsRequest, opts ...grpc.CallOption) (*JobResults, error)
}

type analyticsServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnalyticsServiceClient(cc *grpc.ClientConn) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) CreateAnalyticsJob(ctx context.Context, in *CreateAnalyticsJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AnalyticsService/CreateAnalyticsJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) AnalyticsJob(ctx context.Context, in *AnalyticsJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AnalyticsService/AnalyticsJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) AnalyticsJobResults(ctx context.Context, in *AnalyticsJobResultsRequest, opts ...grpc.CallOption) (*JobResults, error) {
	out := new(JobResults)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AnalyticsService/AnalyticsJobResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
type AnalyticsServiceServer interface {
	CreateAnalyticsJob(context.Context, *CreateAnalyticsJobRequest) (*Job, error)
	AnalyticsJob(context.Context, *AnalyticsJobRequest) (*Job, error)
	AnalyticsJobResults(context.Context, *AnalyticsJobResultsRequest) (*JobResults, error)
}

func RegisterAnalyticsServiceServer(s *grpc.Server, srv AnalyticsServiceServer) {
	s.RegisterService(&_AnalyticsService_serviceDesc, srv)
}

func _AnalyticsService_CreateAnalyticsJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnalyticsJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).CreateAnalyticsJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AnalyticsService/CreateAnalyticsJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).CreateAnalyticsJob(ctx, req.(*CreateAnalyticsJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_AnalyticsJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).AnalyticsJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AnalyticsService/AnalyticsJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).AnalyticsJob(ctx, req.(*AnalyticsJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_AnalyticsJobResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsJobResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).AnalyticsJobResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AnalyticsService/AnalyticsJobResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).AnalyticsJobResults(ctx, req.(*AnalyticsJobResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnalyticsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairwaycorp.blockchainprotobuf.btc.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnalyticsJob",
			Handler:    _AnalyticsService_CreateAnalyticsJob_Handler,
		},
		{
			MethodName: "AnalyticsJob",
			Handler:    _AnalyticsService_AnalyticsJob_Handler,
		},
		{
			MethodName: "AnalyticsJobResults",
			Handler:    _AnalyticsService_AnalyticsJobResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analyticsService.proto",
}

func init() {
	proto.RegisterFile("analyticsService.proto", fileDescriptor_analyticsService_20d196323e85d09e)
}

var fileDescriptor_analyticsService_20d196323e85d09e = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x8f, 0x4f, 0x4a, 0x3b, 0x31,
	0x14, 0x80, 0x99, 0x1f, 0x3f, 0x5c, 0x0c, 0x2e, 0x24, 0x05, 0x17, 0x83, 0xab, 0x01, 0x29, 0x14,
	0x26, 0x11, 0x45, 0x04, 0xa1, 0x8a, 0xba, 0x2b, 0xb8, 0xd1, 0x9d, 0xbb, 0x24, 0xbc, 0xa6, 0xb1,
	0x33, 0x79, 0x35, 0x79, 0x63, 0x29, 0xa5, 0x1b, 0xaf, 0xe0, 0x01, 0xdc, 0xb8, 0xf6, 0x04, 0xde,
	0xc2, 0x2b, 0x78, 0x10, 0xe9, 0xf4, 0x1f, 0x55, 0xc4, 0x11, 0x77, 0xe1, 0x3d, 0xbe, 0xf7, 0x7d,
	0x89, 0xb7, 0xa5, 0x93, 0xf9, 0x88, 0xac, 0x0e, 0xd7, 0xe0, 0xef, 0xad, 0x06, 0x3e, 0xf0, 0x48,
	0xc8, 0xd2, 0xae, 0xb4, 0x7e, 0x28, 0x47, 0x1a, 0xfd, 0x80, 0xab, 0x1c, 0x75, 0x5f, 0xf7, 0xa4,
	0x75, 0xd5, 0x52, 0x95, 0x5d, 0xae, 0x48, 0x27, 0x3b, 0x06, 0xd1, 0xe4, 0x20, 0xe4, 0xc0, 0x0a,
	0xe9, 0x1c, 0x92, 0x24, 0x8b, 0x2e, 0xcc, 0x2e, 0x24, 0xab, 0xcb, 0x97, 0x10, 0x82, 0x34, 0xf3,
	0xcb, 0x49, 0x43, 0x63, 0x51, 0xa0, 0x5b, 0x1b, 0xee, 0x3f, 0xff, 0x8f, 0xb7, 0xce, 0x3e, 0x95,
	0xb0, 0x97, 0x28, 0x66, 0x17, 0x1e, 0x24, 0xc1, 0x72, 0xd5, 0x41, 0xc5, 0xda, 0xfc, 0xe7, 0x36,
	0xfe, 0x95, 0xbb, 0x82, 0xbb, 0x12, 0x02, 0x25, 0xcd, 0x3a, 0x78, 0x07, 0x55, 0xba, 0xf7, 0xf0,
	0xf6, 0xfe, 0xf8, 0xaf, 0x95, 0xee, 0x0a, 0x45, 0x5a, 0x8c, 0x1d, 0xd0, 0x10, 0x7d, 0x7f, 0x22,
	0x96, 0xff, 0x12, 0x63, 0x70, 0xc6, 0x3a, 0x70, 0xb2, 0x80, 0xc9, 0x71, 0xd4, 0x62, 0x4f, 0x51,
	0xbc, 0xb9, 0x96, 0x7a, 0x54, 0xc7, 0xf5, 0xa7, 0xc8, 0xac, 0x8a, 0x6c, 0xb2, 0xef, 0x23, 0x6f,
	0x51, 0x89, 0x31, 0x59, 0xdd, 0x07, 0x9a, 0xb0, 0xd7, 0x28, 0x6e, 0xac, 0xfb, 0x42, 0x99, 0x53,
	0x60, 0x27, 0xbf, 0x0f, 0xad, 0xc0, 0x45, 0x2f, 0xaf, 0xd9, 0x3b, 0xc7, 0xd2, 0xc3, 0x2a, 0x5b,
	0xb0, 0xac, 0x56, 0xb6, 0xf0, 0x33, 0xec, 0xfc, 0xf4, 0xa6, 0x6d, 0x2c, 0xf5, 0x4a, 0xc5, 0x35,
	0x16, 0x62, 0xae, 0xcc, 0xa6, 0x4e, 0xb1, 0x72, 0x66, 0x0b, 0xa9, 0xa8, 0x1e, 0x3a, 0x33, 0xe0,
	0x32, 0x83, 0x53, 0x93, 0xda, 0xa8, 0x46, 0x07, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xab,
	0x41, 0x2a, 0xf7, 0x02, 0x00, 0x00,
}
