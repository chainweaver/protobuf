// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commonMessage.proto

package btc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkAllowingAlias int32

const (
	NetworkAllowingAlias_MAINNET NetworkAllowingAlias = 0
	NetworkAllowingAlias_mainnet NetworkAllowingAlias = 0
	NetworkAllowingAlias_TEST    NetworkAllowingAlias = 1
	NetworkAllowingAlias_test    NetworkAllowingAlias = 1
)

var NetworkAllowingAlias_name = map[int32]string{
	0: "MAINNET",
	// Duplicate value: 0: "mainnet",
	1: "TEST",
	// Duplicate value: 1: "test",
}

var NetworkAllowingAlias_value = map[string]int32{
	"MAINNET": 0,
	"mainnet": 0,
	"TEST":    1,
	"test":    1,
}

func (x NetworkAllowingAlias) String() string {
	return proto.EnumName(NetworkAllowingAlias_name, int32(x))
}

func (NetworkAllowingAlias) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{0}
}

type NullValue struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullValue) Reset()         { *m = NullValue{} }
func (m *NullValue) String() string { return proto.CompactTextString(m) }
func (*NullValue) ProtoMessage()    {}
func (*NullValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{0}
}

func (m *NullValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullValue.Unmarshal(m, b)
}
func (m *NullValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullValue.Marshal(b, m, deterministic)
}
func (m *NullValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullValue.Merge(m, src)
}
func (m *NullValue) XXX_Size() int {
	return xxx_messageInfo_NullValue.Size(m)
}
func (m *NullValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NullValue.DiscardUnknown(m)
}

var xxx_messageInfo_NullValue proto.InternalMessageInfo

type NullValueRequest struct {
	Network              NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NullValueRequest) Reset()         { *m = NullValueRequest{} }
func (m *NullValueRequest) String() string { return proto.CompactTextString(m) }
func (*NullValueRequest) ProtoMessage()    {}
func (*NullValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{1}
}

func (m *NullValueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullValueRequest.Unmarshal(m, b)
}
func (m *NullValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullValueRequest.Marshal(b, m, deterministic)
}
func (m *NullValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullValueRequest.Merge(m, src)
}
func (m *NullValueRequest) XXX_Size() int {
	return xxx_messageInfo_NullValueRequest.Size(m)
}
func (m *NullValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NullValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NullValueRequest proto.InternalMessageInfo

func (m *NullValueRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

type ArrayString struct {
	Arraystring          []string `protobuf:"bytes,1,rep,name=arraystring,proto3" json:"arraystring,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayString) Reset()         { *m = ArrayString{} }
func (m *ArrayString) String() string { return proto.CompactTextString(m) }
func (*ArrayString) ProtoMessage()    {}
func (*ArrayString) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{2}
}

func (m *ArrayString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayString.Unmarshal(m, b)
}
func (m *ArrayString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayString.Marshal(b, m, deterministic)
}
func (m *ArrayString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayString.Merge(m, src)
}
func (m *ArrayString) XXX_Size() int {
	return xxx_messageInfo_ArrayString.Size(m)
}
func (m *ArrayString) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayString.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayString proto.InternalMessageInfo

func (m *ArrayString) GetArraystring() []string {
	if m != nil {
		return m.Arraystring
	}
	return nil
}

type TXInput struct {
	// The previous transaction hash where this input was an output. Not present for coinbase transactions.
	PrevHash string `protobuf:"bytes,1,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	// The index of the output being spent within the previous transaction. Not present for coinbase transactions.
	OutputIndex int32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// The value of the output being spent within the previous transaction. Not present for coinbase transactions.
	OutputValue int32 `protobuf:"varint,3,opt,name=output_value,json=outputValue,proto3" json:"output_value,omitempty"`
	// The type of script that encumbers the output corresponding to this input.
	ScriptType string `protobuf:"bytes,4,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	// Raw hexadecimal encoding of the script.
	Script string `protobuf:"bytes,5,opt,name=script,proto3" json:"script,omitempty"`
	// An array of public addresses associated with the output of the previous transaction.
	Addresses []string `protobuf:"bytes,6,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Legacy 4-byte sequence number, not usually relevant unless dealing with locktime encumbrances.
	Sequence int32 `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Optional Number of confirmations of the previous transaction for which this input was an output. Currently, only returned in unconfirmed transactions.
	Age int32 `protobuf:"varint,8,opt,name=age,proto3" json:"age,omitempty"`
	// Optional Name of Wallet or HDWallet from which to derive inputs. Only used when constructing transactions via the Creating Transactions process.
	WalletName string `protobuf:"bytes,9,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// Optional Token associated with Wallet or HDWallet used to derive inputs. Only used when constructing transactions via the Creating Transactions process.
	WalletToken          string   `protobuf:"bytes,10,opt,name=wallet_token,json=walletToken,proto3" json:"wallet_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXInput) Reset()         { *m = TXInput{} }
func (m *TXInput) String() string { return proto.CompactTextString(m) }
func (*TXInput) ProtoMessage()    {}
func (*TXInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{3}
}

func (m *TXInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXInput.Unmarshal(m, b)
}
func (m *TXInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXInput.Marshal(b, m, deterministic)
}
func (m *TXInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXInput.Merge(m, src)
}
func (m *TXInput) XXX_Size() int {
	return xxx_messageInfo_TXInput.Size(m)
}
func (m *TXInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TXInput.DiscardUnknown(m)
}

var xxx_messageInfo_TXInput proto.InternalMessageInfo

func (m *TXInput) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *TXInput) GetOutputIndex() int32 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *TXInput) GetOutputValue() int32 {
	if m != nil {
		return m.OutputValue
	}
	return 0
}

func (m *TXInput) GetScriptType() string {
	if m != nil {
		return m.ScriptType
	}
	return ""
}

func (m *TXInput) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *TXInput) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TXInput) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *TXInput) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *TXInput) GetWalletName() string {
	if m != nil {
		return m.WalletName
	}
	return ""
}

func (m *TXInput) GetWalletToken() string {
	if m != nil {
		return m.WalletToken
	}
	return ""
}

type TXOutput struct {
	// Value in this transaction output, in satoshis.
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Raw hexadecimal encoding of the encumbrance script for this output.
	Script string `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// Addresses that correspond to this output; typically this will only have a single address, and you can think of this output as having “sent” value to the address contained herein.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The type of encumbrance script used for this output.
	ScriptType string `protobuf:"bytes,4,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	// Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed.
	SpentBy string `protobuf:"bytes,5,opt,name=spent_by,json=spentBy,proto3" json:"spent_by,omitempty"`
	// Optional A hex-encoded representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data.
	DataHex string `protobuf:"bytes,6,opt,name=data_hex,json=dataHex,proto3" json:"data_hex,omitempty"`
	// Optional An ASCII representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data and if its data falls into the visible ASCII range.
	DataString           string   `protobuf:"bytes,7,opt,name=data_string,json=dataString,proto3" json:"data_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXOutput) Reset()         { *m = TXOutput{} }
func (m *TXOutput) String() string { return proto.CompactTextString(m) }
func (*TXOutput) ProtoMessage()    {}
func (*TXOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{4}
}

func (m *TXOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXOutput.Unmarshal(m, b)
}
func (m *TXOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXOutput.Marshal(b, m, deterministic)
}
func (m *TXOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXOutput.Merge(m, src)
}
func (m *TXOutput) XXX_Size() int {
	return xxx_messageInfo_TXOutput.Size(m)
}
func (m *TXOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TXOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TXOutput proto.InternalMessageInfo

func (m *TXOutput) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TXOutput) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *TXOutput) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TXOutput) GetScriptType() string {
	if m != nil {
		return m.ScriptType
	}
	return ""
}

func (m *TXOutput) GetSpentBy() string {
	if m != nil {
		return m.SpentBy
	}
	return ""
}

func (m *TXOutput) GetDataHex() string {
	if m != nil {
		return m.DataHex
	}
	return ""
}

func (m *TXOutput) GetDataString() string {
	if m != nil {
		return m.DataString
	}
	return ""
}

type TX struct {
	//	Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1.
	BlockHeight int32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	//The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	//Array of bitcoin public addresses involved in the transaction.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	//The total number of satoshis exchanged in this transaction.
	Total int32 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	//The total number of fees—in satoshis—collected by miners in this transaction.
	Fees int32 `protobuf:"varint,5,opt,name=fees,proto3" json:"fees,omitempty"`
	//The size of the transaction in bytes.
	Size int32 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	//The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low.
	Preference string `protobuf:"bytes,7,opt,name=preference,proto3" json:"preference,omitempty"`
	//Address of the peer that sent Block’s servers this transaction.
	RelayedBy string `protobuf:"bytes,8,opt,name=relayed_by,json=relayedBy,proto3" json:"relayed_by,omitempty"`
	//Time this transaction was received by Block’s servers.
	Received string `protobuf:"bytes,9,opt,name=received,proto3" json:"received,omitempty"`
	//Version number, typically 1 for Bitcoin transactions.
	Ver int32 `protobuf:"varint,10,opt,name=ver,proto3" json:"ver,omitempty"`
	//Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time.
	LockTime int32 `protobuf:"varint,11,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	//true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,12,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	//Total number of inputs in the transaction.
	VinSz int32 `protobuf:"varint,13,opt,name=vin_sz,json=vinSz,proto3" json:"vin_sz,omitempty"`
	//Total number of outputs in the transaction.
	VoutSz int32 `protobuf:"varint,14,opt,name=vout_sz,json=voutSz,proto3" json:"vout_sz,omitempty"`
	//Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
	Confirmations int32 `protobuf:"varint,15,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	//TXInput Array, limited to 20 by default.
	Inputs []*TXInput `protobuf:"bytes,16,rep,name=inputs,proto3" json:"inputs,omitempty"`
	//TXOutput Array, limited to 20 by default.
	Outputs []*TXOutput `protobuf:"bytes,17,rep,name=outputs,proto3" json:"outputs,omitempty"`
	//Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here.
	OptInRbf bool `protobuf:"varint,18,opt,name=opt_in_rbf,json=optInRbf,proto3" json:"opt_in_rbf,omitempty"`
	//Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
	Confidence float32 `protobuf:"fixed32,19,opt,name=confidence,proto3" json:"confidence,omitempty"`
	//Optional Time at which transaction was included in a block; only present for confirmed transactions.
	Confirmed string `protobuf:"bytes,20,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	//Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions.
	ReceiveCount int32 `protobuf:"varint,21,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
	//Optional Address Block will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent.
	ChangeAddress string `protobuf:"bytes,22,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	//Optional Hash of the block that contains this transaction; only present for confirmed transactions.
	BlockHash string `protobuf:"bytes,23,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	//Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions.
	BlockIndex int32 `protobuf:"varint,24,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	//Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
	DoubleOf string `protobuf:"bytes,25,opt,name=double_of,json=doubleOf,proto3" json:"double_of,omitempty"`
	//Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni
	DataProtocol string `protobuf:"bytes,26,opt,name=data_protocol,json=dataProtocol,proto3" json:"data_protocol,omitempty"`
	//Optional Hex-encoded bytes of the transaction, as sent over the network.
	Hex string `protobuf:"bytes,27,opt,name=hex,proto3" json:"hex,omitempty"`
	//Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the Block URL to query the next set of TXInputs (within a TX object).
	NextInputs string `protobuf:"bytes,28,opt,name=next_inputs,json=nextInputs,proto3" json:"next_inputs,omitempty"`
	//Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the Block URL to query the next set of TXOutputs(within a TX object).
	NextOutputs          string   `protobuf:"bytes,29,opt,name=next_outputs,json=nextOutputs,proto3" json:"next_outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TX) Reset()         { *m = TX{} }
func (m *TX) String() string { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()    {}
func (*TX) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{5}
}

func (m *TX) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TX.Unmarshal(m, b)
}
func (m *TX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TX.Marshal(b, m, deterministic)
}
func (m *TX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TX.Merge(m, src)
}
func (m *TX) XXX_Size() int {
	return xxx_messageInfo_TX.Size(m)
}
func (m *TX) XXX_DiscardUnknown() {
	xxx_messageInfo_TX.DiscardUnknown(m)
}

var xxx_messageInfo_TX proto.InternalMessageInfo

func (m *TX) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TX) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TX) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TX) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *TX) GetFees() int32 {
	if m != nil {
		return m.Fees
	}
	return 0
}

func (m *TX) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TX) GetPreference() string {
	if m != nil {
		return m.Preference
	}
	return ""
}

func (m *TX) GetRelayedBy() string {
	if m != nil {
		return m.RelayedBy
	}
	return ""
}

func (m *TX) GetReceived() string {
	if m != nil {
		return m.Received
	}
	return ""
}

func (m *TX) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *TX) GetLockTime() int32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *TX) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *TX) GetVinSz() int32 {
	if m != nil {
		return m.VinSz
	}
	return 0
}

func (m *TX) GetVoutSz() int32 {
	if m != nil {
		return m.VoutSz
	}
	return 0
}

func (m *TX) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TX) GetInputs() []*TXInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TX) GetOutputs() []*TXOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TX) GetOptInRbf() bool {
	if m != nil {
		return m.OptInRbf
	}
	return false
}

func (m *TX) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *TX) GetConfirmed() string {
	if m != nil {
		return m.Confirmed
	}
	return ""
}

func (m *TX) GetReceiveCount() int32 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *TX) GetChangeAddress() string {
	if m != nil {
		return m.ChangeAddress
	}
	return ""
}

func (m *TX) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TX) GetBlockIndex() int32 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *TX) GetDoubleOf() string {
	if m != nil {
		return m.DoubleOf
	}
	return ""
}

func (m *TX) GetDataProtocol() string {
	if m != nil {
		return m.DataProtocol
	}
	return ""
}

func (m *TX) GetHex() string {
	if m != nil {
		return m.Hex
	}
	return ""
}

func (m *TX) GetNextInputs() string {
	if m != nil {
		return m.NextInputs
	}
	return ""
}

func (m *TX) GetNextOutputs() string {
	if m != nil {
		return m.NextOutputs
	}
	return ""
}

type Wallet struct {
	// User token associated with this wallet.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Name of the wallet.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of addresses associated with this wallet.
	Addresses            []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{6}
}

func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wallet.Unmarshal(m, b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return xxx_messageInfo_Wallet.Size(m)
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Wallet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Wallet) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type HDWallet struct {
	// User token associated with this HD wallet.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Name of the HD wallet.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of HD chains associated with this wallet, each containing HDAddresses. A single chain is returned if the wallet has no subchains.
	Chains []*HDChain `protobuf:"bytes,3,rep,name=chains,proto3" json:"chains,omitempty"`
	// true for HD wallets, not present for normal wallets.
	Hd bool `protobuf:"varint,4,opt,name=hd,proto3" json:"hd,omitempty"`
	// The extended public key all addresses in the HD wallet are derived from. It’s encoded in BIP32 format
	ExtendedPublicKey string `protobuf:"bytes,5,opt,name=extended_public_key,json=extendedPublicKey,proto3" json:"extended_public_key,omitempty"`
	// optional returned for HD wallets created with subchains.
	SubchainIndexes      []int32  `protobuf:"varint,6,rep,packed,name=subchain_indexes,json=subchainIndexes,proto3" json:"subchain_indexes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HDWallet) Reset()         { *m = HDWallet{} }
func (m *HDWallet) String() string { return proto.CompactTextString(m) }
func (*HDWallet) ProtoMessage()    {}
func (*HDWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{7}
}

func (m *HDWallet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HDWallet.Unmarshal(m, b)
}
func (m *HDWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HDWallet.Marshal(b, m, deterministic)
}
func (m *HDWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDWallet.Merge(m, src)
}
func (m *HDWallet) XXX_Size() int {
	return xxx_messageInfo_HDWallet.Size(m)
}
func (m *HDWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_HDWallet.DiscardUnknown(m)
}

var xxx_messageInfo_HDWallet proto.InternalMessageInfo

func (m *HDWallet) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *HDWallet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HDWallet) GetChains() []*HDChain {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *HDWallet) GetHd() bool {
	if m != nil {
		return m.Hd
	}
	return false
}

func (m *HDWallet) GetExtendedPublicKey() string {
	if m != nil {
		return m.ExtendedPublicKey
	}
	return ""
}

func (m *HDWallet) GetSubchainIndexes() []int32 {
	if m != nil {
		return m.SubchainIndexes
	}
	return nil
}

type HDChain struct {
	// Array of HDAddresses associated with this subchain.
	ChainAddresses []*HDAddress `protobuf:"bytes,1,rep,name=chain_addresses,json=chainAddresses,proto3" json:"chain_addresses,omitempty"`
	// optional Index of the subchain, returned if the wallet has subchains.
	Index                int64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HDChain) Reset()         { *m = HDChain{} }
func (m *HDChain) String() string { return proto.CompactTextString(m) }
func (*HDChain) ProtoMessage()    {}
func (*HDChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{8}
}

func (m *HDChain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HDChain.Unmarshal(m, b)
}
func (m *HDChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HDChain.Marshal(b, m, deterministic)
}
func (m *HDChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDChain.Merge(m, src)
}
func (m *HDChain) XXX_Size() int {
	return xxx_messageInfo_HDChain.Size(m)
}
func (m *HDChain) XXX_DiscardUnknown() {
	xxx_messageInfo_HDChain.DiscardUnknown(m)
}

var xxx_messageInfo_HDChain proto.InternalMessageInfo

func (m *HDChain) GetChainAddresses() []*HDAddress {
	if m != nil {
		return m.ChainAddresses
	}
	return nil
}

func (m *HDChain) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Address struct {
	// Optional The requested address. Not returned if querying a wallet/HD wallet.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Optional The requested wallet object. Only returned if querying by wallet name instead of public address.
	Wallet *Wallet `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	// Optional The requested HD wallet object. Only returned if querying by HD wallet name instead of public address.
	HdWallet *HDWallet `protobuf:"bytes,3,opt,name=hd_wallet,json=hdWallet,proto3" json:"hd_wallet,omitempty"`
	// Total amount of confirmed satoshis received by this address.
	TotalReceived int32 `protobuf:"varint,4,opt,name=total_received,json=totalReceived,proto3" json:"total_received,omitempty"`
	// Total amount of confirmed satoshis sent by this address.
	TotalSent int32 `protobuf:"varint,5,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	// Balance of confirmed satoshis on this address. This is the difference between outputs and inputs on this address, but only for transactions that have been included into a block (i.e., for transactions whose confirmations > 0).
	Balance int32 `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
	// Balance of unconfirmed satoshis on this address. Can be negative (if unconfirmed transactions are just spending outputs). Only unconfirmed transactions (haven’t made it into a block) are included.
	UnconfirmedBalance int32 `protobuf:"varint,7,opt,name=unconfirmed_balance,json=unconfirmedBalance,proto3" json:"unconfirmed_balance,omitempty"`
	// Total balance of satoshis, including confirmed and unconfirmed transactions, for this address.
	FinalBalance int32 `protobuf:"varint,8,opt,name=final_balance,json=finalBalance,proto3" json:"final_balance,omitempty"`
	// Number of confirmed transactions on this address. Only transactions that have made it into a block (confirmations > 0) are counted.
	NTx int32 `protobuf:"varint,9,opt,name=n_tx,json=nTx,proto3" json:"n_tx,omitempty"`
	// Number of unconfirmed transactions for this address. Only unconfirmed transactions (confirmations == 0) are counted.
	UnconfirmedNTx int32 `protobuf:"varint,10,opt,name=unconfirmed_n_tx,json=unconfirmedNTx,proto3" json:"unconfirmed_n_tx,omitempty"`
	// Final number of transactions, including confirmed and unconfirmed transactions, for this address.
	FinalNTx int32 `protobuf:"varint,11,opt,name=final_n_tx,json=finalNTx,proto3" json:"final_n_tx,omitempty"`
	// Optional To retrieve base URL transactions. To get the full URL, concatenate this URL with a transaction’s hash.
	TxUrl string `protobuf:"bytes,12,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	// Array of full transaction details associated with this address. Usually only returned from the Address Full Endpoint.
	Txs []*TX `protobuf:"bytes,13,rep,name=txs,proto3" json:"txs,omitempty"`
	// Optional Array of transaction inputs and outputs for this address. Usually only returned from the standard Address Endpoint.
	Txrefs []*TXRef `protobuf:"bytes,14,rep,name=txrefs,proto3" json:"txrefs,omitempty"`
	// Optional All unconfirmed transaction inputs and outputs for this address. Usually only returned from the standard Address Endpoint.
	UnconfirmedTxrefs []*TXRef `protobuf:"bytes,15,rep,name=unconfirmed_txrefs,json=unconfirmedTxrefs,proto3" json:"unconfirmed_txrefs,omitempty"`
	// Optional If true, then the Address object contains more transactions than shown. Useful for determining whether to poll the API for more transaction information.
	HasMore              bool     `protobuf:"varint,16,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{9}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Address) GetHdWallet() *HDWallet {
	if m != nil {
		return m.HdWallet
	}
	return nil
}

func (m *Address) GetTotalReceived() int32 {
	if m != nil {
		return m.TotalReceived
	}
	return 0
}

func (m *Address) GetTotalSent() int32 {
	if m != nil {
		return m.TotalSent
	}
	return 0
}

func (m *Address) GetBalance() int32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Address) GetUnconfirmedBalance() int32 {
	if m != nil {
		return m.UnconfirmedBalance
	}
	return 0
}

func (m *Address) GetFinalBalance() int32 {
	if m != nil {
		return m.FinalBalance
	}
	return 0
}

func (m *Address) GetNTx() int32 {
	if m != nil {
		return m.NTx
	}
	return 0
}

func (m *Address) GetUnconfirmedNTx() int32 {
	if m != nil {
		return m.UnconfirmedNTx
	}
	return 0
}

func (m *Address) GetFinalNTx() int32 {
	if m != nil {
		return m.FinalNTx
	}
	return 0
}

func (m *Address) GetTxUrl() string {
	if m != nil {
		return m.TxUrl
	}
	return ""
}

func (m *Address) GetTxs() []*TX {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Address) GetTxrefs() []*TXRef {
	if m != nil {
		return m.Txrefs
	}
	return nil
}

func (m *Address) GetUnconfirmedTxrefs() []*TXRef {
	if m != nil {
		return m.UnconfirmedTxrefs
	}
	return nil
}

func (m *Address) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type HDAddress struct {
	// Standard address representation.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The BIP32 path of the HD address.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// optional Contains the hex-encoded public key if returned by Derive Address in Wallet endpoint.
	Public               string   `protobuf:"bytes,3,opt,name=public,proto3" json:"public,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HDAddress) Reset()         { *m = HDAddress{} }
func (m *HDAddress) String() string { return proto.CompactTextString(m) }
func (*HDAddress) ProtoMessage()    {}
func (*HDAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{10}
}

func (m *HDAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HDAddress.Unmarshal(m, b)
}
func (m *HDAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HDAddress.Marshal(b, m, deterministic)
}
func (m *HDAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDAddress.Merge(m, src)
}
func (m *HDAddress) XXX_Size() int {
	return xxx_messageInfo_HDAddress.Size(m)
}
func (m *HDAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_HDAddress.DiscardUnknown(m)
}

var xxx_messageInfo_HDAddress proto.InternalMessageInfo

func (m *HDAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *HDAddress) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HDAddress) GetPublic() string {
	if m != nil {
		return m.Public
	}
	return ""
}

type AddressKeychain struct {
	// Standard address representation.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex-encoded Public key.
	Public string `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
	// Hex-encoded Private key.
	Private string `protobuf:"bytes,3,opt,name=private,proto3" json:"private,omitempty"`
	// Wallet import format, a common encoding for the private key.
	Wif string `protobuf:"bytes,4,opt,name=wif,proto3" json:"wif,omitempty"`
	// Optional Array of public keys to provide to generate a multisig address.
	Pubkeys []string `protobuf:"bytes,5,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	// Optional If generating a multisig address, the type of multisig script; typically “multisig-n-of-m”, where n and m are integers.
	ScriptType string `protobuf:"bytes,6,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	// Optional If generating an OAP address, this represents the parent blockchain’s underlying address (the typical address listed above).
	OriginalAddress string `protobuf:"bytes,7,opt,name=original_address,json=originalAddress,proto3" json:"original_address,omitempty"`
	// Optional The OAP address, if generated using the Generate Asset Address Endpoint.
	OapAddress           string   `protobuf:"bytes,8,opt,name=oap_address,json=oapAddress,proto3" json:"oap_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressKeychain) Reset()         { *m = AddressKeychain{} }
func (m *AddressKeychain) String() string { return proto.CompactTextString(m) }
func (*AddressKeychain) ProtoMessage()    {}
func (*AddressKeychain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{11}
}

func (m *AddressKeychain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressKeychain.Unmarshal(m, b)
}
func (m *AddressKeychain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressKeychain.Marshal(b, m, deterministic)
}
func (m *AddressKeychain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressKeychain.Merge(m, src)
}
func (m *AddressKeychain) XXX_Size() int {
	return xxx_messageInfo_AddressKeychain.Size(m)
}
func (m *AddressKeychain) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressKeychain.DiscardUnknown(m)
}

var xxx_messageInfo_AddressKeychain proto.InternalMessageInfo

func (m *AddressKeychain) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressKeychain) GetPublic() string {
	if m != nil {
		return m.Public
	}
	return ""
}

func (m *AddressKeychain) GetPrivate() string {
	if m != nil {
		return m.Private
	}
	return ""
}

func (m *AddressKeychain) GetWif() string {
	if m != nil {
		return m.Wif
	}
	return ""
}

func (m *AddressKeychain) GetPubkeys() []string {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *AddressKeychain) GetScriptType() string {
	if m != nil {
		return m.ScriptType
	}
	return ""
}

func (m *AddressKeychain) GetOriginalAddress() string {
	if m != nil {
		return m.OriginalAddress
	}
	return ""
}

func (m *AddressKeychain) GetOapAddress() string {
	if m != nil {
		return m.OapAddress
	}
	return ""
}

type TXRef struct {
	//	Optional The address associated with this transaction input/output. Only returned when querying an address endpoint via a wallet/HD wallet name.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	//Height of the block that contains this transaction input/output. If it’s unconfirmed, this will equal -1.
	BlockHeight int32 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	//	The hash of the transaction containing this input/output. While reasonably unique, using hashes as identifiers may be unsafe.
	TxHash string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	//Index of this input in the enclosing transaction. It’s a negative number for an output.
	TxInputN int32 `protobuf:"varint,4,opt,name=tx_input_n,json=txInputN,proto3" json:"tx_input_n,omitempty"`
	//Index of this output in the enclosing transaction. It’s a negative number for an input.
	TxOutputN int32 `protobuf:"varint,5,opt,name=tx_output_n,json=txOutputN,proto3" json:"tx_output_n,omitempty"`
	//The value transfered by this input/output in satoshis exchanged in the enclosing transaction.
	Value int32 `protobuf:"varint,6,opt,name=value,proto3" json:"value,omitempty"`
	//	The likelihood that the enclosing transaction will make it to the next block; reflects the preference level miners have to include the enclosing transaction. Can be high, medium or low.
	Preference string `protobuf:"bytes,7,opt,name=preference,proto3" json:"preference,omitempty"`
	//	true if this is an output and was spent. If it’s an input, or an unspent output, it will be false.
	Spent bool `protobuf:"varint,8,opt,name=spent,proto3" json:"spent,omitempty"`
	//	true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,9,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	//	Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
	Confirmations int32 `protobuf:"varint,10,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	//Optional Raw, hex-encoded script of this input/output.
	Script string `protobuf:"bytes,11,opt,name=script,proto3" json:"script,omitempty"`
	//Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions.
	RefBalance int32 `protobuf:"varint,12,opt,name=ref_balance,json=refBalance,proto3" json:"ref_balance,omitempty"`
	//	Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
	Confidence float32 `protobuf:"fixed32,13,opt,name=confidence,proto3" json:"confidence,omitempty"`
	//Optional Time at which transaction was included in a block; only present for confirmed transactions.
	Confirmed string `protobuf:"bytes,14,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	//Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed.
	SpentBy string `protobuf:"bytes,15,opt,name=spent_by,json=spentBy,proto3" json:"spent_by,omitempty"`
	//Optional Time this transaction was received by Block’s servers; only present for unconfirmed transactions.
	Received string `protobuf:"bytes,16,opt,name=received,proto3" json:"received,omitempty"`
	//Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions.
	ReceiveCount int32 `protobuf:"varint,17,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
	//Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
	DoubleOf             string   `protobuf:"bytes,18,opt,name=double_of,json=doubleOf,proto3" json:"double_of,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXRef) Reset()         { *m = TXRef{} }
func (m *TXRef) String() string { return proto.CompactTextString(m) }
func (*TXRef) ProtoMessage()    {}
func (*TXRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{12}
}

func (m *TXRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXRef.Unmarshal(m, b)
}
func (m *TXRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXRef.Marshal(b, m, deterministic)
}
func (m *TXRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXRef.Merge(m, src)
}
func (m *TXRef) XXX_Size() int {
	return xxx_messageInfo_TXRef.Size(m)
}
func (m *TXRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TXRef.DiscardUnknown(m)
}

var xxx_messageInfo_TXRef proto.InternalMessageInfo

func (m *TXRef) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TXRef) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TXRef) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TXRef) GetTxInputN() int32 {
	if m != nil {
		return m.TxInputN
	}
	return 0
}

func (m *TXRef) GetTxOutputN() int32 {
	if m != nil {
		return m.TxOutputN
	}
	return 0
}

func (m *TXRef) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TXRef) GetPreference() string {
	if m != nil {
		return m.Preference
	}
	return ""
}

func (m *TXRef) GetSpent() bool {
	if m != nil {
		return m.Spent
	}
	return false
}

func (m *TXRef) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *TXRef) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TXRef) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *TXRef) GetRefBalance() int32 {
	if m != nil {
		return m.RefBalance
	}
	return 0
}

func (m *TXRef) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *TXRef) GetConfirmed() string {
	if m != nil {
		return m.Confirmed
	}
	return ""
}

func (m *TXRef) GetSpentBy() string {
	if m != nil {
		return m.SpentBy
	}
	return ""
}

func (m *TXRef) GetReceived() string {
	if m != nil {
		return m.Received
	}
	return ""
}

func (m *TXRef) GetReceiveCount() int32 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *TXRef) GetDoubleOf() string {
	if m != nil {
		return m.DoubleOf
	}
	return ""
}

type OAPIssue struct {
	// The private key being used to issue or transfer assets.
	FromPrivate string `protobuf:"bytes,1,opt,name=from_private,json=fromPrivate,proto3" json:"from_private,omitempty"`
	// The target OAP address assets for issue or transfer.
	ToAddress string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// The amount of assets being issued or transfered.
	Amount int32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional Hex-encoded metadata that can optionally be encoded into the issue or transfer transaction.
	Metadata             string   `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAPIssue) Reset()         { *m = OAPIssue{} }
func (m *OAPIssue) String() string { return proto.CompactTextString(m) }
func (*OAPIssue) ProtoMessage()    {}
func (*OAPIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{13}
}

func (m *OAPIssue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAPIssue.Unmarshal(m, b)
}
func (m *OAPIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAPIssue.Marshal(b, m, deterministic)
}
func (m *OAPIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAPIssue.Merge(m, src)
}
func (m *OAPIssue) XXX_Size() int {
	return xxx_messageInfo_OAPIssue.Size(m)
}
func (m *OAPIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_OAPIssue.DiscardUnknown(m)
}

var xxx_messageInfo_OAPIssue proto.InternalMessageInfo

func (m *OAPIssue) GetFromPrivate() string {
	if m != nil {
		return m.FromPrivate
	}
	return ""
}

func (m *OAPIssue) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *OAPIssue) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OAPIssue) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type OAPIssueRequest struct {
	Network NetworkAllowingAlias `protobuf:"varint,1,opt,name=network,proto3,enum=fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias" json:"network,omitempty"`
	// The private key being used to issue or transfer assets.
	FromPrivate string `protobuf:"bytes,2,opt,name=from_private,json=fromPrivate,proto3" json:"from_private,omitempty"`
	// The target OAP address assets for issue or transfer.
	ToAddress string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// The amount of assets being issued or transfered.
	Amount int32 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional Hex-encoded metadata that can optionally be encoded into the issue or transfer transaction.
	Metadata             string   `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAPIssueRequest) Reset()         { *m = OAPIssueRequest{} }
func (m *OAPIssueRequest) String() string { return proto.CompactTextString(m) }
func (*OAPIssueRequest) ProtoMessage()    {}
func (*OAPIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{14}
}

func (m *OAPIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAPIssueRequest.Unmarshal(m, b)
}
func (m *OAPIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAPIssueRequest.Marshal(b, m, deterministic)
}
func (m *OAPIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAPIssueRequest.Merge(m, src)
}
func (m *OAPIssueRequest) XXX_Size() int {
	return xxx_messageInfo_OAPIssueRequest.Size(m)
}
func (m *OAPIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OAPIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OAPIssueRequest proto.InternalMessageInfo

func (m *OAPIssueRequest) GetNetwork() NetworkAllowingAlias {
	if m != nil {
		return m.Network
	}
	return NetworkAllowingAlias_MAINNET
}

func (m *OAPIssueRequest) GetFromPrivate() string {
	if m != nil {
		return m.FromPrivate
	}
	return ""
}

func (m *OAPIssueRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *OAPIssueRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OAPIssueRequest) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type OAPTX struct {
	// Version of Open Assets Protocol transaction. Typically 1.
	Ver int32 `protobuf:"varint,1,opt,name=ver,proto3" json:"ver,omitempty"`
	// Unique indentifier associated with this asset; can be used to query other transactions associated with this asset.
	Assetid string `protobuf:"bytes,2,opt,name=assetid,proto3" json:"assetid,omitempty"`
	// This transaction’s unique hash; same as the underlying transaction on the asset’s parent blockchain.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Optional Time this transaction was confirmed; only returned for confirmed transactions.
	Confirmed string `protobuf:"bytes,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Time this transaction was received.
	Received string `protobuf:"bytes,5,opt,name=received,proto3" json:"received,omitempty"`
	// Optional Associated hex-encoded metadata with this transaction, if it exists.
	OapMeta string `protobuf:"bytes,6,opt,name=oap_meta,json=oapMeta,proto3" json:"oap_meta,omitempty"`
	// true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,7,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	// Array of input data, which can be seen explicitly in the cURL example. Very similar to array of TXInputs, but with values related to assets instead of satoshis.
	Inputs []string `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Array of output data, which can be seen explicitly in the cURL example. Very similar to array of TXOutputs, but with values related to assets instead of satoshis.
	Outputs              []string `protobuf:"bytes,9,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAPTX) Reset()         { *m = OAPTX{} }
func (m *OAPTX) String() string { return proto.CompactTextString(m) }
func (*OAPTX) ProtoMessage()    {}
func (*OAPTX) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{15}
}

func (m *OAPTX) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAPTX.Unmarshal(m, b)
}
func (m *OAPTX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAPTX.Marshal(b, m, deterministic)
}
func (m *OAPTX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAPTX.Merge(m, src)
}
func (m *OAPTX) XXX_Size() int {
	return xxx_messageInfo_OAPTX.Size(m)
}
func (m *OAPTX) XXX_DiscardUnknown() {
	xxx_messageInfo_OAPTX.DiscardUnknown(m)
}

var xxx_messageInfo_OAPTX proto.InternalMessageInfo

func (m *OAPTX) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *OAPTX) GetAssetid() string {
	if m != nil {
		return m.Assetid
	}
	return ""
}

func (m *OAPTX) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *OAPTX) GetConfirmed() string {
	if m != nil {
		return m.Confirmed
	}
	return ""
}

func (m *OAPTX) GetReceived() string {
	if m != nil {
		return m.Received
	}
	return ""
}

func (m *OAPTX) GetOapMeta() string {
	if m != nil {
		return m.OapMeta
	}
	return ""
}

func (m *OAPTX) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *OAPTX) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *OAPTX) GetOutputs() []string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type TXSkeleton struct {
	//A temporary TX, usually returned fully filled but missing input scripts.
	Tx *TX `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	//Array of hex-encoded data for you to sign, one for each input.
	Tosign []string `protobuf:"bytes,2,rep,name=tosign,proto3" json:"tosign,omitempty"`
	//Array of signatures corresponding to all the data in tosign, typically provided by you.
	Signatures []string `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	//Array of public keys corresponding to each signature. In general, these are provided by you, and correspond to the signatures you provide.
	Pubkeys []string `protobuf:"bytes,4,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	//Optional Array of hex-encoded, work-in-progress transactions; optionally returned to validate the tosign data locally.
	TosignTx []string `protobuf:"bytes,5,rep,name=tosign_tx,json=tosignTx,proto3" json:"tosign_tx,omitempty"`
	//Optional Array of errors in the form “error”:“description-of-error”. This is only returned if there was an error in any stage of transaction generation, and is usually accompanied by a HTTP 400 code.
	Errors               []*TXerror `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TXSkeleton) Reset()         { *m = TXSkeleton{} }
func (m *TXSkeleton) String() string { return proto.CompactTextString(m) }
func (*TXSkeleton) ProtoMessage()    {}
func (*TXSkeleton) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{16}
}

func (m *TXSkeleton) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXSkeleton.Unmarshal(m, b)
}
func (m *TXSkeleton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXSkeleton.Marshal(b, m, deterministic)
}
func (m *TXSkeleton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXSkeleton.Merge(m, src)
}
func (m *TXSkeleton) XXX_Size() int {
	return xxx_messageInfo_TXSkeleton.Size(m)
}
func (m *TXSkeleton) XXX_DiscardUnknown() {
	xxx_messageInfo_TXSkeleton.DiscardUnknown(m)
}

var xxx_messageInfo_TXSkeleton proto.InternalMessageInfo

func (m *TXSkeleton) GetTx() *TX {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TXSkeleton) GetTosign() []string {
	if m != nil {
		return m.Tosign
	}
	return nil
}

func (m *TXSkeleton) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *TXSkeleton) GetPubkeys() []string {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *TXSkeleton) GetTosignTx() []string {
	if m != nil {
		return m.TosignTx
	}
	return nil
}

func (m *TXSkeleton) GetErrors() []*TXerror {
	if m != nil {
		return m.Errors
	}
	return nil
}

type TXerror struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXerror) Reset()         { *m = TXerror{} }
func (m *TXerror) String() string { return proto.CompactTextString(m) }
func (*TXerror) ProtoMessage()    {}
func (*TXerror) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{17}
}

func (m *TXerror) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXerror.Unmarshal(m, b)
}
func (m *TXerror) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXerror.Marshal(b, m, deterministic)
}
func (m *TXerror) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXerror.Merge(m, src)
}
func (m *TXerror) XXX_Size() int {
	return xxx_messageInfo_TXerror.Size(m)
}
func (m *TXerror) XXX_DiscardUnknown() {
	xxx_messageInfo_TXerror.DiscardUnknown(m)
}

var xxx_messageInfo_TXerror proto.InternalMessageInfo

func (m *TXerror) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type NullData struct {
	//The string representing the data to embed, can be either hex-encoded or plaintext.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	//Optional Your BlockCypher API token, can either be included here or as a URL Parameter in your request.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	//Optional The encoding of your data, can be either string (for plaintext) or hex (for hex-encoded). If not set, defaults to hex.
	Encoding string `protobuf:"bytes,3,opt,name=encoding,proto3" json:"encoding,omitempty"`
	//Optional The hash of the transaction containing your data; only part of return object.
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullData) Reset()         { *m = NullData{} }
func (m *NullData) String() string { return proto.CompactTextString(m) }
func (*NullData) ProtoMessage()    {}
func (*NullData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{18}
}

func (m *NullData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullData.Unmarshal(m, b)
}
func (m *NullData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullData.Marshal(b, m, deterministic)
}
func (m *NullData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullData.Merge(m, src)
}
func (m *NullData) XXX_Size() int {
	return xxx_messageInfo_NullData.Size(m)
}
func (m *NullData) XXX_DiscardUnknown() {
	xxx_messageInfo_NullData.DiscardUnknown(m)
}

var xxx_messageInfo_NullData proto.InternalMessageInfo

func (m *NullData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *NullData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NullData) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *NullData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type DescribedBelow struct {
	//The hash of the transaction you queried.
	Transaction string `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	//An object containing latitude and longitude floats representing the first location to broadcast this transaction to BlockCypher.
	FirstLocation *FirstLocation `protobuf:"bytes,2,opt,name=first_location,json=firstLocation,proto3" json:"first_location,omitempty"`
	//Optional The name of the city closest to the first_location. If no nearby city can be found, this is not returned.
	FirstCity string `protobuf:"bytes,3,opt,name=first_city,json=firstCity,proto3" json:"first_city,omitempty"`
	//The name of the country containing the first_location.
	FirstCountry string `protobuf:"bytes,4,opt,name=first_country,json=firstCountry,proto3" json:"first_country,omitempty"`
	//An object containing latitude and longitude floats representing BlockCypher’s best guess of likely origin of this transaction, based on the radius of the smallest circle containing the first peer from which we detect this transaction, the average of the first five peers, and the average of the first ten peers.
	AggregatedOrigin *AggregatedOrigin `protobuf:"bytes,5,opt,name=aggregated_origin,json=aggregatedOrigin,proto3" json:"aggregated_origin,omitempty"`
	//The radius (in meters) of the smallest circle containing the first peer from which we detect this transaction, the average of the first five peers, and the average of the first ten peers. In a general sense, this represents an approximate confidence interval in our calculated aggregated_origin; the smaller the radius, the more confidence in our aggregated_origin assessment.
	AggregatedOriginRadius int32 `protobuf:"varint,6,opt,name=aggregated_origin_radius,json=aggregatedOriginRadius,proto3" json:"aggregated_origin_radius,omitempty"`
	//The timestamp when BlockCypher first received this transaction.
	FirstReceived        string   `protobuf:"bytes,7,opt,name=first_received,json=firstReceived,proto3" json:"first_received,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribedBelow) Reset()         { *m = DescribedBelow{} }
func (m *DescribedBelow) String() string { return proto.CompactTextString(m) }
func (*DescribedBelow) ProtoMessage()    {}
func (*DescribedBelow) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{19}
}

func (m *DescribedBelow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribedBelow.Unmarshal(m, b)
}
func (m *DescribedBelow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribedBelow.Marshal(b, m, deterministic)
}
func (m *DescribedBelow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribedBelow.Merge(m, src)
}
func (m *DescribedBelow) XXX_Size() int {
	return xxx_messageInfo_DescribedBelow.Size(m)
}
func (m *DescribedBelow) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribedBelow.DiscardUnknown(m)
}

var xxx_messageInfo_DescribedBelow proto.InternalMessageInfo

func (m *DescribedBelow) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

func (m *DescribedBelow) GetFirstLocation() *FirstLocation {
	if m != nil {
		return m.FirstLocation
	}
	return nil
}

func (m *DescribedBelow) GetFirstCity() string {
	if m != nil {
		return m.FirstCity
	}
	return ""
}

func (m *DescribedBelow) GetFirstCountry() string {
	if m != nil {
		return m.FirstCountry
	}
	return ""
}

func (m *DescribedBelow) GetAggregatedOrigin() *AggregatedOrigin {
	if m != nil {
		return m.AggregatedOrigin
	}
	return nil
}

func (m *DescribedBelow) GetAggregatedOriginRadius() int32 {
	if m != nil {
		return m.AggregatedOriginRadius
	}
	return 0
}

func (m *DescribedBelow) GetFirstReceived() string {
	if m != nil {
		return m.FirstReceived
	}
	return ""
}

type FirstLocation struct {
	Latitude             float32  `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirstLocation) Reset()         { *m = FirstLocation{} }
func (m *FirstLocation) String() string { return proto.CompactTextString(m) }
func (*FirstLocation) ProtoMessage()    {}
func (*FirstLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{20}
}

func (m *FirstLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirstLocation.Unmarshal(m, b)
}
func (m *FirstLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirstLocation.Marshal(b, m, deterministic)
}
func (m *FirstLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstLocation.Merge(m, src)
}
func (m *FirstLocation) XXX_Size() int {
	return xxx_messageInfo_FirstLocation.Size(m)
}
func (m *FirstLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstLocation.DiscardUnknown(m)
}

var xxx_messageInfo_FirstLocation proto.InternalMessageInfo

func (m *FirstLocation) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *FirstLocation) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type AggregatedOrigin struct {
	Latitude             float32  `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AggregatedOrigin) Reset()         { *m = AggregatedOrigin{} }
func (m *AggregatedOrigin) String() string { return proto.CompactTextString(m) }
func (*AggregatedOrigin) ProtoMessage()    {}
func (*AggregatedOrigin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{21}
}

func (m *AggregatedOrigin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregatedOrigin.Unmarshal(m, b)
}
func (m *AggregatedOrigin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregatedOrigin.Marshal(b, m, deterministic)
}
func (m *AggregatedOrigin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedOrigin.Merge(m, src)
}
func (m *AggregatedOrigin) XXX_Size() int {
	return xxx_messageInfo_AggregatedOrigin.Size(m)
}
func (m *AggregatedOrigin) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedOrigin.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedOrigin proto.InternalMessageInfo

func (m *AggregatedOrigin) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *AggregatedOrigin) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type JobArgs struct {
	//Address hash this job is querying.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	//Minimal/threshold value (in satoshis) to query.
	ValueThreshold int32 `protobuf:"varint,2,opt,name=value_threshold,json=valueThreshold,proto3" json:"value_threshold,omitempty"`
	//Limit of results to return.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	//Beginning of time range to query.
	Start string `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	//End of time range to query.
	End string `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	//Degree of connectiveness to query.
	Degree int32 `protobuf:"varint,6,opt,name=degree,proto3" json:"degree,omitempty"`
	//IP address and port, of the form “0.0.0.0:80”. Ideally an IP and port combination found from another API lookup (for example, relayed_by from the Transaction Hash Endpoint)
	Source               string   `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobArgs) Reset()         { *m = JobArgs{} }
func (m *JobArgs) String() string { return proto.CompactTextString(m) }
func (*JobArgs) ProtoMessage()    {}
func (*JobArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{22}
}

func (m *JobArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobArgs.Unmarshal(m, b)
}
func (m *JobArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobArgs.Marshal(b, m, deterministic)
}
func (m *JobArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobArgs.Merge(m, src)
}
func (m *JobArgs) XXX_Size() int {
	return xxx_messageInfo_JobArgs.Size(m)
}
func (m *JobArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_JobArgs.DiscardUnknown(m)
}

var xxx_messageInfo_JobArgs proto.InternalMessageInfo

func (m *JobArgs) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *JobArgs) GetValueThreshold() int32 {
	if m != nil {
		return m.ValueThreshold
	}
	return 0
}

func (m *JobArgs) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *JobArgs) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *JobArgs) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *JobArgs) GetDegree() int32 {
	if m != nil {
		return m.Degree
	}
	return 0
}

func (m *JobArgs) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type Job struct {
	//The token that created this job.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	//The engine used for the job query.
	AnalyticsEngine string `protobuf:"bytes,2,opt,name=analytics_engine,json=analyticsEngine,proto3" json:"analytics_engine,omitempty"`
	//The time this job was created.
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	//Optional When this job was completed; only present on complete jobs.
	CompletedAt string `protobuf:"bytes,4,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	//true if this job is finished processing, false otherwise.
	Finished bool `protobuf:"varint,5,opt,name=finished,proto3" json:"finished,omitempty"`
	//true if this job has begun processing, false otherwise.
	Started bool `protobuf:"varint,6,opt,name=started,proto3" json:"started,omitempty"`
	//Unique identifier for this job, used to get job status and results.
	Ticket string `protobuf:"bytes,7,opt,name=ticket,proto3" json:"ticket,omitempty"`
	//ptional URL to query job results; only present on complete jobs.
	ResultPath string `protobuf:"bytes,8,opt,name=result_path,json=resultPath,proto3" json:"result_path,omitempty"`
	//Query arguments for this job.
	Args                 *JobArgs `protobuf:"bytes,9,opt,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{23}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Job) GetAnalyticsEngine() string {
	if m != nil {
		return m.AnalyticsEngine
	}
	return ""
}

func (m *Job) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Job) GetCompletedAt() string {
	if m != nil {
		return m.CompletedAt
	}
	return ""
}

func (m *Job) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *Job) GetStarted() bool {
	if m != nil {
		return m.Started
	}
	return false
}

func (m *Job) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Job) GetResultPath() string {
	if m != nil {
		return m.ResultPath
	}
	return ""
}

func (m *Job) GetArgs() *JobArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type JobResults struct {
	//Current page of results.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	//true if there are more results in a separate page; false otherwise.
	More bool `protobuf:"varint,2,opt,name=more,proto3" json:"more,omitempty"`
	//Optional URL to get the next page of results; only present if there are more results to show.
	NextPage string `protobuf:"bytes,3,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	//Results of analytics job; structure of results are dependent on engine-type of query, but are generally either strings of address hashes or JSON objects.
	Results              []*JobResultArr `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *JobResults) Reset()         { *m = JobResults{} }
func (m *JobResults) String() string { return proto.CompactTextString(m) }
func (*JobResults) ProtoMessage()    {}
func (*JobResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{24}
}

func (m *JobResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobResults.Unmarshal(m, b)
}
func (m *JobResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobResults.Marshal(b, m, deterministic)
}
func (m *JobResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobResults.Merge(m, src)
}
func (m *JobResults) XXX_Size() int {
	return xxx_messageInfo_JobResults.Size(m)
}
func (m *JobResults) XXX_DiscardUnknown() {
	xxx_messageInfo_JobResults.DiscardUnknown(m)
}

var xxx_messageInfo_JobResults proto.InternalMessageInfo

func (m *JobResults) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *JobResults) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

func (m *JobResults) GetNextPage() string {
	if m != nil {
		return m.NextPage
	}
	return ""
}

func (m *JobResults) GetResults() []*JobResultArr {
	if m != nil {
		return m.Results
	}
	return nil
}

type JobResultArr struct {
	DstAddr              string   `protobuf:"bytes,1,opt,name=DstAddr,proto3" json:"DstAddr,omitempty"`
	SrcAddr              string   `protobuf:"bytes,2,opt,name=SrcAddr,proto3" json:"SrcAddr,omitempty"`
	TxHash               string   `protobuf:"bytes,3,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Value                int32    `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobResultArr) Reset()         { *m = JobResultArr{} }
func (m *JobResultArr) String() string { return proto.CompactTextString(m) }
func (*JobResultArr) ProtoMessage()    {}
func (*JobResultArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{25}
}

func (m *JobResultArr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobResultArr.Unmarshal(m, b)
}
func (m *JobResultArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobResultArr.Marshal(b, m, deterministic)
}
func (m *JobResultArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobResultArr.Merge(m, src)
}
func (m *JobResultArr) XXX_Size() int {
	return xxx_messageInfo_JobResultArr.Size(m)
}
func (m *JobResultArr) XXX_DiscardUnknown() {
	xxx_messageInfo_JobResultArr.DiscardUnknown(m)
}

var xxx_messageInfo_JobResultArr proto.InternalMessageInfo

func (m *JobResultArr) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *JobResultArr) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *JobResultArr) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *JobResultArr) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TXS struct {
	Txs                  []*TX    `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXS) Reset()         { *m = TXS{} }
func (m *TXS) String() string { return proto.CompactTextString(m) }
func (*TXS) ProtoMessage()    {}
func (*TXS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{26}
}

func (m *TXS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXS.Unmarshal(m, b)
}
func (m *TXS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXS.Marshal(b, m, deterministic)
}
func (m *TXS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXS.Merge(m, src)
}
func (m *TXS) XXX_Size() int {
	return xxx_messageInfo_TXS.Size(m)
}
func (m *TXS) XXX_DiscardUnknown() {
	xxx_messageInfo_TXS.DiscardUnknown(m)
}

var xxx_messageInfo_TXS proto.InternalMessageInfo

func (m *TXS) GetTxs() []*TX {
	if m != nil {
		return m.Txs
	}
	return nil
}

type TXConfidence struct {
	//The age of the transaction in milliseconds, based on the earliest time BlockCypher saw it relayed in the network.
	AgeMillis int32 `protobuf:"varint,1,opt,name=age_millis,json=ageMillis,proto3" json:"age_millis,omitempty"`
	//Number of peers that have sent this transaction to BlockCypher; only positive for unconfirmed transactions. -1 for confirmed transactions.
	ReceiveCount int32 `protobuf:"varint,2,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
	//A number from 0 to 1 representing BlockCypher’s confidence that the transaction won’t be double-spent against.
	Confidence float32 `protobuf:"fixed32,3,opt,name=confidence,proto3" json:"confidence,omitempty"`
	//The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe.
	Txhash string `protobuf:"bytes,4,opt,name=txhash,proto3" json:"txhash,omitempty"`
	//The BlockCypher URL one can use to query more detailed information about this transaction.
	Txurl                string   `protobuf:"bytes,5,opt,name=txurl,proto3" json:"txurl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXConfidence) Reset()         { *m = TXConfidence{} }
func (m *TXConfidence) String() string { return proto.CompactTextString(m) }
func (*TXConfidence) ProtoMessage()    {}
func (*TXConfidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{27}
}

func (m *TXConfidence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXConfidence.Unmarshal(m, b)
}
func (m *TXConfidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXConfidence.Marshal(b, m, deterministic)
}
func (m *TXConfidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXConfidence.Merge(m, src)
}
func (m *TXConfidence) XXX_Size() int {
	return xxx_messageInfo_TXConfidence.Size(m)
}
func (m *TXConfidence) XXX_DiscardUnknown() {
	xxx_messageInfo_TXConfidence.DiscardUnknown(m)
}

var xxx_messageInfo_TXConfidence proto.InternalMessageInfo

func (m *TXConfidence) GetAgeMillis() int32 {
	if m != nil {
		return m.AgeMillis
	}
	return 0
}

func (m *TXConfidence) GetReceiveCount() int32 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *TXConfidence) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *TXConfidence) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *TXConfidence) GetTxurl() string {
	if m != nil {
		return m.Txurl
	}
	return ""
}

type AddressForward struct {
	//Identifier of the address forwarding request; generated when a new request is created.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//The mandatory user token.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	//The required destination address for address forwarding.
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	//The address which will automatically forward to destination; generated when a new request is created.
	InputAddress string `protobuf:"bytes,4,opt,name=input_address,json=inputAddress,proto3" json:"input_address,omitempty"`
	//Optional Address to forward processing fees, if specified. Allows you to receive a fee for your own services.
	ProcessFeesAddress string `protobuf:"bytes,5,opt,name=process_fees_address,json=processFeesAddress,proto3" json:"process_fees_address,omitempty"`
	//Optional Fixed processing fee amount to be sent to the fee address. A fixed satoshi amount or a percentage is required if a process_fees_address has been specified.
	ProcessFeesSatoshis int32 `protobuf:"varint,6,opt,name=process_fees_satoshis,json=processFeesSatoshis,proto3" json:"process_fees_satoshis,omitempty"`
	//Optional Percentage of the transaction to be sent to the fee address. A fixed satoshi amount or a percentage is required if a process_fees_address has been specified.
	ProcessFeesPercent float32 `protobuf:"fixed32,7,opt,name=process_fees_percent,json=processFeesPercent,proto3" json:"process_fees_percent,omitempty"`
	//Optional The URL to call anytime a new is forwarded.
	CallbackUrl string `protobuf:"bytes,8,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	//Optional Whether to also call the callback_url with subsequent confirmations of the forwarding transactions. Automatically sets up a WebHook.
	EnableConfirmations bool `protobuf:"varint,9,opt,name=enable_confirmations,json=enableConfirmations,proto3" json:"enable_confirmations,omitempty"`
	//Optional Mining fee amount to include in the forwarding transaction, in satoshis. If not set, defaults to 10,000.
	MiningFeesSatoshis int32 `protobuf:"varint,10,opt,name=mining_fees_satoshis,json=miningFeesSatoshis,proto3" json:"mining_fees_satoshis,omitempty"`
	//Optional History of forwarding transaction hashes for this address forward; not present if this request has yet to forward any transactions.
	Txs                  []string `protobuf:"bytes,11,rep,name=txs,proto3" json:"txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressForward) Reset()         { *m = AddressForward{} }
func (m *AddressForward) String() string { return proto.CompactTextString(m) }
func (*AddressForward) ProtoMessage()    {}
func (*AddressForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{28}
}

func (m *AddressForward) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressForward.Unmarshal(m, b)
}
func (m *AddressForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressForward.Marshal(b, m, deterministic)
}
func (m *AddressForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressForward.Merge(m, src)
}
func (m *AddressForward) XXX_Size() int {
	return xxx_messageInfo_AddressForward.Size(m)
}
func (m *AddressForward) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressForward.DiscardUnknown(m)
}

var xxx_messageInfo_AddressForward proto.InternalMessageInfo

func (m *AddressForward) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddressForward) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AddressForward) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *AddressForward) GetInputAddress() string {
	if m != nil {
		return m.InputAddress
	}
	return ""
}

func (m *AddressForward) GetProcessFeesAddress() string {
	if m != nil {
		return m.ProcessFeesAddress
	}
	return ""
}

func (m *AddressForward) GetProcessFeesSatoshis() int32 {
	if m != nil {
		return m.ProcessFeesSatoshis
	}
	return 0
}

func (m *AddressForward) GetProcessFeesPercent() float32 {
	if m != nil {
		return m.ProcessFeesPercent
	}
	return 0
}

func (m *AddressForward) GetCallbackUrl() string {
	if m != nil {
		return m.CallbackUrl
	}
	return ""
}

func (m *AddressForward) GetEnableConfirmations() bool {
	if m != nil {
		return m.EnableConfirmations
	}
	return false
}

func (m *AddressForward) GetMiningFeesSatoshis() int32 {
	if m != nil {
		return m.MiningFeesSatoshis
	}
	return 0
}

func (m *AddressForward) GetTxs() []string {
	if m != nil {
		return m.Txs
	}
	return nil
}

func init() {
	proto.RegisterEnum("fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias", NetworkAllowingAlias_name, NetworkAllowingAlias_value)
	proto.RegisterType((*NullValue)(nil), "fairwaycorp.blockchainprotobuf.btc.NullValue")
	proto.RegisterType((*NullValueRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.NullValueRequest")
	proto.RegisterType((*ArrayString)(nil), "fairwaycorp.blockchainprotobuf.btc.ArrayString")
	proto.RegisterType((*TXInput)(nil), "fairwaycorp.blockchainprotobuf.btc.TXInput")
	proto.RegisterType((*TXOutput)(nil), "fairwaycorp.blockchainprotobuf.btc.TXOutput")
	proto.RegisterType((*TX)(nil), "fairwaycorp.blockchainprotobuf.btc.TX")
	proto.RegisterType((*Wallet)(nil), "fairwaycorp.blockchainprotobuf.btc.Wallet")
	proto.RegisterType((*HDWallet)(nil), "fairwaycorp.blockchainprotobuf.btc.HDWallet")
	proto.RegisterType((*HDChain)(nil), "fairwaycorp.blockchainprotobuf.btc.HDChain")
	proto.RegisterType((*Address)(nil), "fairwaycorp.blockchainprotobuf.btc.Address")
	proto.RegisterType((*HDAddress)(nil), "fairwaycorp.blockchainprotobuf.btc.HDAddress")
	proto.RegisterType((*AddressKeychain)(nil), "fairwaycorp.blockchainprotobuf.btc.AddressKeychain")
	proto.RegisterType((*TXRef)(nil), "fairwaycorp.blockchainprotobuf.btc.TXRef")
	proto.RegisterType((*OAPIssue)(nil), "fairwaycorp.blockchainprotobuf.btc.OAPIssue")
	proto.RegisterType((*OAPIssueRequest)(nil), "fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest")
	proto.RegisterType((*OAPTX)(nil), "fairwaycorp.blockchainprotobuf.btc.OAPTX")
	proto.RegisterType((*TXSkeleton)(nil), "fairwaycorp.blockchainprotobuf.btc.TXSkeleton")
	proto.RegisterType((*TXerror)(nil), "fairwaycorp.blockchainprotobuf.btc.TXerror")
	proto.RegisterType((*NullData)(nil), "fairwaycorp.blockchainprotobuf.btc.NullData")
	proto.RegisterType((*DescribedBelow)(nil), "fairwaycorp.blockchainprotobuf.btc.DescribedBelow")
	proto.RegisterType((*FirstLocation)(nil), "fairwaycorp.blockchainprotobuf.btc.FirstLocation")
	proto.RegisterType((*AggregatedOrigin)(nil), "fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin")
	proto.RegisterType((*JobArgs)(nil), "fairwaycorp.blockchainprotobuf.btc.JobArgs")
	proto.RegisterType((*Job)(nil), "fairwaycorp.blockchainprotobuf.btc.Job")
	proto.RegisterType((*JobResults)(nil), "fairwaycorp.blockchainprotobuf.btc.JobResults")
	proto.RegisterType((*JobResultArr)(nil), "fairwaycorp.blockchainprotobuf.btc.JobResultArr")
	proto.RegisterType((*TXS)(nil), "fairwaycorp.blockchainprotobuf.btc.TXS")
	proto.RegisterType((*TXConfidence)(nil), "fairwaycorp.blockchainprotobuf.btc.TXConfidence")
	proto.RegisterType((*AddressForward)(nil), "fairwaycorp.blockchainprotobuf.btc.AddressForward")
}

func init() { proto.RegisterFile("commonMessage.proto", fileDescriptor_d95b4905c23b6f07) }

var fileDescriptor_d95b4905c23b6f07 = []byte{
	// 2602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x72, 0x1b, 0xc7,
	0xf1, 0x36, 0x00, 0xe2, 0x5f, 0x83, 0x04, 0xa1, 0x15, 0x25, 0xaf, 0x25, 0xcb, 0xa2, 0xd7, 0x3f,
	0xff, 0x42, 0x39, 0x16, 0x65, 0x2b, 0xa9, 0x94, 0x2f, 0x29, 0x17, 0x44, 0x59, 0x45, 0xca, 0x16,
	0xc5, 0x2c, 0x11, 0x87, 0x95, 0xcb, 0xd6, 0x60, 0x77, 0x00, 0x6c, 0x71, 0xb1, 0x8b, 0xcc, 0x0e,
	0x48, 0x40, 0xa7, 0x3c, 0x44, 0xae, 0xa9, 0xf2, 0x2d, 0xc7, 0x9c, 0x52, 0x95, 0xca, 0x2b, 0xa4,
	0x2a, 0x2f, 0x90, 0x6b, 0x5e, 0x20, 0x97, 0x54, 0x8e, 0xa9, 0xee, 0x9e, 0x5d, 0x2c, 0x08, 0x89,
	0x82, 0x2a, 0x95, 0x13, 0xa6, 0xbf, 0x99, 0xe9, 0x9d, 0x9e, 0xf9, 0xba, 0xe7, 0x1b, 0xc0, 0x4d,
	0x3f, 0x19, 0x8f, 0x93, 0xf8, 0x85, 0x4c, 0x53, 0x31, 0x94, 0xfb, 0x13, 0x95, 0xe8, 0xc4, 0x72,
	0x06, 0x22, 0x54, 0x97, 0x62, 0xee, 0x27, 0x6a, 0xb2, 0xdf, 0x8f, 0x12, 0xff, 0xdc, 0x1f, 0x89,
	0x30, 0xa6, 0xce, 0xfe, 0x74, 0xb0, 0xdf, 0xd7, 0xbe, 0xd3, 0x82, 0xe6, 0xf1, 0x34, 0x8a, 0xbe,
	0x17, 0xd1, 0x54, 0x3a, 0x03, 0xe8, 0xe4, 0x86, 0x2b, 0x7f, 0x33, 0x95, 0xa9, 0xb6, 0x5c, 0xa8,
	0xc7, 0x52, 0x5f, 0x26, 0xea, 0xdc, 0x2e, 0xed, 0x96, 0xf6, 0xda, 0x8f, 0xbf, 0xda, 0x7f, 0xbb,
	0xdb, 0xfd, 0x63, 0x9e, 0xd2, 0x8d, 0xa2, 0xe4, 0x32, 0x8c, 0x87, 0xdd, 0x28, 0x14, 0xa9, 0x9b,
	0x39, 0x72, 0x1e, 0x41, 0xab, 0xab, 0x94, 0x98, 0x9f, 0x6a, 0x15, 0xc6, 0x43, 0x6b, 0x17, 0x5a,
	0x02, 0xcd, 0x94, 0x4c, 0xbb, 0xb4, 0x5b, 0xd9, 0x6b, 0xba, 0x45, 0xc8, 0xf9, 0x53, 0x19, 0xea,
	0xbd, 0xb3, 0xa3, 0x78, 0x32, 0xd5, 0xd6, 0x5d, 0x68, 0x4e, 0x94, 0xbc, 0xf0, 0x46, 0x22, 0x1d,
	0xd1, 0x92, 0x9a, 0x6e, 0x03, 0x81, 0x43, 0x91, 0x8e, 0xac, 0x8f, 0x61, 0x33, 0x99, 0xea, 0xc9,
	0x54, 0x7b, 0x61, 0x1c, 0xc8, 0x99, 0x5d, 0xde, 0x2d, 0xed, 0x55, 0xdd, 0x16, 0x63, 0x47, 0x08,
	0x15, 0x86, 0x5c, 0x60, 0x9c, 0x76, 0xa5, 0x38, 0x84, 0x42, 0xb7, 0xee, 0x43, 0x2b, 0xf5, 0x55,
	0x38, 0xd1, 0x9e, 0x9e, 0x4f, 0xa4, 0xbd, 0x41, 0x1f, 0x01, 0x86, 0x7a, 0xf3, 0x89, 0xb4, 0x6e,
	0x43, 0x8d, 0x2d, 0xbb, 0x4a, 0x7d, 0xc6, 0xb2, 0x3e, 0x84, 0xa6, 0x08, 0x02, 0x25, 0xd3, 0x54,
	0xa6, 0x76, 0x8d, 0xe2, 0x58, 0x00, 0xd6, 0x1d, 0x68, 0xa4, 0xb8, 0xab, 0xb1, 0x2f, 0xed, 0x3a,
	0x7d, 0x35, 0xb7, 0xad, 0x0e, 0x54, 0xc4, 0x50, 0xda, 0x0d, 0x82, 0xb1, 0x89, 0x8b, 0xb8, 0x14,
	0x51, 0x24, 0xb5, 0x17, 0x8b, 0xb1, 0xb4, 0x9b, 0xbc, 0x08, 0x86, 0x8e, 0xc5, 0x58, 0x62, 0x20,
	0x66, 0x80, 0x4e, 0xce, 0x65, 0x6c, 0x03, 0x8d, 0x30, 0x93, 0x7a, 0x08, 0x39, 0x7f, 0x2b, 0x41,
	0xa3, 0x77, 0xf6, 0x92, 0x42, 0xb3, 0x76, 0xa0, 0xca, 0x11, 0x97, 0xe8, 0x23, 0x6c, 0x14, 0x42,
	0x29, 0xbf, 0x39, 0x94, 0xca, 0xd5, 0x50, 0xde, 0xba, 0x43, 0x1f, 0x40, 0x23, 0x9d, 0xc8, 0x58,
	0x7b, 0xfd, 0xb9, 0xd9, 0xa3, 0x3a, 0xd9, 0x4f, 0xe6, 0xd8, 0x15, 0x08, 0x2d, 0xbc, 0x91, 0x9c,
	0xd9, 0x35, 0xee, 0x42, 0xfb, 0x50, 0xce, 0xd0, 0x2d, 0x75, 0x19, 0x26, 0xd4, 0xd9, 0x2d, 0x42,
	0x4c, 0x15, 0xe7, 0x0f, 0x75, 0x28, 0xf7, 0xce, 0x30, 0x74, 0x22, 0x9e, 0x37, 0x92, 0xe1, 0x70,
	0xa4, 0x4d, 0x44, 0x2d, 0xc2, 0x0e, 0x09, 0xb2, 0x2c, 0xd8, 0x20, 0x86, 0x70, 0x54, 0xd4, 0x7e,
	0x4b, 0x4c, 0x3b, 0x50, 0xd5, 0x89, 0x16, 0x11, 0x45, 0x53, 0x75, 0xd9, 0x40, 0x3f, 0x03, 0x29,
	0x53, 0x0a, 0xa2, 0xea, 0x52, 0x1b, 0xb1, 0x34, 0x7c, 0x25, 0x69, 0xf5, 0x55, 0x97, 0xda, 0xd6,
	0x47, 0x00, 0x13, 0x25, 0x07, 0x52, 0xe5, 0xc7, 0xdb, 0x74, 0x0b, 0x88, 0x75, 0x0f, 0x40, 0xc9,
	0x48, 0xcc, 0x65, 0x80, 0x5b, 0xd2, 0xa0, 0xfe, 0xa6, 0x41, 0x9e, 0xcc, 0x91, 0x1b, 0x4a, 0xfa,
	0x32, 0xbc, 0x90, 0x81, 0x39, 0xea, 0xdc, 0x46, 0x6e, 0x5c, 0x48, 0x45, 0xe7, 0x5b, 0x75, 0xb1,
	0x89, 0x39, 0x40, 0xe1, 0xeb, 0x70, 0x2c, 0xed, 0x16, 0x53, 0x09, 0x81, 0x5e, 0xc8, 0xbc, 0x08,
	0x92, 0x69, 0x3f, 0x92, 0x1e, 0xee, 0x78, 0x60, 0x6f, 0xee, 0x96, 0xf6, 0x1a, 0x6e, 0x8b, 0xb1,
	0x53, 0x84, 0xac, 0x5b, 0x50, 0xbb, 0x08, 0x63, 0x2f, 0x7d, 0x65, 0x6f, 0x19, 0x2e, 0x84, 0xf1,
	0xe9, 0x2b, 0xeb, 0x7d, 0xa8, 0x5f, 0x24, 0x53, 0x8d, 0x78, 0x9b, 0xf0, 0x1a, 0x9a, 0xa7, 0xaf,
	0xac, 0xff, 0x83, 0x2d, 0x3f, 0x89, 0x07, 0xa1, 0x1a, 0x0b, 0x1d, 0x26, 0x71, 0x6a, 0x6f, 0x53,
	0xf7, 0x32, 0x68, 0x1d, 0x40, 0x2d, 0xc4, 0x14, 0x4d, 0xed, 0xce, 0x6e, 0x65, 0xaf, 0xf5, 0xf8,
	0xc7, 0xeb, 0x54, 0x0a, 0x93, 0xd6, 0xae, 0x99, 0x6a, 0x3d, 0x83, 0x3a, 0xa7, 0x62, 0x6a, 0xdf,
	0x20, 0x2f, 0x9f, 0xaf, 0xe7, 0x85, 0x49, 0xee, 0x66, 0x93, 0xad, 0x0f, 0x01, 0x92, 0x09, 0x96,
	0x01, 0x4f, 0xf5, 0x07, 0xb6, 0x45, 0x7b, 0xd0, 0x48, 0x26, 0xfa, 0x28, 0x76, 0xfb, 0x03, 0x3c,
	0x2d, 0x5a, 0x7b, 0x40, 0xa7, 0x75, 0x73, 0xb7, 0xb4, 0x57, 0x76, 0x0b, 0x08, 0x32, 0xc5, 0xc4,
	0x26, 0x03, 0x7b, 0x87, 0x0f, 0x2b, 0x07, 0xac, 0x4f, 0x60, 0xcb, 0x1c, 0x8e, 0xe7, 0x27, 0xd3,
	0x58, 0xdb, 0xb7, 0x68, 0x3b, 0x36, 0x0d, 0x78, 0x80, 0x98, 0xf5, 0x29, 0xb4, 0xfd, 0x91, 0x88,
	0x87, 0xd2, 0x33, 0x14, 0xb3, 0x6f, 0x93, 0x9f, 0x2d, 0x46, 0xbb, 0x0c, 0x22, 0x2f, 0x0c, 0x95,
	0x91, 0xad, 0xef, 0xf3, 0xa7, 0x98, 0xc8, 0x48, 0xd9, 0xfb, 0xc0, 0xac, 0x36, 0xf5, 0xcc, 0xa6,
	0x0f, 0xf1, 0x0c, 0x2e, 0x67, 0x77, 0xa1, 0x69, 0x4e, 0x3b, 0x19, 0xd8, 0x1f, 0x30, 0x73, 0x18,
	0x78, 0x39, 0xc0, 0x85, 0x52, 0x3e, 0xd1, 0x5e, 0xf9, 0x49, 0x64, 0xdf, 0xa1, 0x01, 0x9b, 0x08,
	0x9e, 0x18, 0x0c, 0xe9, 0x85, 0xa9, 0x78, 0x97, 0xba, 0xb0, 0x89, 0x1f, 0x8d, 0xe5, 0x0c, 0x37,
	0x8f, 0xce, 0xe1, 0x43, 0x26, 0x33, 0x42, 0x47, 0x7c, 0x48, 0x1f, 0xc3, 0x26, 0x0d, 0xc8, 0x4e,
	0xea, 0x1e, 0x97, 0x1e, 0xc4, 0xf8, 0x1c, 0x52, 0xe7, 0x04, 0x6a, 0xbf, 0xa2, 0x4a, 0xc4, 0x79,
	0x85, 0x05, 0x8a, 0x8b, 0x35, 0x1b, 0x98, 0x43, 0x54, 0xd7, 0x4c, 0x7e, 0x62, 0xfb, 0xfa, 0xfc,
	0x74, 0xfe, 0x51, 0x82, 0xc6, 0xe1, 0xd3, 0x77, 0x76, 0x7a, 0x00, 0x35, 0xe2, 0x0b, 0x7b, 0x5c,
	0x93, 0x95, 0x87, 0x4f, 0x0f, 0x10, 0x73, 0xcd, 0x54, 0xab, 0x0d, 0xe5, 0x51, 0x40, 0x85, 0xa1,
	0xe1, 0x96, 0x47, 0x81, 0xb5, 0x0f, 0x37, 0xe5, 0x4c, 0xcb, 0x38, 0x90, 0x81, 0x37, 0x99, 0xf6,
	0xa3, 0xd0, 0xf7, 0xce, 0x65, 0x56, 0xe9, 0x6e, 0x64, 0x5d, 0x27, 0xd4, 0xf3, 0xad, 0x9c, 0x5b,
	0x0f, 0xa0, 0x93, 0x4e, 0xfb, 0xe4, 0x8c, 0x4f, 0xd2, 0xdc, 0x0f, 0x55, 0x77, 0x3b, 0xc3, 0x8f,
	0x18, 0x76, 0x2e, 0xa1, 0x6e, 0xbe, 0x6e, 0x7d, 0x0f, 0xdb, 0x3c, 0x65, 0xb1, 0x2b, 0x25, 0x8a,
	0xe1, 0xe1, 0x7a, 0x31, 0x18, 0x8e, 0xb9, 0x6d, 0xea, 0xec, 0x16, 0x2b, 0xdd, 0xe2, 0x7a, 0xac,
	0xb8, 0x6c, 0x38, 0x7f, 0xad, 0x42, 0x3d, 0x63, 0xa5, 0x0d, 0xf5, 0x8c, 0xb5, 0xbc, 0xc1, 0x99,
	0x69, 0x3d, 0x81, 0x1a, 0xdf, 0x30, 0x34, 0xb9, 0xf5, 0xf8, 0xb3, 0x75, 0x96, 0xc2, 0x87, 0xe6,
	0x9a, 0x99, 0xd6, 0x11, 0x34, 0x47, 0x81, 0x67, 0xdc, 0x54, 0xc8, 0xcd, 0xe7, 0xeb, 0x45, 0x64,
	0x1c, 0x35, 0x46, 0x81, 0xe1, 0xc1, 0xa7, 0xd0, 0xa6, 0x3a, 0xed, 0xe5, 0xd5, 0x93, 0xab, 0xf7,
	0x16, 0xa1, 0x6e, 0x56, 0x42, 0xef, 0x01, 0xf0, 0xb0, 0x54, 0xc6, 0xda, 0xd4, 0xf2, 0x26, 0x21,
	0xa7, 0x32, 0xd6, 0x18, 0x6e, 0x5f, 0x44, 0x02, 0x6b, 0x01, 0xd7, 0xf4, 0xcc, 0xb4, 0x1e, 0xc1,
	0xcd, 0x69, 0x9c, 0x67, 0xbe, 0x97, 0x8d, 0xe2, 0xeb, 0xdb, 0x2a, 0x74, 0x3d, 0x31, 0x13, 0x3e,
	0x81, 0xad, 0x41, 0x18, 0x8b, 0x28, 0x1f, 0xca, 0x57, 0xfa, 0x26, 0x81, 0xd9, 0xa0, 0x1b, 0xb0,
	0x11, 0x7b, 0x7a, 0x46, 0x95, 0xbe, 0xea, 0x56, 0xe2, 0xde, 0xcc, 0xda, 0x83, 0x4e, 0xf1, 0x43,
	0xd4, 0xcd, 0x15, 0xbf, 0x5d, 0xc0, 0x8f, 0x7b, 0x33, 0xac, 0x6c, 0xfc, 0x05, 0x1a, 0x63, 0xaa,
	0x3f, 0x21, 0xd8, 0x7b, 0x0b, 0x6a, 0x7a, 0xe6, 0x4d, 0x55, 0x44, 0x75, 0x1f, 0x33, 0x63, 0xf6,
	0x4b, 0x15, 0x59, 0x5f, 0x41, 0x45, 0xcf, 0x52, 0x7b, 0x8b, 0xe8, 0xf3, 0xff, 0xeb, 0x95, 0x54,
	0x17, 0xa7, 0x58, 0x5d, 0x74, 0xa8, 0xe4, 0x20, 0xb5, 0xdb, 0x34, 0xf9, 0xc1, 0x9a, 0x93, 0xe5,
	0xc0, 0x35, 0x13, 0xad, 0x33, 0x28, 0xee, 0x94, 0x67, 0xdc, 0x6d, 0xbf, 0xab, 0xbb, 0x1b, 0x05,
	0x27, 0x3d, 0xf6, 0x6c, 0x43, 0x7d, 0x24, 0xd2, 0x17, 0x89, 0x92, 0x76, 0x87, 0x92, 0x33, 0x33,
	0x9d, 0x5f, 0x40, 0x33, 0x4f, 0x80, 0x6b, 0xe8, 0x6c, 0xc1, 0xc6, 0x44, 0xe8, 0x5c, 0x26, 0x60,
	0x1b, 0x25, 0x11, 0xe7, 0x34, 0x71, 0xb3, 0xe9, 0x1a, 0xcb, 0xf9, 0x57, 0x09, 0xb6, 0x8d, 0xc7,
	0x6f, 0xe5, 0x9c, 0x56, 0x79, 0x8d, 0xe7, 0x85, 0x97, 0x72, 0xd1, 0x0b, 0xce, 0x98, 0xa8, 0xf0,
	0x42, 0x68, 0x69, 0xdc, 0x67, 0x26, 0x16, 0xe2, 0xcb, 0x70, 0x60, 0xc4, 0x14, 0x36, 0x69, 0xec,
	0xb4, 0x7f, 0x2e, 0xe7, 0xa8, 0x3f, 0x2a, 0x34, 0x96, 0xcd, 0xab, 0x02, 0xac, 0xb6, 0x22, 0xc0,
	0x1e, 0x40, 0x27, 0x51, 0xe1, 0x90, 0x88, 0x92, 0xad, 0x90, 0x55, 0xc9, 0x76, 0x86, 0x67, 0xbb,
	0x73, 0x1f, 0x5a, 0x89, 0x98, 0xe4, 0xa3, 0x58, 0x9b, 0x40, 0x22, 0x26, 0x66, 0x80, 0xf3, 0xc3,
	0x06, 0x54, 0xe9, 0x08, 0xae, 0x09, 0xf7, 0xaa, 0x24, 0x2b, 0xaf, 0x4a, 0xb2, 0xf7, 0xa1, 0xae,
	0x67, 0x7c, 0xcf, 0x99, 0x8d, 0xd5, 0xb3, 0x43, 0xd6, 0x65, 0xa0, 0x67, 0x7c, 0xdb, 0x78, 0xb1,
	0x49, 0xe0, 0x86, 0x9e, 0xd1, 0x65, 0x73, 0x6c, 0x7d, 0x04, 0x2d, 0x3d, 0x33, 0x57, 0x8d, 0x17,
	0xe7, 0xc9, 0x3b, 0xe3, 0x9b, 0xe6, 0x78, 0xa1, 0x6b, 0x6b, 0x45, 0x5d, 0xfb, 0x36, 0x3d, 0xb6,
	0x03, 0x55, 0x12, 0xa4, 0x14, 0x6e, 0xc3, 0x65, 0x63, 0x45, 0x3b, 0x35, 0x57, 0xb5, 0xd3, 0x8a,
	0x16, 0x82, 0xd7, 0x69, 0xa1, 0x85, 0xac, 0x6e, 0x2d, 0xc9, 0xea, 0xfb, 0xd0, 0x52, 0x72, 0x90,
	0x17, 0x87, 0x4d, 0xbe, 0xcf, 0x95, 0x1c, 0x64, 0xa5, 0x61, 0x59, 0x99, 0x6c, 0x5d, 0xaf, 0x4c,
	0xda, 0x57, 0x95, 0x49, 0x51, 0x76, 0x6f, 0x2f, 0xcb, 0xee, 0xa2, 0xc2, 0xec, 0x5c, 0x51, 0x98,
	0x2b, 0x82, 0xe6, 0xc6, 0x6b, 0x04, 0xcd, 0x92, 0xd2, 0xb0, 0x96, 0x95, 0x86, 0xf3, 0xdb, 0x12,
	0x34, 0x5e, 0x76, 0x4f, 0x8e, 0xd2, 0x74, 0x4a, 0x0a, 0x74, 0xa0, 0x92, 0xb1, 0x97, 0xf1, 0x9c,
	0xa9, 0xd2, 0x42, 0xec, 0xc4, 0x70, 0x9d, 0x0a, 0x72, 0x4e, 0x39, 0xce, 0x90, 0xa6, 0x4e, 0xba,
	0x8b, 0xe4, 0x11, 0x63, 0x5a, 0x09, 0x3f, 0xcf, 0x8c, 0x85, 0x41, 0x8c, 0xa5, 0x16, 0xa8, 0x5f,
	0x4c, 0x9e, 0xe4, 0xb6, 0xf3, 0xf7, 0x12, 0x6c, 0x67, 0x4b, 0xf8, 0x1f, 0xbe, 0x5e, 0x57, 0xa2,
	0x2b, 0xbf, 0x2d, 0xba, 0xca, 0x9b, 0xa3, 0xdb, 0x78, 0x63, 0x74, 0xd5, 0x2b, 0xd1, 0xfd, 0xb3,
	0x04, 0xd5, 0x97, 0xdd, 0x93, 0xde, 0x59, 0xf6, 0x1c, 0x28, 0x2d, 0x9e, 0x03, 0x98, 0x95, 0x69,
	0x2a, 0x75, 0x18, 0x98, 0xc5, 0x64, 0x66, 0xfe, 0x0a, 0xaa, 0x2c, 0xbf, 0x82, 0x16, 0x0c, 0xda,
	0xb8, 0xca, 0xa0, 0x22, 0x4d, 0xaa, 0x57, 0x68, 0xf2, 0x01, 0x34, 0xb0, 0x50, 0xe0, 0x9a, 0xb2,
	0x97, 0x5b, 0x22, 0x26, 0x2f, 0xa4, 0x16, 0x2b, 0x89, 0x53, 0x5f, 0x4d, 0x9c, 0xdb, 0xf9, 0xf3,
	0xa0, 0x41, 0xb5, 0x2c, 0x53, 0xfc, 0xf6, 0x42, 0xf1, 0x37, 0xb9, 0xc8, 0x19, 0xd3, 0xf9, 0x77,
	0x09, 0xa0, 0x77, 0x76, 0x7a, 0x2e, 0x23, 0xa9, 0x93, 0xd8, 0xfa, 0x19, 0x94, 0xf5, 0x8c, 0xe2,
	0x5e, 0xff, 0x0a, 0x2b, 0xeb, 0x19, 0x7e, 0x58, 0x27, 0x69, 0x38, 0x8c, 0xed, 0x32, 0x7f, 0x98,
	0x2d, 0x4c, 0x35, 0xfc, 0x15, 0x7a, 0xaa, 0x72, 0xbd, 0x59, 0x40, 0x8a, 0xd5, 0x77, 0x63, 0xb9,
	0xfa, 0xde, 0x85, 0x26, 0xfb, 0xc0, 0x1b, 0x98, 0x2b, 0x73, 0x83, 0x81, 0xde, 0x0c, 0x05, 0xa7,
	0x54, 0x2a, 0x51, 0xac, 0xf0, 0xd6, 0x7e, 0x06, 0xd1, 0x1c, 0xd7, 0x4c, 0x75, 0xee, 0x43, 0xdd,
	0x40, 0x58, 0xa9, 0xa8, 0x91, 0x49, 0x5d, 0x32, 0x9c, 0x00, 0x1a, 0xc7, 0xd3, 0x28, 0x7a, 0x2a,
	0xb4, 0xc0, 0x53, 0x26, 0xce, 0xf0, 0x00, 0x6a, 0x2f, 0x04, 0x72, 0xb9, 0x28, 0x90, 0xef, 0x40,
	0x43, 0xc6, 0x7e, 0x12, 0xe0, 0xeb, 0x9a, 0x39, 0x91, 0xdb, 0x39, 0x57, 0x36, 0x16, 0x5c, 0x71,
	0x7e, 0x57, 0x81, 0xf6, 0x53, 0x89, 0xb5, 0xab, 0x2f, 0x83, 0x27, 0x32, 0x4a, 0x2e, 0xad, 0x5d,
	0x68, 0x69, 0x25, 0xe2, 0x54, 0xf8, 0x58, 0xe9, 0xb2, 0xdc, 0x2e, 0x40, 0xd6, 0x19, 0xb4, 0x07,
	0xa1, 0x4a, 0xb5, 0x17, 0x25, 0x3e, 0x95, 0x43, 0x23, 0x15, 0xbf, 0x5c, 0x67, 0x23, 0x9e, 0xe1,
	0xcc, 0xef, 0xcc, 0x44, 0x77, 0x6b, 0x50, 0x34, 0x31, 0xaf, 0xd8, 0xb3, 0x1f, 0xea, 0x79, 0x96,
	0x57, 0x84, 0x1c, 0x84, 0x7a, 0xce, 0xda, 0x8b, 0xba, 0x31, 0x9d, 0xd4, 0xdc, 0x84, 0xb2, 0xc9,
	0x23, 0x18, 0xb3, 0x04, 0xdc, 0x10, 0xc3, 0xa1, 0x92, 0x43, 0xa1, 0x65, 0xe0, 0xf1, 0x5d, 0x48,
	0x4c, 0x6f, 0x3d, 0xfe, 0xe9, 0x3a, 0x0b, 0xec, 0xe6, 0x93, 0x5f, 0xd2, 0x5c, 0xb7, 0x23, 0xae,
	0x20, 0xd6, 0x57, 0x60, 0xaf, 0x7c, 0xc2, 0x53, 0x22, 0x08, 0xa7, 0xa9, 0xb9, 0xa4, 0x6e, 0x5f,
	0x9d, 0xe3, 0x52, 0x2f, 0xca, 0x59, 0x8e, 0x20, 0xcf, 0x41, 0xbe, 0xb9, 0x38, 0xae, 0x4c, 0xce,
	0x3a, 0x47, 0xb0, 0xb5, 0xb4, 0x4f, 0x78, 0xae, 0x91, 0xd0, 0xa1, 0x9e, 0x06, 0x5c, 0x6d, 0xcb,
	0x6e, 0x6e, 0x63, 0xbe, 0x47, 0x49, 0x3c, 0xe4, 0xce, 0x32, 0x75, 0x2e, 0x00, 0xe7, 0x3b, 0xe8,
	0x5c, 0x8d, 0xe8, 0xbf, 0xf0, 0xf6, 0x97, 0x12, 0xd4, 0x9f, 0x27, 0xfd, 0xae, 0x1a, 0x5e, 0x27,
	0xba, 0x7e, 0x04, 0xdb, 0x74, 0x49, 0x7b, 0x7a, 0xa4, 0x64, 0x3a, 0x4a, 0xa2, 0xc0, 0xc8, 0x85,
	0x36, 0xc1, 0xbd, 0x0c, 0x45, 0x12, 0x47, 0xe1, 0x38, 0xcc, 0x6e, 0x01, 0x36, 0xe8, 0xea, 0xd6,
	0x42, 0x69, 0x73, 0xbc, 0x6c, 0x60, 0x59, 0xc4, 0xc2, 0xc3, 0x35, 0xab, 0x62, 0x0a, 0x4e, 0x20,
	0x87, 0x4a, 0x66, 0xca, 0xc0, 0x58, 0x74, 0x37, 0x27, 0x53, 0x95, 0xcb, 0x02, 0x63, 0x39, 0x7f,
	0x2e, 0x43, 0xe5, 0x79, 0xd2, 0x7f, 0xc3, 0xdb, 0xf2, 0x01, 0x74, 0x44, 0x2c, 0xa2, 0xb9, 0x0e,
	0xfd, 0xd4, 0x93, 0xf1, 0x30, 0x8c, 0xb3, 0xd2, 0xbf, 0x9d, 0xe3, 0xdf, 0x10, 0x8c, 0x34, 0xf5,
	0x95, 0xa4, 0xc3, 0x17, 0x3a, 0xa3, 0xa9, 0x41, 0xba, 0x24, 0x32, 0xfc, 0x64, 0x3c, 0x89, 0xa4,
	0x19, 0xc0, 0x61, 0xb4, 0x72, 0xac, 0x4b, 0x37, 0xc1, 0x20, 0x8c, 0xc3, 0x74, 0x64, 0xaa, 0x70,
	0xc3, 0xcd, 0x6d, 0xdc, 0x57, 0x8a, 0x58, 0x06, 0x14, 0x57, 0xc3, 0xcd, 0x4c, 0x2a, 0x74, 0xa1,
	0x7f, 0x2e, 0x75, 0x16, 0x18, 0x5b, 0x2c, 0x3a, 0xd2, 0x69, 0xa4, 0x3d, 0xd2, 0xba, 0x46, 0xe0,
	0x31, 0x74, 0x82, 0x8a, 0xf7, 0x6b, 0xd8, 0x10, 0x6a, 0x98, 0x92, 0xdc, 0x59, 0xb3, 0x60, 0x99,
	0x53, 0x76, 0x69, 0xa2, 0xf3, 0xfb, 0x12, 0xc0, 0xf3, 0xa4, 0xef, 0x92, 0x4b, 0xa3, 0xaa, 0x87,
	0xd9, 0x3f, 0x8d, 0xd4, 0x46, 0x6c, 0x8c, 0x3a, 0xbd, 0x4c, 0x6b, 0xa6, 0x36, 0xd6, 0x51, 0xfa,
	0x1f, 0x81, 0x06, 0x9b, 0x7a, 0x84, 0xc0, 0x09, 0x4e, 0x78, 0x0e, 0x75, 0x5e, 0x22, 0x97, 0xdf,
	0xd6, 0xe3, 0x2f, 0xd6, 0x5c, 0x17, 0xaf, 0xa2, 0xab, 0x94, 0x9b, 0x39, 0x70, 0x26, 0xb0, 0x59,
	0xec, 0xc0, 0x3d, 0x7c, 0x9a, 0x6a, 0xbc, 0x8f, 0x33, 0x6e, 0x1a, 0x13, 0x7b, 0x4e, 0x95, 0x4f,
	0x3d, 0xe6, 0x2e, 0x35, 0x26, 0xee, 0x6e, 0x8f, 0xf4, 0x6a, 0xa6, 0x5e, 0xd9, 0x42, 0xba, 0xd0,
	0xdf, 0xc6, 0xd9, 0xff, 0x86, 0xfc, 0x5f, 0xfa, 0xd7, 0x50, 0xe9, 0x9d, 0x9d, 0x66, 0xef, 0xae,
	0xd2, 0x3b, 0xbf, 0xbb, 0x9c, 0x1f, 0x4a, 0xb0, 0xd9, 0x3b, 0x3b, 0x58, 0x28, 0xbf, 0x7b, 0x00,
	0x62, 0x28, 0xbd, 0x71, 0x18, 0x45, 0x61, 0x6a, 0xb6, 0xb6, 0x29, 0x86, 0xf2, 0x05, 0x01, 0xab,
	0x1a, 0xae, 0xfc, 0x1a, 0x0d, 0xb7, 0xac, 0x2e, 0x2b, 0x2b, 0xea, 0x12, 0x19, 0x34, 0x2b, 0xdc,
	0x02, 0xc6, 0xa2, 0x94, 0x98, 0xe1, 0xa3, 0xb2, 0x9a, 0x3d, 0x2a, 0xa7, 0x2a, 0x72, 0xfe, 0x58,
	0x81, 0xb6, 0xd1, 0x34, 0xcf, 0x12, 0x75, 0x29, 0x54, 0x60, 0xb5, 0xa1, 0x1c, 0x06, 0x66, 0x4f,
	0xcb, 0x61, 0xf0, 0x86, 0x6b, 0x68, 0x17, 0x5a, 0x81, 0x4c, 0x75, 0x18, 0xf3, 0xf5, 0xc0, 0xfb,
	0x59, 0x84, 0x30, 0x1a, 0x7e, 0x0f, 0x64, 0x25, 0xc4, 0x94, 0x72, 0x02, 0x33, 0x1d, 0xf5, 0x05,
	0xec, 0x4c, 0x54, 0xe2, 0xcb, 0x34, 0xf5, 0x06, 0x52, 0xa6, 0xf9, 0x58, 0x5e, 0xa4, 0x65, 0xfa,
	0x9e, 0x49, 0x99, 0x66, 0x33, 0x1e, 0xc3, 0xad, 0xa5, 0x19, 0xa9, 0xd0, 0x49, 0x3a, 0x0a, 0xb3,
	0xb2, 0x7c, 0xb3, 0x30, 0xe5, 0xd4, 0x74, 0xad, 0x7c, 0x65, 0x22, 0x95, 0x8f, 0x0f, 0x87, 0x3a,
	0xed, 0x5e, 0xf1, 0x2b, 0x27, 0xdc, 0x43, 0x09, 0x2e, 0xa2, 0xa8, 0x2f, 0xfc, 0x73, 0x7a, 0x89,
	0x37, 0x4c, 0x82, 0x1b, 0x0c, 0xdf, 0xe3, 0x5f, 0xc2, 0x8e, 0x8c, 0x05, 0xea, 0xa5, 0xe5, 0xc7,
	0x04, 0x3f, 0x38, 0x6e, 0x72, 0xdf, 0xc1, 0xd2, 0x93, 0xe2, 0x0b, 0xd8, 0x19, 0x87, 0x71, 0x18,
	0x0f, 0xaf, 0x2c, 0x9d, 0xdf, 0x1f, 0x16, 0xf7, 0x2d, 0xad, 0xbc, 0xc3, 0xe4, 0x6b, 0x91, 0x40,
	0xc1, 0xe6, 0x67, 0x87, 0xb0, 0xf3, 0x3a, 0x71, 0x6b, 0xb5, 0xa0, 0xfe, 0xa2, 0x7b, 0x74, 0x7c,
	0xfc, 0x4d, 0xaf, 0xf3, 0x1e, 0x1a, 0x63, 0x11, 0xc6, 0xb1, 0xd4, 0x9d, 0xf7, 0xac, 0x06, 0x6c,
	0xf4, 0xbe, 0x39, 0xed, 0x75, 0x4a, 0xd8, 0xd2, 0x32, 0xd5, 0x9d, 0xd2, 0x9d, 0x72, 0xa7, 0xf4,
	0xe4, 0xeb, 0x5f, 0xff, 0x7c, 0x18, 0xea, 0xd1, 0xb4, 0xbf, 0xef, 0x27, 0xe3, 0x47, 0x86, 0xd7,
	0x0f, 0x91, 0xd8, 0x8f, 0x16, 0xc4, 0x7e, 0x98, 0x31, 0xfb, 0x11, 0xff, 0x03, 0xf9, 0x70, 0x28,
	0xe3, 0x87, 0xc3, 0xe4, 0x51, 0x5f, 0xfb, 0xfd, 0x1a, 0x41, 0x3f, 0xf9, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x45, 0xe6, 0x1f, 0x1d, 0xbb, 0x1a, 0x00, 0x00,
}
