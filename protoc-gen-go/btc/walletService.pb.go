// Code generated by protoc-gen-go. DO NOT EDIT.
// source: walletService.proto

package btc // import "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go/btc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletServiceClient interface {
	CreateWalletEndpoint(ctx context.Context, in *CreateWalletEndpointRequest, opts ...grpc.CallOption) (*Wallet, error)
	CreateHDWalletEndpoint(ctx context.Context, in *CreateHDWalletEndpointRequest, opts ...grpc.CallOption) (*HDWallet, error)
	ListWalletsEndpoint(ctx context.Context, in *ListWalletsEndpointRequest, opts ...grpc.CallOption) (*ListWallets, error)
	WalletEndpoint(ctx context.Context, in *WalletEndpointRequest, opts ...grpc.CallOption) (*Wallet, error)
	WalletHDEndpoint(ctx context.Context, in *HDWalletEndpointRequest, opts ...grpc.CallOption) (*HDWallet, error)
	AddAddressesToWalletEndpoint(ctx context.Context, in *AddAddressesToWalletEndpointRequest, opts ...grpc.CallOption) (*Wallet, error)
	WalletAddressesEndpoint(ctx context.Context, in *WalletAddressesEndpointRequest, opts ...grpc.CallOption) (*Wallet, error)
	HDWalletAddressesEndpoint(ctx context.Context, in *HDWalletAddressesEndpointRequest, opts ...grpc.CallOption) (*HDChain, error)
	RemoveAddressesFromWalletEndpoint(ctx context.Context, in *RemoveAddressesFromWalletEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
	GenerateAddressInWalletEndpoint(ctx context.Context, in *GenerateAddressInWalletEndpointRequest, opts ...grpc.CallOption) (*WalletAddressKeychain, error)
	DeriveAddressInWalletEndpoint(ctx context.Context, in *DeriveAddressInWalletEndpointRequest, opts ...grpc.CallOption) (*HDWallet, error)
	DeleteWalletEndpoint(ctx context.Context, in *DeleteWalletEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
	DeleteHDWalletHDEndpoint(ctx context.Context, in *DeleteHDWalletEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
}

type walletServiceClient struct {
	cc *grpc.ClientConn
}

func NewWalletServiceClient(cc *grpc.ClientConn) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) CreateWalletEndpoint(ctx context.Context, in *CreateWalletEndpointRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/CreateWalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateHDWalletEndpoint(ctx context.Context, in *CreateHDWalletEndpointRequest, opts ...grpc.CallOption) (*HDWallet, error) {
	out := new(HDWallet)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/CreateHDWalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListWalletsEndpoint(ctx context.Context, in *ListWalletsEndpointRequest, opts ...grpc.CallOption) (*ListWallets, error) {
	out := new(ListWallets)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/ListWalletsEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WalletEndpoint(ctx context.Context, in *WalletEndpointRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/WalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WalletHDEndpoint(ctx context.Context, in *HDWalletEndpointRequest, opts ...grpc.CallOption) (*HDWallet, error) {
	out := new(HDWallet)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/WalletHDEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AddAddressesToWalletEndpoint(ctx context.Context, in *AddAddressesToWalletEndpointRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/AddAddressesToWalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WalletAddressesEndpoint(ctx context.Context, in *WalletAddressesEndpointRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/WalletAddressesEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HDWalletAddressesEndpoint(ctx context.Context, in *HDWalletAddressesEndpointRequest, opts ...grpc.CallOption) (*HDChain, error) {
	out := new(HDChain)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/HDWalletAddressesEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RemoveAddressesFromWalletEndpoint(ctx context.Context, in *RemoveAddressesFromWalletEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/RemoveAddressesFromWalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GenerateAddressInWalletEndpoint(ctx context.Context, in *GenerateAddressInWalletEndpointRequest, opts ...grpc.CallOption) (*WalletAddressKeychain, error) {
	out := new(WalletAddressKeychain)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/GenerateAddressInWalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeriveAddressInWalletEndpoint(ctx context.Context, in *DeriveAddressInWalletEndpointRequest, opts ...grpc.CallOption) (*HDWallet, error) {
	out := new(HDWallet)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/DeriveAddressInWalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeleteWalletEndpoint(ctx context.Context, in *DeleteWalletEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/DeleteWalletEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeleteHDWalletHDEndpoint(ctx context.Context, in *DeleteHDWalletEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.WalletService/DeleteHDWalletHDEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
type WalletServiceServer interface {
	CreateWalletEndpoint(context.Context, *CreateWalletEndpointRequest) (*Wallet, error)
	CreateHDWalletEndpoint(context.Context, *CreateHDWalletEndpointRequest) (*HDWallet, error)
	ListWalletsEndpoint(context.Context, *ListWalletsEndpointRequest) (*ListWallets, error)
	WalletEndpoint(context.Context, *WalletEndpointRequest) (*Wallet, error)
	WalletHDEndpoint(context.Context, *HDWalletEndpointRequest) (*HDWallet, error)
	AddAddressesToWalletEndpoint(context.Context, *AddAddressesToWalletEndpointRequest) (*Wallet, error)
	WalletAddressesEndpoint(context.Context, *WalletAddressesEndpointRequest) (*Wallet, error)
	HDWalletAddressesEndpoint(context.Context, *HDWalletAddressesEndpointRequest) (*HDChain, error)
	RemoveAddressesFromWalletEndpoint(context.Context, *RemoveAddressesFromWalletEndpointRequest) (*NullValue, error)
	GenerateAddressInWalletEndpoint(context.Context, *GenerateAddressInWalletEndpointRequest) (*WalletAddressKeychain, error)
	DeriveAddressInWalletEndpoint(context.Context, *DeriveAddressInWalletEndpointRequest) (*HDWallet, error)
	DeleteWalletEndpoint(context.Context, *DeleteWalletEndpointRequest) (*NullValue, error)
	DeleteHDWalletHDEndpoint(context.Context, *DeleteHDWalletEndpointRequest) (*NullValue, error)
}

func RegisterWalletServiceServer(s *grpc.Server, srv WalletServiceServer) {
	s.RegisterService(&_WalletService_serviceDesc, srv)
}

func _WalletService_CreateWalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/CreateWalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWalletEndpoint(ctx, req.(*CreateWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateHDWalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHDWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateHDWalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/CreateHDWalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateHDWalletEndpoint(ctx, req.(*CreateHDWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListWalletsEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListWalletsEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/ListWalletsEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListWalletsEndpoint(ctx, req.(*ListWalletsEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/WalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WalletEndpoint(ctx, req.(*WalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WalletHDEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HDWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WalletHDEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/WalletHDEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WalletHDEndpoint(ctx, req.(*HDWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AddAddressesToWalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressesToWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AddAddressesToWalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/AddAddressesToWalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AddAddressesToWalletEndpoint(ctx, req.(*AddAddressesToWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WalletAddressesEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletAddressesEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WalletAddressesEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/WalletAddressesEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WalletAddressesEndpoint(ctx, req.(*WalletAddressesEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HDWalletAddressesEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HDWalletAddressesEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HDWalletAddressesEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/HDWalletAddressesEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HDWalletAddressesEndpoint(ctx, req.(*HDWalletAddressesEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RemoveAddressesFromWalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAddressesFromWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RemoveAddressesFromWalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/RemoveAddressesFromWalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RemoveAddressesFromWalletEndpoint(ctx, req.(*RemoveAddressesFromWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GenerateAddressInWalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAddressInWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GenerateAddressInWalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/GenerateAddressInWalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GenerateAddressInWalletEndpoint(ctx, req.(*GenerateAddressInWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeriveAddressInWalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveAddressInWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeriveAddressInWalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/DeriveAddressInWalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeriveAddressInWalletEndpoint(ctx, req.(*DeriveAddressInWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeleteWalletEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeleteWalletEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/DeleteWalletEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeleteWalletEndpoint(ctx, req.(*DeleteWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeleteHDWalletHDEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHDWalletEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeleteHDWalletHDEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.WalletService/DeleteHDWalletHDEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeleteHDWalletHDEndpoint(ctx, req.(*DeleteHDWalletEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairwaycorp.blockchainprotobuf.btc.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWalletEndpoint",
			Handler:    _WalletService_CreateWalletEndpoint_Handler,
		},
		{
			MethodName: "CreateHDWalletEndpoint",
			Handler:    _WalletService_CreateHDWalletEndpoint_Handler,
		},
		{
			MethodName: "ListWalletsEndpoint",
			Handler:    _WalletService_ListWalletsEndpoint_Handler,
		},
		{
			MethodName: "WalletEndpoint",
			Handler:    _WalletService_WalletEndpoint_Handler,
		},
		{
			MethodName: "WalletHDEndpoint",
			Handler:    _WalletService_WalletHDEndpoint_Handler,
		},
		{
			MethodName: "AddAddressesToWalletEndpoint",
			Handler:    _WalletService_AddAddressesToWalletEndpoint_Handler,
		},
		{
			MethodName: "WalletAddressesEndpoint",
			Handler:    _WalletService_WalletAddressesEndpoint_Handler,
		},
		{
			MethodName: "HDWalletAddressesEndpoint",
			Handler:    _WalletService_HDWalletAddressesEndpoint_Handler,
		},
		{
			MethodName: "RemoveAddressesFromWalletEndpoint",
			Handler:    _WalletService_RemoveAddressesFromWalletEndpoint_Handler,
		},
		{
			MethodName: "GenerateAddressInWalletEndpoint",
			Handler:    _WalletService_GenerateAddressInWalletEndpoint_Handler,
		},
		{
			MethodName: "DeriveAddressInWalletEndpoint",
			Handler:    _WalletService_DeriveAddressInWalletEndpoint_Handler,
		},
		{
			MethodName: "DeleteWalletEndpoint",
			Handler:    _WalletService_DeleteWalletEndpoint_Handler,
		},
		{
			MethodName: "DeleteHDWalletHDEndpoint",
			Handler:    _WalletService_DeleteHDWalletHDEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "walletService.proto",
}

func init() { proto.RegisterFile("walletService.proto", fileDescriptor_walletService_7b5d60224210272e) }

var fileDescriptor_walletService_7b5d60224210272e = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xc7, 0x33, 0xbf, 0xc3, 0xef, 0x30, 0x89, 0xc6, 0x0c, 0x04, 0x01, 0xf9, 0x23, 0x8d, 0x46,
	0xad, 0x6c, 0x47, 0x31, 0x9a, 0x20, 0x2a, 0x59, 0x58, 0x05, 0x15, 0x3d, 0xa0, 0xd1, 0xc4, 0xdb,
	0xb4, 0x7d, 0x28, 0x0d, 0xed, 0xcc, 0xda, 0xce, 0x42, 0x08, 0xe1, 0xe2, 0x5b, 0xf0, 0xee, 0x11,
	0x4e, 0xc6, 0x9b, 0x07, 0x8f, 0x5e, 0x3c, 0x1b, 0xe3, 0x3b, 0xd0, 0xf7, 0x61, 0x3a, 0xdd, 0x59,
	0xd7, 0xb2, 0xdd, 0xce, 0x2e, 0x37, 0x32, 0xf0, 0xfd, 0x3e, 0x9f, 0xef, 0xf3, 0x3c, 0xec, 0xb3,
	0x78, 0x64, 0x8f, 0x45, 0x11, 0xc8, 0x17, 0x90, 0xec, 0x86, 0x1e, 0x38, 0xcd, 0x44, 0x48, 0x41,
	0xac, 0x2d, 0x16, 0x26, 0x7b, 0x6c, 0xdf, 0x13, 0x49, 0xd3, 0x71, 0x23, 0xe1, 0xed, 0x78, 0xdb,
	0x2c, 0xe4, 0xea, 0x97, 0x6e, 0x6b, 0xcb, 0x71, 0xa5, 0x37, 0x39, 0x15, 0x08, 0x11, 0x44, 0x40,
	0x59, 0x33, 0xa4, 0x8c, 0x73, 0x21, 0x99, 0x0c, 0x05, 0x4f, 0x73, 0x87, 0xc9, 0xb6, 0xed, 0x33,
	0x48, 0x53, 0x16, 0x80, 0x7e, 0xf4, 0x44, 0x1c, 0x0b, 0xfe, 0xcf, 0xe3, 0xc2, 0xf1, 0x08, 0x3e,
	0xf3, 0xba, 0x9b, 0x81, 0x1c, 0x21, 0x3c, 0xba, 0x9a, 0x00, 0x93, 0x90, 0xbf, 0x3f, 0xe4, 0x7e,
	0x53, 0x84, 0x5c, 0x92, 0x65, 0xa7, 0x9a, 0xcb, 0xe9, 0xa5, 0xdc, 0x84, 0xb7, 0x2d, 0x48, 0xe5,
	0xa4, 0x6d, 0x62, 0x90, 0x4b, 0xad, 0xb9, 0x77, 0x3f, 0x7e, 0xbd, 0xff, 0xef, 0x82, 0x35, 0x46,
	0x5d, 0xe9, 0xd1, 0x03, 0x0e, 0x72, 0x4f, 0x24, 0x3b, 0x87, 0x34, 0x0f, 0x96, 0xde, 0x45, 0x36,
	0xf9, 0x84, 0xf0, 0x58, 0x5e, 0x6e, 0xbd, 0x51, 0x40, 0xad, 0x9b, 0xa3, 0x16, 0xb5, 0x1a, 0x76,
	0xde, 0xc4, 0x42, 0x8b, 0xad, 0x4b, 0x0a, 0x77, 0xc6, 0x9a, 0xe8, 0x8d, 0x4b, 0xb7, 0xfd, 0x8c,
	0xf8, 0x08, 0xe1, 0x91, 0x8d, 0x30, 0x95, 0xb9, 0x28, 0xed, 0xe0, 0x3e, 0x30, 0xa9, 0xd5, 0x43,
	0xa8, 0x59, 0xe9, 0x80, 0x7a, 0x6b, 0x46, 0xe1, 0x8e, 0x93, 0x92, 0xee, 0x92, 0x0f, 0x08, 0x9f,
	0x2d, 0xb4, 0x74, 0xd1, 0x7c, 0x78, 0xa7, 0x99, 0xfb, 0x65, 0x45, 0x36, 0x4b, 0xa6, 0x4b, 0x1a,
	0x79, 0xc0, 0x59, 0x0c, 0x87, 0xe4, 0x18, 0xe1, 0x73, 0xb9, 0x62, 0xbd, 0xd1, 0x41, 0x5c, 0x1a,
	0x64, 0x64, 0xa7, 0x9b, 0xf7, 0x55, 0x85, 0x69, 0x91, 0x8b, 0xa5, 0xf3, 0xd6, 0xa4, 0xdf, 0x10,
	0x9e, 0xaa, 0xfb, 0x7e, 0xdd, 0xf7, 0x13, 0x48, 0x53, 0x48, 0x5f, 0x8a, 0x42, 0x63, 0xd7, 0x4c,
	0x0a, 0xf7, 0x73, 0x18, 0xa6, 0xcd, 0x0b, 0x8a, 0x7f, 0xde, 0xba, 0xd2, 0xb7, 0xcd, 0x94, 0xe9,
	0x9a, 0xd9, 0xf6, 0x7e, 0x41, 0xf8, 0x7c, 0x2e, 0xef, 0xa0, 0x74, 0x42, 0xac, 0x98, 0xd7, 0x3e,
	0x21, 0x1e, 0x86, 0x9f, 0x2a, 0xfe, 0x6b, 0xc4, 0x94, 0x9f, 0x7c, 0x45, 0x78, 0x42, 0x4f, 0xef,
	0x24, 0x7e, 0x63, 0x90, 0xe1, 0x97, 0x06, 0xb8, 0x6e, 0xe6, 0xb2, 0x9a, 0xbd, 0xe9, 0x09, 0x10,
	0xbb, 0x6a, 0x83, 0xba, 0x42, 0x7c, 0x47, 0x78, 0x6e, 0x13, 0x62, 0xb1, 0x0b, 0x1d, 0x86, 0x47,
	0x89, 0x88, 0x0b, 0x0b, 0xb5, 0x61, 0x82, 0x51, 0x69, 0xa3, 0x43, 0xd5, 0x4c, 0xdc, 0x9e, 0xb7,
	0xa2, 0xe8, 0x15, 0x8b, 0x5a, 0xa0, 0x07, 0x63, 0x1b, 0x0f, 0xe6, 0x37, 0xc2, 0xb3, 0x6b, 0xc0,
	0x21, 0x61, 0x52, 0xe3, 0x3c, 0xe6, 0x85, 0x44, 0x4f, 0x4c, 0x18, 0x2a, 0x4c, 0x74, 0x9e, 0xc5,
	0x81, 0x37, 0xf5, 0x29, 0xec, 0xab, 0xbf, 0xb0, 0x96, 0x54, 0xb6, 0xdb, 0xd6, 0x0d, 0xc3, 0x6c,
	0x34, 0x68, 0x23, 0x65, 0xff, 0x3d, 0x3f, 0x11, 0x9e, 0x6e, 0x40, 0x12, 0xee, 0x96, 0xa6, 0x5c,
	0x37, 0x21, 0xeb, 0x6b, 0x31, 0xdc, 0x67, 0xd9, 0x3d, 0x15, 0xeb, 0x8e, 0x75, 0xd3, 0x7c, 0x13,
	0xa9, 0xaf, 0x30, 0xb2, 0x5c, 0x1f, 0x11, 0x1e, 0x6d, 0x40, 0x04, 0xc3, 0x7d, 0x5d, 0xe8, 0xa5,
	0x1c, 0x72, 0xf3, 0xda, 0x97, 0xc3, 0xae, 0xb8, 0x1c, 0x9f, 0x11, 0x1e, 0xcf, 0xab, 0xea, 0x06,
	0x74, 0x5d, 0x90, 0xba, 0x39, 0x73, 0xd9, 0x1d, 0x19, 0x90, 0xba, 0x7d, 0x48, 0xec, 0xca, 0x43,
	0xb2, 0xb2, 0xfc, 0xe6, 0x7e, 0x10, 0xca, 0xed, 0x96, 0xeb, 0x78, 0x22, 0xa6, 0xed, 0x22, 0xb5,
	0xac, 0x0a, 0xfd, 0x5b, 0xa5, 0xa6, 0xcb, 0x50, 0xf5, 0x83, 0x57, 0x0b, 0x80, 0xd7, 0x02, 0x91,
	0x99, 0xbb, 0xff, 0xab, 0xa7, 0x5b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xda, 0x6f, 0xd8, 0xd4,
	0x74, 0x0a, 0x00, 0x00,
}
