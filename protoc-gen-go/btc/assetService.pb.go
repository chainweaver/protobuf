// Code generated by protoc-gen-go. DO NOT EDIT.
// source: assetService.proto

package btc // import "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go/btc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AssetServiceClient is the client API for AssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssetServiceClient interface {
	GenerateAssetAddressEndpoint(ctx context.Context, in *NullValueRequest, opts ...grpc.CallOption) (*AddressKeychain, error)
	IssueAssetEndpoint(ctx context.Context, in *OAPIssueRequest, opts ...grpc.CallOption) (*OAPTX, error)
	TransferAssetEndpoint(ctx context.Context, in *TransferAssetEndpointRequest, opts ...grpc.CallOption) (*OAPTX, error)
	ListAssetTXsEndpoint(ctx context.Context, in *ListAssetTXsEndpointRequest, opts ...grpc.CallOption) (*TxHashes, error)
	GetAssetTXEndpoint(ctx context.Context, in *GetAssetTXEndpointRequest, opts ...grpc.CallOption) (*OAPTX, error)
	GetAssetAddressEndpoint(ctx context.Context, in *GetAssetAddressEndpointRequest, opts ...grpc.CallOption) (*Address, error)
}

type assetServiceClient struct {
	cc *grpc.ClientConn
}

func NewAssetServiceClient(cc *grpc.ClientConn) AssetServiceClient {
	return &assetServiceClient{cc}
}

func (c *assetServiceClient) GenerateAssetAddressEndpoint(ctx context.Context, in *NullValueRequest, opts ...grpc.CallOption) (*AddressKeychain, error) {
	out := new(AddressKeychain)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AssetService/GenerateAssetAddressEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) IssueAssetEndpoint(ctx context.Context, in *OAPIssueRequest, opts ...grpc.CallOption) (*OAPTX, error) {
	out := new(OAPTX)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AssetService/IssueAssetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) TransferAssetEndpoint(ctx context.Context, in *TransferAssetEndpointRequest, opts ...grpc.CallOption) (*OAPTX, error) {
	out := new(OAPTX)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AssetService/TransferAssetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) ListAssetTXsEndpoint(ctx context.Context, in *ListAssetTXsEndpointRequest, opts ...grpc.CallOption) (*TxHashes, error) {
	out := new(TxHashes)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AssetService/ListAssetTXsEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) GetAssetTXEndpoint(ctx context.Context, in *GetAssetTXEndpointRequest, opts ...grpc.CallOption) (*OAPTX, error) {
	out := new(OAPTX)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AssetService/GetAssetTXEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) GetAssetAddressEndpoint(ctx context.Context, in *GetAssetAddressEndpointRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.AssetService/GetAssetAddressEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServiceServer is the server API for AssetService service.
type AssetServiceServer interface {
	GenerateAssetAddressEndpoint(context.Context, *NullValueRequest) (*AddressKeychain, error)
	IssueAssetEndpoint(context.Context, *OAPIssueRequest) (*OAPTX, error)
	TransferAssetEndpoint(context.Context, *TransferAssetEndpointRequest) (*OAPTX, error)
	ListAssetTXsEndpoint(context.Context, *ListAssetTXsEndpointRequest) (*TxHashes, error)
	GetAssetTXEndpoint(context.Context, *GetAssetTXEndpointRequest) (*OAPTX, error)
	GetAssetAddressEndpoint(context.Context, *GetAssetAddressEndpointRequest) (*Address, error)
}

func RegisterAssetServiceServer(s *grpc.Server, srv AssetServiceServer) {
	s.RegisterService(&_AssetService_serviceDesc, srv)
}

func _AssetService_GenerateAssetAddressEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).GenerateAssetAddressEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AssetService/GenerateAssetAddressEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).GenerateAssetAddressEndpoint(ctx, req.(*NullValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_IssueAssetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAPIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).IssueAssetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AssetService/IssueAssetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).IssueAssetEndpoint(ctx, req.(*OAPIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_TransferAssetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferAssetEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).TransferAssetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AssetService/TransferAssetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).TransferAssetEndpoint(ctx, req.(*TransferAssetEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_ListAssetTXsEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetTXsEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).ListAssetTXsEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AssetService/ListAssetTXsEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).ListAssetTXsEndpoint(ctx, req.(*ListAssetTXsEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_GetAssetTXEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetTXEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).GetAssetTXEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AssetService/GetAssetTXEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).GetAssetTXEndpoint(ctx, req.(*GetAssetTXEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_GetAssetAddressEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetAddressEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).GetAssetAddressEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.AssetService/GetAssetAddressEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).GetAssetAddressEndpoint(ctx, req.(*GetAssetAddressEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairwaycorp.blockchainprotobuf.btc.AssetService",
	HandlerType: (*AssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAssetAddressEndpoint",
			Handler:    _AssetService_GenerateAssetAddressEndpoint_Handler,
		},
		{
			MethodName: "IssueAssetEndpoint",
			Handler:    _AssetService_IssueAssetEndpoint_Handler,
		},
		{
			MethodName: "TransferAssetEndpoint",
			Handler:    _AssetService_TransferAssetEndpoint_Handler,
		},
		{
			MethodName: "ListAssetTXsEndpoint",
			Handler:    _AssetService_ListAssetTXsEndpoint_Handler,
		},
		{
			MethodName: "GetAssetTXEndpoint",
			Handler:    _AssetService_GetAssetTXEndpoint_Handler,
		},
		{
			MethodName: "GetAssetAddressEndpoint",
			Handler:    _AssetService_GetAssetAddressEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assetService.proto",
}

func init() { proto.RegisterFile("assetService.proto", fileDescriptor_assetService_b46eb289b840a124) }

var fileDescriptor_assetService_b46eb289b840a124 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcb, 0x6a, 0x14, 0x41,
	0x14, 0x86, 0x69, 0x17, 0x22, 0x8d, 0xab, 0x52, 0x51, 0x86, 0x08, 0xd2, 0x22, 0x98, 0xcb, 0x74,
	0xa9, 0xc9, 0x4a, 0x08, 0x71, 0x02, 0x12, 0xc5, 0x2b, 0x3a, 0x48, 0x70, 0x77, 0xba, 0xfa, 0x4c,
	0x77, 0x91, 0x9e, 0x3a, 0x6d, 0x9d, 0x6a, 0x33, 0x61, 0x98, 0x8d, 0xaf, 0xe0, 0xca, 0x97, 0x50,
	0xdc, 0xb8, 0x13, 0x7c, 0x07, 0x5f, 0xc1, 0x07, 0x91, 0xae, 0x99, 0x4e, 0x4c, 0x1c, 0x26, 0x9d,
	0xec, 0x8a, 0x3a, 0xfc, 0xff, 0xf7, 0xf5, 0xe5, 0x84, 0x02, 0x98, 0xd1, 0xbd, 0x45, 0xfb, 0x51,
	0x2b, 0x8c, 0x4b, 0x4b, 0x8e, 0x44, 0x34, 0x00, 0x6d, 0xf7, 0xe1, 0x40, 0x91, 0x2d, 0xe3, 0xa4,
	0x20, 0xb5, 0xa7, 0x72, 0xd0, 0xc6, 0x0f, 0x93, 0x6a, 0x10, 0x27, 0x4e, 0x75, 0x96, 0x32, 0xa2,
	0xac, 0x40, 0x09, 0xa5, 0x96, 0x60, 0x0c, 0x39, 0x70, 0x9a, 0x0c, 0x4f, 0x1b, 0x3a, 0xd3, 0xd6,
	0x17, 0xc8, 0x0c, 0xd9, 0xac, 0xb5, 0x73, 0x45, 0xd1, 0x70, 0x48, 0xe6, 0xd8, 0xe5, 0x83, 0x9f,
	0x97, 0xc2, 0xcb, 0xbd, 0x7f, 0x0c, 0xc4, 0xd7, 0x20, 0x5c, 0xda, 0x41, 0x83, 0x16, 0x1c, 0xfa,
	0x41, 0x2f, 0x4d, 0x2d, 0x32, 0x3f, 0x36, 0x69, 0x49, 0xda, 0x38, 0xb1, 0x11, 0x9f, 0x6e, 0x17,
	0xbf, 0xac, 0x8a, 0xe2, 0x1d, 0x14, 0x15, 0xbe, 0xc1, 0x0f, 0x15, 0xb2, 0xeb, 0xac, 0xb7, 0x49,
	0xcd, 0x50, 0xcf, 0xf0, 0xc0, 0xcf, 0xa2, 0xdb, 0x9f, 0x7e, 0xff, 0xf9, 0x7c, 0xe1, 0x66, 0x74,
	0x43, 0x26, 0x4e, 0xc9, 0xb1, 0x41, 0xb7, 0x4f, 0x76, 0x6f, 0x22, 0x09, 0x4a, 0x09, 0x69, 0x6a,
	0xf9, 0x61, 0xb0, 0x22, 0xbe, 0x04, 0xa1, 0x78, 0xca, 0x5c, 0x4d, 0x6d, 0x0f, 0x35, 0x5b, 0x01,
	0x5f, 0xf5, 0x5e, 0xfb, 0x68, 0x63, 0xb9, 0xdc, 0x32, 0xd4, 0xdf, 0x5d, 0xe8, 0xa6, 0xeb, 0xce,
	0xda, 0xed, 0x47, 0x10, 0x5e, 0xeb, 0x5b, 0x30, 0x3c, 0x40, 0x7b, 0x5c, 0xef, 0x51, 0x1b, 0xd2,
	0xdc, 0xe8, 0x39, 0x5c, 0xef, 0x79, 0xd7, 0x95, 0xe8, 0xce, 0x1c, 0xd7, 0xb1, 0xff, 0x53, 0x74,
	0x3a, 0x91, 0x6e, 0x46, 0xab, 0xc5, 0xbf, 0x05, 0xe1, 0xd5, 0xe7, 0x9a, 0x9d, 0x27, 0xf7, 0x77,
	0x8f, 0xbe, 0xfe, 0x56, 0x1b, 0xea, 0xbc, 0x64, 0xa3, 0xbd, 0xd6, 0xea, 0xc1, 0x47, 0x4f, 0x80,
	0x73, 0xe4, 0xe8, 0xae, 0x37, 0x8f, 0xc4, 0xad, 0xc5, 0xe6, 0x23, 0x16, 0xdf, 0x83, 0x50, 0xec,
	0x60, 0x83, 0x3d, 0xf4, 0xdd, 0x6c, 0x83, 0xfb, 0x3f, 0x77, 0x8e, 0x97, 0x7c, 0xdf, 0xab, 0xae,
	0x8a, 0xe5, 0xd3, 0x54, 0xe5, 0xd8, 0x8d, 0x72, 0xe0, 0x7c, 0x22, 0x7e, 0x05, 0xe1, 0xf5, 0x86,
	0x7d, 0x72, 0xcd, 0xb6, 0xcf, 0x22, 0x7e, 0x22, 0xdc, 0xd8, 0xaf, 0x9e, 0x61, 0xe9, 0xa2, 0x0d,
	0xef, 0x1f, 0x8b, 0xb5, 0x85, 0xfe, 0x7e, 0xed, 0xe4, 0x98, 0xa0, 0xac, 0x4f, 0x93, 0xed, 0xad,
	0xf7, 0x9b, 0x99, 0x76, 0x79, 0x95, 0xc4, 0x8a, 0x86, 0x72, 0x86, 0xeb, 0xd6, 0x3c, 0x79, 0xc4,
	0xeb, 0x36, 0x40, 0xe9, 0x0f, 0xaa, 0x9b, 0xa1, 0xe9, 0x66, 0x54, 0x83, 0x92, 0x8b, 0xfe, 0x6a,
	0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x07, 0xd2, 0xb0, 0x08, 0x05, 0x00, 0x00,
}
