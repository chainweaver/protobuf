// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockchainMessage.proto

package protoc_gen_go // import "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Blockchain struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Height               int32    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash                 string   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Time                 string   `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	LatestUrl            string   `protobuf:"bytes,5,opt,name=latest_url,json=latestUrl,proto3" json:"latest_url,omitempty"`
	PreviousHash         string   `protobuf:"bytes,6,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	PreviousUrl          string   `protobuf:"bytes,7,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
	PeerCount            int32    `protobuf:"varint,8,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	HighFeePerKb         int32    `protobuf:"varint,9,opt,name=high_fee_per_kb,json=highFeePerKb,proto3" json:"high_fee_per_kb,omitempty"`
	MediumFeePerKb       int32    `protobuf:"varint,10,opt,name=medium_fee_per_kb,json=mediumFeePerKb,proto3" json:"medium_fee_per_kb,omitempty"`
	LowFeePerKb          int32    `protobuf:"varint,11,opt,name=low_fee_per_kb,json=lowFeePerKb,proto3" json:"low_fee_per_kb,omitempty"`
	UnconfirmedCount     int32    `protobuf:"varint,12,opt,name=unconfirmed_count,json=unconfirmedCount,proto3" json:"unconfirmed_count,omitempty"`
	LastForkHeight       int32    `protobuf:"varint,13,opt,name=last_fork_height,json=lastForkHeight,proto3" json:"last_fork_height,omitempty"`
	LastForkHash         string   `protobuf:"bytes,14,opt,name=last_fork_hash,json=lastForkHash,proto3" json:"last_fork_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blockchain) Reset()         { *m = Blockchain{} }
func (m *Blockchain) String() string { return proto.CompactTextString(m) }
func (*Blockchain) ProtoMessage()    {}
func (*Blockchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockchainMessage_f1712f8b6bf9123f, []int{0}
}
func (m *Blockchain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blockchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blockchain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Blockchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blockchain.Merge(dst, src)
}
func (m *Blockchain) XXX_Size() int {
	return m.Size()
}
func (m *Blockchain) XXX_DiscardUnknown() {
	xxx_messageInfo_Blockchain.DiscardUnknown(m)
}

var xxx_messageInfo_Blockchain proto.InternalMessageInfo

func (m *Blockchain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Blockchain) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Blockchain) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Blockchain) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Blockchain) GetLatestUrl() string {
	if m != nil {
		return m.LatestUrl
	}
	return ""
}

func (m *Blockchain) GetPreviousHash() string {
	if m != nil {
		return m.PreviousHash
	}
	return ""
}

func (m *Blockchain) GetPreviousUrl() string {
	if m != nil {
		return m.PreviousUrl
	}
	return ""
}

func (m *Blockchain) GetPeerCount() int32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *Blockchain) GetHighFeePerKb() int32 {
	if m != nil {
		return m.HighFeePerKb
	}
	return 0
}

func (m *Blockchain) GetMediumFeePerKb() int32 {
	if m != nil {
		return m.MediumFeePerKb
	}
	return 0
}

func (m *Blockchain) GetLowFeePerKb() int32 {
	if m != nil {
		return m.LowFeePerKb
	}
	return 0
}

func (m *Blockchain) GetUnconfirmedCount() int32 {
	if m != nil {
		return m.UnconfirmedCount
	}
	return 0
}

func (m *Blockchain) GetLastForkHeight() int32 {
	if m != nil {
		return m.LastForkHeight
	}
	return 0
}

func (m *Blockchain) GetLastForkHash() string {
	if m != nil {
		return m.LastForkHash
	}
	return ""
}

type Block struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height               int32    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Depth                int32    `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	Chain                string   `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Total                int32    `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Fees                 int32    `protobuf:"varint,6,opt,name=fees,proto3" json:"fees,omitempty"`
	Size_                int32    `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Ver                  int32    `protobuf:"varint,8,opt,name=ver,proto3" json:"ver,omitempty"`
	Time                 string   `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	ReceivedTime         string   `protobuf:"bytes,10,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	RelayedBy            string   `protobuf:"bytes,11,opt,name=relayed_by,json=relayedBy,proto3" json:"relayed_by,omitempty"`
	Bits                 int32    `protobuf:"varint,12,opt,name=bits,proto3" json:"bits,omitempty"`
	Nonce                int32    `protobuf:"varint,13,opt,name=nonce,proto3" json:"nonce,omitempty"`
	NTx                  int32    `protobuf:"varint,14,opt,name=n_tx,json=nTx,proto3" json:"n_tx,omitempty"`
	PrevBlock            string   `protobuf:"bytes,15,opt,name=prev_block,json=prevBlock,proto3" json:"prev_block,omitempty"`
	PrevBlockUrl         string   `protobuf:"bytes,16,opt,name=prev_block_url,json=prevBlockUrl,proto3" json:"prev_block_url,omitempty"`
	TxUrl                string   `protobuf:"bytes,17,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	MrklRoot             string   `protobuf:"bytes,18,opt,name=mrkl_root,json=mrklRoot,proto3" json:"mrkl_root,omitempty"`
	Txids                []string `protobuf:"bytes,19,rep,name=txids" json:"txids,omitempty"`
	NextTxids            string   `protobuf:"bytes,20,opt,name=next_txids,json=nextTxids,proto3" json:"next_txids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockchainMessage_f1712f8b6bf9123f, []int{1}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Block) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Block) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Block) GetFees() int32 {
	if m != nil {
		return m.Fees
	}
	return 0
}

func (m *Block) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Block) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *Block) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Block) GetReceivedTime() string {
	if m != nil {
		return m.ReceivedTime
	}
	return ""
}

func (m *Block) GetRelayedBy() string {
	if m != nil {
		return m.RelayedBy
	}
	return ""
}

func (m *Block) GetBits() int32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *Block) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Block) GetNTx() int32 {
	if m != nil {
		return m.NTx
	}
	return 0
}

func (m *Block) GetPrevBlock() string {
	if m != nil {
		return m.PrevBlock
	}
	return ""
}

func (m *Block) GetPrevBlockUrl() string {
	if m != nil {
		return m.PrevBlockUrl
	}
	return ""
}

func (m *Block) GetTxUrl() string {
	if m != nil {
		return m.TxUrl
	}
	return ""
}

func (m *Block) GetMrklRoot() string {
	if m != nil {
		return m.MrklRoot
	}
	return ""
}

func (m *Block) GetTxids() []string {
	if m != nil {
		return m.Txids
	}
	return nil
}

func (m *Block) GetNextTxids() string {
	if m != nil {
		return m.NextTxids
	}
	return ""
}

type Feature struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	LastTransitionHeight int64    `protobuf:"varint,3,opt,name=last_transition_height,json=lastTransitionHeight,proto3" json:"last_transition_height,omitempty"`
	LastTransitionHash   string   `protobuf:"bytes,4,opt,name=last_transition_hash,json=lastTransitionHash,proto3" json:"last_transition_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockchainMessage_f1712f8b6bf9123f, []int{2}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(dst, src)
}
func (m *Feature) XXX_Size() int {
	return m.Size()
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Feature) GetLastTransitionHeight() int64 {
	if m != nil {
		return m.LastTransitionHeight
	}
	return 0
}

func (m *Feature) GetLastTransitionHash() string {
	if m != nil {
		return m.LastTransitionHash
	}
	return ""
}

type ChainEndpointRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainEndpointRequest) Reset()         { *m = ChainEndpointRequest{} }
func (m *ChainEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*ChainEndpointRequest) ProtoMessage()    {}
func (*ChainEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockchainMessage_f1712f8b6bf9123f, []int{3}
}
func (m *ChainEndpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainEndpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChainEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainEndpointRequest.Merge(dst, src)
}
func (m *ChainEndpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainEndpointRequest proto.InternalMessageInfo

type BlockHashEndpointRequest struct {
	BlockHash            string   `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHashEndpointRequest) Reset()         { *m = BlockHashEndpointRequest{} }
func (m *BlockHashEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*BlockHashEndpointRequest) ProtoMessage()    {}
func (*BlockHashEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockchainMessage_f1712f8b6bf9123f, []int{4}
}
func (m *BlockHashEndpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHashEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHashEndpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockHashEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHashEndpointRequest.Merge(dst, src)
}
func (m *BlockHashEndpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockHashEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHashEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHashEndpointRequest proto.InternalMessageInfo

func (m *BlockHashEndpointRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type BlockHeightEndpointRequest struct {
	BlockHeight          int32    `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeightEndpointRequest) Reset()         { *m = BlockHeightEndpointRequest{} }
func (m *BlockHeightEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*BlockHeightEndpointRequest) ProtoMessage()    {}
func (*BlockHeightEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockchainMessage_f1712f8b6bf9123f, []int{5}
}
func (m *BlockHeightEndpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeightEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeightEndpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockHeightEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeightEndpointRequest.Merge(dst, src)
}
func (m *BlockHeightEndpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeightEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeightEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeightEndpointRequest proto.InternalMessageInfo

func (m *BlockHeightEndpointRequest) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type FeatureEndpointRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureEndpointRequest) Reset()         { *m = FeatureEndpointRequest{} }
func (m *FeatureEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*FeatureEndpointRequest) ProtoMessage()    {}
func (*FeatureEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_blockchainMessage_f1712f8b6bf9123f, []int{6}
}
func (m *FeatureEndpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureEndpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeatureEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureEndpointRequest.Merge(dst, src)
}
func (m *FeatureEndpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *FeatureEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureEndpointRequest proto.InternalMessageInfo

func (m *FeatureEndpointRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Blockchain)(nil), "fairwaycorp.blockchainprotobuf.Blockchain")
	proto.RegisterType((*Block)(nil), "fairwaycorp.blockchainprotobuf.Block")
	proto.RegisterType((*Feature)(nil), "fairwaycorp.blockchainprotobuf.Feature")
	proto.RegisterType((*ChainEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.ChainEndpointRequest")
	proto.RegisterType((*BlockHashEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest")
	proto.RegisterType((*BlockHeightEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest")
	proto.RegisterType((*FeatureEndpointRequest)(nil), "fairwaycorp.blockchainprotobuf.FeatureEndpointRequest")
}
func (m *Blockchain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blockchain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Height))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Time) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Time)))
		i += copy(dAtA[i:], m.Time)
	}
	if len(m.LatestUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.LatestUrl)))
		i += copy(dAtA[i:], m.LatestUrl)
	}
	if len(m.PreviousHash) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.PreviousHash)))
		i += copy(dAtA[i:], m.PreviousHash)
	}
	if len(m.PreviousUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.PreviousUrl)))
		i += copy(dAtA[i:], m.PreviousUrl)
	}
	if m.PeerCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.PeerCount))
	}
	if m.HighFeePerKb != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.HighFeePerKb))
	}
	if m.MediumFeePerKb != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.MediumFeePerKb))
	}
	if m.LowFeePerKb != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.LowFeePerKb))
	}
	if m.UnconfirmedCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.UnconfirmedCount))
	}
	if m.LastForkHeight != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.LastForkHeight))
	}
	if len(m.LastForkHash) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.LastForkHash)))
		i += copy(dAtA[i:], m.LastForkHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Height))
	}
	if m.Depth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Depth))
	}
	if len(m.Chain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Chain)))
		i += copy(dAtA[i:], m.Chain)
	}
	if m.Total != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Total))
	}
	if m.Fees != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Fees))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Size_))
	}
	if m.Ver != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Ver))
	}
	if len(m.Time) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Time)))
		i += copy(dAtA[i:], m.Time)
	}
	if len(m.ReceivedTime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.ReceivedTime)))
		i += copy(dAtA[i:], m.ReceivedTime)
	}
	if len(m.RelayedBy) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.RelayedBy)))
		i += copy(dAtA[i:], m.RelayedBy)
	}
	if m.Bits != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Bits))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.Nonce))
	}
	if m.NTx != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.NTx))
	}
	if len(m.PrevBlock) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.PrevBlock)))
		i += copy(dAtA[i:], m.PrevBlock)
	}
	if len(m.PrevBlockUrl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.PrevBlockUrl)))
		i += copy(dAtA[i:], m.PrevBlockUrl)
	}
	if len(m.TxUrl) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.TxUrl)))
		i += copy(dAtA[i:], m.TxUrl)
	}
	if len(m.MrklRoot) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.MrklRoot)))
		i += copy(dAtA[i:], m.MrklRoot)
	}
	if len(m.Txids) > 0 {
		for _, s := range m.Txids {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NextTxids) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.NextTxids)))
		i += copy(dAtA[i:], m.NextTxids)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.LastTransitionHeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.LastTransitionHeight))
	}
	if len(m.LastTransitionHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.LastTransitionHash)))
		i += copy(dAtA[i:], m.LastTransitionHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainEndpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainEndpointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockHashEndpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHashEndpointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockHeightEndpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeightEndpointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FeatureEndpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureEndpointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockchainMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBlockchainMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Blockchain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.LatestUrl)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.PreviousHash)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.PreviousUrl)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.PeerCount != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.PeerCount))
	}
	if m.HighFeePerKb != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.HighFeePerKb))
	}
	if m.MediumFeePerKb != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.MediumFeePerKb))
	}
	if m.LowFeePerKb != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.LowFeePerKb))
	}
	if m.UnconfirmedCount != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.UnconfirmedCount))
	}
	if m.LastForkHeight != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.LastForkHeight))
	}
	l = len(m.LastForkHash)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Height))
	}
	if m.Depth != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Depth))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Total))
	}
	if m.Fees != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Fees))
	}
	if m.Size_ != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Size_))
	}
	if m.Ver != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Ver))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.ReceivedTime)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.RelayedBy)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.Bits != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Bits))
	}
	if m.Nonce != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.Nonce))
	}
	if m.NTx != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.NTx))
	}
	l = len(m.PrevBlock)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.PrevBlockUrl)
	if l > 0 {
		n += 2 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.TxUrl)
	if l > 0 {
		n += 2 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.MrklRoot)
	if l > 0 {
		n += 2 + l + sovBlockchainMessage(uint64(l))
	}
	if len(m.Txids) > 0 {
		for _, s := range m.Txids {
			l = len(s)
			n += 2 + l + sovBlockchainMessage(uint64(l))
		}
	}
	l = len(m.NextTxids)
	if l > 0 {
		n += 2 + l + sovBlockchainMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.LastTransitionHeight != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.LastTransitionHeight))
	}
	l = len(m.LastTransitionHash)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainEndpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHashEndpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeightEndpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovBlockchainMessage(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeatureEndpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBlockchainMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBlockchainMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlockchainMessage(x uint64) (n int) {
	return sovBlockchainMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Blockchain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blockchain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blockchain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerCount", wireType)
			}
			m.PeerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighFeePerKb", wireType)
			}
			m.HighFeePerKb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighFeePerKb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumFeePerKb", wireType)
			}
			m.MediumFeePerKb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediumFeePerKb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowFeePerKb", wireType)
			}
			m.LowFeePerKb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowFeePerKb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnconfirmedCount", wireType)
			}
			m.UnconfirmedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnconfirmedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastForkHeight", wireType)
			}
			m.LastForkHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastForkHeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastForkHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastForkHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			m.Fees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fees |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			m.Bits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bits |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTx", wireType)
			}
			m.NTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NTx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlockUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MrklRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MrklRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txids = append(m.Txids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTxids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextTxids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionHeight", wireType)
			}
			m.LastTransitionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTransitionHeight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTransitionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainEndpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainEndpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainEndpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHashEndpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHashEndpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHashEndpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeightEndpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeightEndpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeightEndpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureEndpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureEndpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureEndpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockchainMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockchainMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockchainMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockchainMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockchainMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlockchainMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlockchainMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlockchainMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlockchainMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockchainMessage   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("blockchainMessage.proto", fileDescriptor_blockchainMessage_f1712f8b6bf9123f)
}

var fileDescriptor_blockchainMessage_f1712f8b6bf9123f = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcf, 0x6e, 0xfb, 0x44,
	0x10, 0xc6, 0xa4, 0x4e, 0xeb, 0x69, 0x9a, 0x26, 0x26, 0x04, 0x0b, 0xd4, 0xa8, 0x4d, 0x8b, 0x54,
	0x04, 0x69, 0x91, 0xe0, 0xd2, 0x13, 0x52, 0x2b, 0xaa, 0x4a, 0x15, 0x12, 0xb2, 0xc2, 0x85, 0x8b,
	0xe5, 0x3f, 0x93, 0x78, 0x15, 0xc7, 0x1b, 0xd6, 0xeb, 0x34, 0xe1, 0x49, 0x90, 0x78, 0x21, 0x8e,
	0x9c, 0x39, 0xa1, 0xf2, 0x06, 0x3c, 0xc1, 0x4f, 0x33, 0xeb, 0x38, 0x51, 0x7e, 0xfd, 0xdd, 0x66,
	0xbe, 0xf9, 0x66, 0x3d, 0x9e, 0xef, 0xdb, 0x85, 0xcf, 0xa2, 0x4c, 0xc6, 0xb3, 0x38, 0x0d, 0x45,
	0xfe, 0x13, 0x16, 0x45, 0x38, 0xc5, 0x9b, 0x85, 0x92, 0x5a, 0xba, 0x83, 0x49, 0x28, 0xd4, 0x4b,
	0xb8, 0x8e, 0xa5, 0x5a, 0xdc, 0x6c, 0x49, 0x5c, 0x8c, 0xca, 0xc9, 0xf0, 0x9f, 0x06, 0xc0, 0x7d,
	0x0d, 0xbb, 0x2e, 0x1c, 0xe4, 0xe1, 0x1c, 0x3d, 0xeb, 0xdc, 0xba, 0x76, 0x7c, 0x8e, 0xdd, 0x3e,
	0x34, 0x53, 0x14, 0xd3, 0x54, 0x7b, 0x1f, 0x9f, 0x5b, 0xd7, 0xb6, 0x5f, 0x65, 0xc4, 0x4d, 0xc3,
	0x22, 0xf5, 0x1a, 0x86, 0x4b, 0x31, 0x61, 0x5a, 0xcc, 0xd1, 0x3b, 0x30, 0x18, 0xc5, 0xee, 0x19,
	0x40, 0x16, 0x6a, 0x2c, 0x74, 0x50, 0xaa, 0xcc, 0xb3, 0xb9, 0xe2, 0x18, 0xe4, 0x17, 0x95, 0xb9,
	0x97, 0x70, 0xb2, 0x50, 0xb8, 0x14, 0xb2, 0x2c, 0x02, 0x3e, 0xaf, 0xc9, 0x8c, 0xd6, 0x06, 0x7c,
	0xa2, 0x73, 0x2f, 0xa0, 0xce, 0xf9, 0x94, 0x43, 0xe6, 0x1c, 0x6f, 0x30, 0x3a, 0xe7, 0x0c, 0x60,
	0x81, 0xa8, 0x82, 0x58, 0x96, 0xb9, 0xf6, 0x8e, 0x78, 0x54, 0x87, 0x90, 0x07, 0x02, 0xdc, 0x2f,
	0xe1, 0x34, 0x15, 0xd3, 0x34, 0x98, 0x20, 0x06, 0x0b, 0x54, 0xc1, 0x2c, 0xf2, 0x1c, 0xe6, 0xb4,
	0x08, 0x7e, 0x44, 0xfc, 0x19, 0xd5, 0x73, 0xe4, 0x7e, 0x05, 0xdd, 0x39, 0x26, 0xa2, 0x9c, 0xef,
	0x12, 0x81, 0x89, 0x6d, 0x53, 0xa8, 0xa9, 0x97, 0xd0, 0xce, 0xe4, 0xcb, 0x2e, 0xef, 0x98, 0x79,
	0xc7, 0x99, 0x7c, 0xa9, 0x49, 0x5f, 0x43, 0xb7, 0xcc, 0x63, 0x99, 0x4f, 0x84, 0x9a, 0x63, 0x52,
	0x0d, 0xd7, 0x62, 0x5e, 0x67, 0xa7, 0x60, 0x66, 0xbc, 0x86, 0x4e, 0x16, 0x16, 0x3a, 0x98, 0x48,
	0x35, 0x0b, 0xaa, 0x9d, 0x9f, 0x98, 0x6f, 0x13, 0xfe, 0x28, 0xd5, 0xec, 0xc9, 0xec, 0xfe, 0x0a,
	0xda, 0x3b, 0x4c, 0xda, 0x5a, 0xdb, 0x6c, 0xad, 0xe6, 0x85, 0x45, 0x3a, 0xfc, 0xbf, 0x01, 0x36,
	0x8b, 0x5b, 0x6b, 0x65, 0xed, 0x68, 0xf5, 0x21, 0x5d, 0x7b, 0x60, 0x27, 0xb8, 0xd0, 0x46, 0x58,
	0xdb, 0x37, 0x09, 0xa1, 0x6c, 0x91, 0x4a, 0x5a, 0x93, 0x10, 0xaa, 0xa5, 0x0e, 0x8d, 0xac, 0xb6,
	0x6f, 0x12, 0xfa, 0xda, 0x04, 0xb1, 0x60, 0x25, 0x6d, 0x9f, 0x63, 0xc2, 0x0a, 0xf1, 0x3b, 0xb2,
	0x72, 0xb6, 0xcf, 0xb1, 0xdb, 0x81, 0xc6, 0x12, 0x55, 0xa5, 0x15, 0x85, 0xb5, 0x7f, 0x9c, 0x1d,
	0xff, 0x5c, 0xc2, 0x89, 0xc2, 0x18, 0xc5, 0x12, 0x93, 0x80, 0x8b, 0x60, 0x7e, 0x75, 0x03, 0x8e,
	0x2b, 0x93, 0x29, 0xcc, 0xc2, 0x35, 0x26, 0x41, 0xb4, 0x66, 0x21, 0x1c, 0xdf, 0xa9, 0x90, 0xfb,
	0x35, 0x9d, 0x1b, 0x09, 0x5d, 0x54, 0x9b, 0xe7, 0x98, 0x66, 0xcf, 0x65, 0x1e, 0x63, 0xb5, 0x62,
	0x93, 0xb8, 0x5d, 0x38, 0xc8, 0x03, 0xbd, 0xe2, 0x7d, 0xda, 0x7e, 0x23, 0x1f, 0xaf, 0xd8, 0x59,
	0x0a, 0x97, 0x01, 0x5f, 0x1f, 0xef, 0xd4, 0x9c, 0x4d, 0x88, 0xd9, 0xed, 0x15, 0xb4, 0xb7, 0x65,
	0x76, 0x67, 0x67, 0xeb, 0x60, 0xa6, 0x90, 0x3d, 0x3f, 0x85, 0xa6, 0x5e, 0x71, 0xb5, 0x6b, 0x16,
	0xa8, 0x57, 0x04, 0x7f, 0x01, 0xce, 0x5c, 0xcd, 0xb2, 0x40, 0x49, 0xa9, 0x3d, 0x97, 0x2b, 0x47,
	0x04, 0xf8, 0x52, 0xb2, 0x12, 0x7a, 0x25, 0x92, 0xc2, 0xfb, 0xe4, 0xbc, 0x61, 0x5a, 0x44, 0x52,
	0xd0, 0x38, 0x39, 0xae, 0x74, 0x60, 0x4a, 0x3d, 0x33, 0x0e, 0x21, 0x63, 0x02, 0x86, 0x7f, 0x5a,
	0x70, 0xf8, 0x88, 0xa1, 0x2e, 0x15, 0xbe, 0x79, 0x9d, 0x7b, 0x60, 0x17, 0x3a, 0xd4, 0xc8, 0xaa,
	0x3b, 0xbe, 0x49, 0xdc, 0xef, 0xa1, 0xcf, 0x86, 0xd2, 0x2a, 0xcc, 0x0b, 0xa1, 0x85, 0xcc, 0x37,
	0x06, 0x24, 0x17, 0x34, 0xfc, 0x1e, 0x55, 0xc7, 0x75, 0xb1, 0xb2, 0xe1, 0xb7, 0xd0, 0x7b, 0xaf,
	0x8b, 0x6c, 0x66, 0x3c, 0xe2, 0xee, 0xf5, 0x90, 0x25, 0xfb, 0xd0, 0x7b, 0x20, 0xe7, 0xfc, 0x98,
	0x27, 0x0b, 0x29, 0x72, 0xed, 0xe3, 0x6f, 0x25, 0x16, 0x7a, 0x78, 0x07, 0x1e, 0xaf, 0x8a, 0x48,
	0x7b, 0x35, 0xfa, 0x61, 0xb3, 0xdb, 0x1d, 0x0b, 0x3b, 0xd1, 0x86, 0x3d, 0xfc, 0x01, 0x3e, 0x37,
	0xad, 0x3c, 0xd3, 0x7e, 0xf3, 0x05, 0xb4, 0xaa, 0x66, 0xf3, 0x3b, 0x96, 0xb9, 0xa3, 0xd1, 0xb6,
	0x63, 0xf8, 0x0d, 0xf4, 0xab, 0x85, 0xed, 0x37, 0xbf, 0xb1, 0xbf, 0xfb, 0xe7, 0xbf, 0x5e, 0x07,
	0xd6, 0xdf, 0xaf, 0x03, 0xeb, 0xdf, 0xd7, 0x81, 0xf5, 0xc7, 0x7f, 0x83, 0x8f, 0x7e, 0xbd, 0x9b,
	0x0a, 0x9d, 0x96, 0xd1, 0x4d, 0x2c, 0xe7, 0xb7, 0xd5, 0x73, 0x3b, 0xa2, 0xf7, 0xf6, 0x76, 0xfb,
	0xde, 0x8e, 0x36, 0x0f, 0xee, 0x2d, 0x07, 0xf1, 0x68, 0x8a, 0xf9, 0x68, 0x2a, 0xa3, 0x26, 0xa7,
	0xdf, 0xbd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x36, 0x92, 0x7d, 0x8b, 0xc0, 0x05, 0x00, 0x00,
}
