// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commonMessage.proto

package protoc_gen_go

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NullValue struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullValue) Reset()         { *m = NullValue{} }
func (m *NullValue) String() string { return proto.CompactTextString(m) }
func (*NullValue) ProtoMessage()    {}
func (*NullValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{0}
}

func (m *NullValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullValue.Unmarshal(m, b)
}
func (m *NullValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullValue.Marshal(b, m, deterministic)
}
func (m *NullValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullValue.Merge(m, src)
}
func (m *NullValue) XXX_Size() int {
	return xxx_messageInfo_NullValue.Size(m)
}
func (m *NullValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NullValue.DiscardUnknown(m)
}

var xxx_messageInfo_NullValue proto.InternalMessageInfo

type ArrayString struct {
	Arraystring          []string `protobuf:"bytes,1,rep,name=arraystring,proto3" json:"arraystring,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayString) Reset()         { *m = ArrayString{} }
func (m *ArrayString) String() string { return proto.CompactTextString(m) }
func (*ArrayString) ProtoMessage()    {}
func (*ArrayString) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{1}
}

func (m *ArrayString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayString.Unmarshal(m, b)
}
func (m *ArrayString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayString.Marshal(b, m, deterministic)
}
func (m *ArrayString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayString.Merge(m, src)
}
func (m *ArrayString) XXX_Size() int {
	return xxx_messageInfo_ArrayString.Size(m)
}
func (m *ArrayString) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayString.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayString proto.InternalMessageInfo

func (m *ArrayString) GetArraystring() []string {
	if m != nil {
		return m.Arraystring
	}
	return nil
}

type TXInput struct {
	// The previous transaction hash where this input was an output. Not present for coinbase transactions.
	PrevHash string `protobuf:"bytes,1,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	// The index of the output being spent within the previous transaction. Not present for coinbase transactions.
	OutputIndex int32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// The value of the output being spent within the previous transaction. Not present for coinbase transactions.
	OutputValue int32 `protobuf:"varint,3,opt,name=output_value,json=outputValue,proto3" json:"output_value,omitempty"`
	// The type of script that encumbers the output corresponding to this input.
	ScriptType string `protobuf:"bytes,4,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	// Raw hexadecimal encoding of the script.
	Script string `protobuf:"bytes,5,opt,name=script,proto3" json:"script,omitempty"`
	// An array of public addresses associated with the output of the previous transaction.
	Addresses []string `protobuf:"bytes,6,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Legacy 4-byte sequence number, not usually relevant unless dealing with locktime encumbrances.
	Sequence int32 `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Optional Number of confirmations of the previous transaction for which this input was an output. Currently, only returned in unconfirmed transactions.
	Age int32 `protobuf:"varint,8,opt,name=age,proto3" json:"age,omitempty"`
	// Optional Name of Wallet or HDWallet from which to derive inputs. Only used when constructing transactions via the Creating Transactions process.
	WalletName string `protobuf:"bytes,9,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// Optional Token associated with Wallet or HDWallet used to derive inputs. Only used when constructing transactions via the Creating Transactions process.
	WalletToken          string   `protobuf:"bytes,10,opt,name=wallet_token,json=walletToken,proto3" json:"wallet_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXInput) Reset()         { *m = TXInput{} }
func (m *TXInput) String() string { return proto.CompactTextString(m) }
func (*TXInput) ProtoMessage()    {}
func (*TXInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{2}
}

func (m *TXInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXInput.Unmarshal(m, b)
}
func (m *TXInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXInput.Marshal(b, m, deterministic)
}
func (m *TXInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXInput.Merge(m, src)
}
func (m *TXInput) XXX_Size() int {
	return xxx_messageInfo_TXInput.Size(m)
}
func (m *TXInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TXInput.DiscardUnknown(m)
}

var xxx_messageInfo_TXInput proto.InternalMessageInfo

func (m *TXInput) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *TXInput) GetOutputIndex() int32 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *TXInput) GetOutputValue() int32 {
	if m != nil {
		return m.OutputValue
	}
	return 0
}

func (m *TXInput) GetScriptType() string {
	if m != nil {
		return m.ScriptType
	}
	return ""
}

func (m *TXInput) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *TXInput) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TXInput) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *TXInput) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *TXInput) GetWalletName() string {
	if m != nil {
		return m.WalletName
	}
	return ""
}

func (m *TXInput) GetWalletToken() string {
	if m != nil {
		return m.WalletToken
	}
	return ""
}

type TXOutput struct {
	// Value in this transaction output, in satoshis.
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Raw hexadecimal encoding of the encumbrance script for this output.
	Script string `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// Addresses that correspond to this output; typically this will only have a single address, and you can think of this output as having “sent” value to the address contained herein.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The type of encumbrance script used for this output.
	ScriptType string `protobuf:"bytes,4,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	// Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed.
	SpentBy string `protobuf:"bytes,5,opt,name=spent_by,json=spentBy,proto3" json:"spent_by,omitempty"`
	// Optional A hex-encoded representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data.
	DataHex string `protobuf:"bytes,6,opt,name=data_hex,json=dataHex,proto3" json:"data_hex,omitempty"`
	// Optional An ASCII representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data and if its data falls into the visible ASCII range.
	DataString           string   `protobuf:"bytes,7,opt,name=data_string,json=dataString,proto3" json:"data_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXOutput) Reset()         { *m = TXOutput{} }
func (m *TXOutput) String() string { return proto.CompactTextString(m) }
func (*TXOutput) ProtoMessage()    {}
func (*TXOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{3}
}

func (m *TXOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXOutput.Unmarshal(m, b)
}
func (m *TXOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXOutput.Marshal(b, m, deterministic)
}
func (m *TXOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXOutput.Merge(m, src)
}
func (m *TXOutput) XXX_Size() int {
	return xxx_messageInfo_TXOutput.Size(m)
}
func (m *TXOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TXOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TXOutput proto.InternalMessageInfo

func (m *TXOutput) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TXOutput) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *TXOutput) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TXOutput) GetScriptType() string {
	if m != nil {
		return m.ScriptType
	}
	return ""
}

func (m *TXOutput) GetSpentBy() string {
	if m != nil {
		return m.SpentBy
	}
	return ""
}

func (m *TXOutput) GetDataHex() string {
	if m != nil {
		return m.DataHex
	}
	return ""
}

func (m *TXOutput) GetDataString() string {
	if m != nil {
		return m.DataString
	}
	return ""
}

type TX struct {
	//	Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1.
	BlockHeight int32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	//The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	//Array of bitcoin public addresses involved in the transaction.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	//The total number of satoshis exchanged in this transaction.
	Total int32 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	//The total number of fees—in satoshis—collected by miners in this transaction.
	Fees int32 `protobuf:"varint,5,opt,name=fees,proto3" json:"fees,omitempty"`
	//The size of the transaction in bytes.
	Size int32 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	//The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low.
	Preference string `protobuf:"bytes,7,opt,name=preference,proto3" json:"preference,omitempty"`
	//Address of the peer that sent Block’s servers this transaction.
	RelayedBy string `protobuf:"bytes,8,opt,name=relayed_by,json=relayedBy,proto3" json:"relayed_by,omitempty"`
	//Time this transaction was received by Block’s servers.
	Received *timestamp.Timestamp `protobuf:"bytes,9,opt,name=received,proto3" json:"received,omitempty"`
	//Version number, typically 1 for Bitcoin transactions.
	Ver int32 `protobuf:"varint,10,opt,name=ver,proto3" json:"ver,omitempty"`
	//Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time.
	LockTime int32 `protobuf:"varint,11,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	//true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,12,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	//Total number of inputs in the transaction.
	VinSz int32 `protobuf:"varint,13,opt,name=vin_sz,json=vinSz,proto3" json:"vin_sz,omitempty"`
	//Total number of outputs in the transaction.
	VoutSz int32 `protobuf:"varint,14,opt,name=vout_sz,json=voutSz,proto3" json:"vout_sz,omitempty"`
	//Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
	Confirmations int32 `protobuf:"varint,15,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	//TXInput Array, limited to 20 by default.
	Inputs []*TXInput `protobuf:"bytes,16,rep,name=inputs,proto3" json:"inputs,omitempty"`
	//TXOutput Array, limited to 20 by default.
	Outputs []*TXOutput `protobuf:"bytes,17,rep,name=outputs,proto3" json:"outputs,omitempty"`
	//Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here.
	OptInRbf bool `protobuf:"varint,18,opt,name=opt_in_rbf,json=optInRbf,proto3" json:"opt_in_rbf,omitempty"`
	//Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
	Confidence float32 `protobuf:"fixed32,19,opt,name=confidence,proto3" json:"confidence,omitempty"`
	//Optional Time at which transaction was included in a block; only present for confirmed transactions.
	Confirmed *timestamp.Timestamp `protobuf:"bytes,20,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	//Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions.
	ReceiveCount int32 `protobuf:"varint,21,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
	//Optional Address Block will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent.
	ChangeAddress string `protobuf:"bytes,22,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	//Optional Hash of the block that contains this transaction; only present for confirmed transactions.
	BlockHash string `protobuf:"bytes,23,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	//Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions.
	BlockIndex int32 `protobuf:"varint,24,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	//Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
	DoubleOf string `protobuf:"bytes,25,opt,name=double_of,json=doubleOf,proto3" json:"double_of,omitempty"`
	//Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni
	DataProtocol string `protobuf:"bytes,26,opt,name=data_protocol,json=dataProtocol,proto3" json:"data_protocol,omitempty"`
	//Optional Hex-encoded bytes of the transaction, as sent over the network.
	Hex string `protobuf:"bytes,27,opt,name=hex,proto3" json:"hex,omitempty"`
	//Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the Block URL to query the next set of TXInputs (within a TX object).
	NextInputs *any.Any `protobuf:"bytes,28,opt,name=next_inputs,json=nextInputs,proto3" json:"next_inputs,omitempty"`
	//Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the Block URL to query the next set of TXOutputs(within a TX object).
	NextOutputs          *any.Any `protobuf:"bytes,29,opt,name=next_outputs,json=nextOutputs,proto3" json:"next_outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TX) Reset()         { *m = TX{} }
func (m *TX) String() string { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()    {}
func (*TX) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{4}
}

func (m *TX) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TX.Unmarshal(m, b)
}
func (m *TX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TX.Marshal(b, m, deterministic)
}
func (m *TX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TX.Merge(m, src)
}
func (m *TX) XXX_Size() int {
	return xxx_messageInfo_TX.Size(m)
}
func (m *TX) XXX_DiscardUnknown() {
	xxx_messageInfo_TX.DiscardUnknown(m)
}

var xxx_messageInfo_TX proto.InternalMessageInfo

func (m *TX) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TX) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TX) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TX) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *TX) GetFees() int32 {
	if m != nil {
		return m.Fees
	}
	return 0
}

func (m *TX) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TX) GetPreference() string {
	if m != nil {
		return m.Preference
	}
	return ""
}

func (m *TX) GetRelayedBy() string {
	if m != nil {
		return m.RelayedBy
	}
	return ""
}

func (m *TX) GetReceived() *timestamp.Timestamp {
	if m != nil {
		return m.Received
	}
	return nil
}

func (m *TX) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *TX) GetLockTime() int32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *TX) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *TX) GetVinSz() int32 {
	if m != nil {
		return m.VinSz
	}
	return 0
}

func (m *TX) GetVoutSz() int32 {
	if m != nil {
		return m.VoutSz
	}
	return 0
}

func (m *TX) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TX) GetInputs() []*TXInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TX) GetOutputs() []*TXOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TX) GetOptInRbf() bool {
	if m != nil {
		return m.OptInRbf
	}
	return false
}

func (m *TX) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *TX) GetConfirmed() *timestamp.Timestamp {
	if m != nil {
		return m.Confirmed
	}
	return nil
}

func (m *TX) GetReceiveCount() int32 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *TX) GetChangeAddress() string {
	if m != nil {
		return m.ChangeAddress
	}
	return ""
}

func (m *TX) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TX) GetBlockIndex() int32 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *TX) GetDoubleOf() string {
	if m != nil {
		return m.DoubleOf
	}
	return ""
}

func (m *TX) GetDataProtocol() string {
	if m != nil {
		return m.DataProtocol
	}
	return ""
}

func (m *TX) GetHex() string {
	if m != nil {
		return m.Hex
	}
	return ""
}

func (m *TX) GetNextInputs() *any.Any {
	if m != nil {
		return m.NextInputs
	}
	return nil
}

func (m *TX) GetNextOutputs() *any.Any {
	if m != nil {
		return m.NextOutputs
	}
	return nil
}

type Wallet struct {
	// User token associated with this wallet.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Name of the wallet.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of addresses associated with this wallet.
	Addresses            []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{5}
}

func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wallet.Unmarshal(m, b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return xxx_messageInfo_Wallet.Size(m)
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Wallet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Wallet) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type HDWallet struct {
	// User token associated with this HD wallet.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Name of the HD wallet.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of HD chains associated with this wallet, each containing HDAddresses. A single chain is returned if the wallet has no subchains.
	Chains []*HDChain `protobuf:"bytes,3,rep,name=chains,proto3" json:"chains,omitempty"`
	// true for HD wallets, not present for normal wallets.
	Hd bool `protobuf:"varint,4,opt,name=hd,proto3" json:"hd,omitempty"`
	// The extended public key all addresses in the HD wallet are derived from. It’s encoded in BIP32 format
	ExtendedPublicKey string `protobuf:"bytes,5,opt,name=extended_public_key,json=extendedPublicKey,proto3" json:"extended_public_key,omitempty"`
	// optional returned for HD wallets created with subchains.
	SubchainIndexes      []int32  `protobuf:"varint,6,rep,packed,name=subchain_indexes,json=subchainIndexes,proto3" json:"subchain_indexes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HDWallet) Reset()         { *m = HDWallet{} }
func (m *HDWallet) String() string { return proto.CompactTextString(m) }
func (*HDWallet) ProtoMessage()    {}
func (*HDWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{6}
}

func (m *HDWallet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HDWallet.Unmarshal(m, b)
}
func (m *HDWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HDWallet.Marshal(b, m, deterministic)
}
func (m *HDWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDWallet.Merge(m, src)
}
func (m *HDWallet) XXX_Size() int {
	return xxx_messageInfo_HDWallet.Size(m)
}
func (m *HDWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_HDWallet.DiscardUnknown(m)
}

var xxx_messageInfo_HDWallet proto.InternalMessageInfo

func (m *HDWallet) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *HDWallet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HDWallet) GetChains() []*HDChain {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *HDWallet) GetHd() bool {
	if m != nil {
		return m.Hd
	}
	return false
}

func (m *HDWallet) GetExtendedPublicKey() string {
	if m != nil {
		return m.ExtendedPublicKey
	}
	return ""
}

func (m *HDWallet) GetSubchainIndexes() []int32 {
	if m != nil {
		return m.SubchainIndexes
	}
	return nil
}

type HDChain struct {
	// Array of HDAddresses associated with this subchain.
	ChainAddresses []*HDAddress `protobuf:"bytes,1,rep,name=chain_addresses,json=chainAddresses,proto3" json:"chain_addresses,omitempty"`
	// optional Index of the subchain, returned if the wallet has subchains.
	Index                int64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HDChain) Reset()         { *m = HDChain{} }
func (m *HDChain) String() string { return proto.CompactTextString(m) }
func (*HDChain) ProtoMessage()    {}
func (*HDChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{7}
}

func (m *HDChain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HDChain.Unmarshal(m, b)
}
func (m *HDChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HDChain.Marshal(b, m, deterministic)
}
func (m *HDChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDChain.Merge(m, src)
}
func (m *HDChain) XXX_Size() int {
	return xxx_messageInfo_HDChain.Size(m)
}
func (m *HDChain) XXX_DiscardUnknown() {
	xxx_messageInfo_HDChain.DiscardUnknown(m)
}

var xxx_messageInfo_HDChain proto.InternalMessageInfo

func (m *HDChain) GetChainAddresses() []*HDAddress {
	if m != nil {
		return m.ChainAddresses
	}
	return nil
}

func (m *HDChain) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Address struct {
	// Optional The requested address. Not returned if querying a wallet/HD wallet.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Optional The requested wallet object. Only returned if querying by wallet name instead of public address.
	Wallet *Wallet `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	// Optional The requested HD wallet object. Only returned if querying by HD wallet name instead of public address.
	HdWallet *HDWallet `protobuf:"bytes,3,opt,name=hd_wallet,json=hdWallet,proto3" json:"hd_wallet,omitempty"`
	// Total amount of confirmed satoshis received by this address.
	TotalReceived int32 `protobuf:"varint,4,opt,name=total_received,json=totalReceived,proto3" json:"total_received,omitempty"`
	// Total amount of confirmed satoshis sent by this address.
	TotalSent int32 `protobuf:"varint,5,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	// Balance of confirmed satoshis on this address. This is the difference between outputs and inputs on this address, but only for transactions that have been included into a block (i.e., for transactions whose confirmations > 0).
	Balance int32 `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
	// Balance of unconfirmed satoshis on this address. Can be negative (if unconfirmed transactions are just spending outputs). Only unconfirmed transactions (haven’t made it into a block) are included.
	UnconfirmedBalance int32 `protobuf:"varint,7,opt,name=unconfirmed_balance,json=unconfirmedBalance,proto3" json:"unconfirmed_balance,omitempty"`
	// Total balance of satoshis, including confirmed and unconfirmed transactions, for this address.
	FinalBalance int32 `protobuf:"varint,8,opt,name=final_balance,json=finalBalance,proto3" json:"final_balance,omitempty"`
	// Number of confirmed transactions on this address. Only transactions that have made it into a block (confirmations > 0) are counted.
	NTx int32 `protobuf:"varint,9,opt,name=n_tx,json=nTx,proto3" json:"n_tx,omitempty"`
	// Number of unconfirmed transactions for this address. Only unconfirmed transactions (confirmations == 0) are counted.
	UnconfirmedNTx int32 `protobuf:"varint,10,opt,name=unconfirmed_n_tx,json=unconfirmedNTx,proto3" json:"unconfirmed_n_tx,omitempty"`
	// Final number of transactions, including confirmed and unconfirmed transactions, for this address.
	FinalNTx int32 `protobuf:"varint,11,opt,name=final_n_tx,json=finalNTx,proto3" json:"final_n_tx,omitempty"`
	// Optional To retrieve base URL transactions. To get the full URL, concatenate this URL with a transaction’s hash.
	TxUrl string `protobuf:"bytes,12,opt,name=tx_url,json=txUrl,proto3" json:"tx_url,omitempty"`
	// Array of full transaction details associated with this address. Usually only returned from the Address Full Endpoint.
	Txs []*TX `protobuf:"bytes,13,rep,name=txs,proto3" json:"txs,omitempty"`
	// Optional Array of transaction inputs and outputs for this address. Usually only returned from the standard Address Endpoint.
	Txrefs []*TXRef `protobuf:"bytes,14,rep,name=txrefs,proto3" json:"txrefs,omitempty"`
	// Optional All unconfirmed transaction inputs and outputs for this address. Usually only returned from the standard Address Endpoint.
	UnconfirmedTxrefs []*TXRef `protobuf:"bytes,15,rep,name=unconfirmed_txrefs,json=unconfirmedTxrefs,proto3" json:"unconfirmed_txrefs,omitempty"`
	// Optional If true, then the Address object contains more transactions than shown. Useful for determining whether to poll the API for more transaction information.
	HasMore              bool     `protobuf:"varint,16,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{8}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Address) GetHdWallet() *HDWallet {
	if m != nil {
		return m.HdWallet
	}
	return nil
}

func (m *Address) GetTotalReceived() int32 {
	if m != nil {
		return m.TotalReceived
	}
	return 0
}

func (m *Address) GetTotalSent() int32 {
	if m != nil {
		return m.TotalSent
	}
	return 0
}

func (m *Address) GetBalance() int32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Address) GetUnconfirmedBalance() int32 {
	if m != nil {
		return m.UnconfirmedBalance
	}
	return 0
}

func (m *Address) GetFinalBalance() int32 {
	if m != nil {
		return m.FinalBalance
	}
	return 0
}

func (m *Address) GetNTx() int32 {
	if m != nil {
		return m.NTx
	}
	return 0
}

func (m *Address) GetUnconfirmedNTx() int32 {
	if m != nil {
		return m.UnconfirmedNTx
	}
	return 0
}

func (m *Address) GetFinalNTx() int32 {
	if m != nil {
		return m.FinalNTx
	}
	return 0
}

func (m *Address) GetTxUrl() string {
	if m != nil {
		return m.TxUrl
	}
	return ""
}

func (m *Address) GetTxs() []*TX {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Address) GetTxrefs() []*TXRef {
	if m != nil {
		return m.Txrefs
	}
	return nil
}

func (m *Address) GetUnconfirmedTxrefs() []*TXRef {
	if m != nil {
		return m.UnconfirmedTxrefs
	}
	return nil
}

func (m *Address) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type HDAddress struct {
	// Standard address representation.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The BIP32 path of the HD address.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// optional Contains the hex-encoded public key if returned by Derive Address in Wallet endpoint.
	Public               string   `protobuf:"bytes,3,opt,name=public,proto3" json:"public,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HDAddress) Reset()         { *m = HDAddress{} }
func (m *HDAddress) String() string { return proto.CompactTextString(m) }
func (*HDAddress) ProtoMessage()    {}
func (*HDAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{9}
}

func (m *HDAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HDAddress.Unmarshal(m, b)
}
func (m *HDAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HDAddress.Marshal(b, m, deterministic)
}
func (m *HDAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDAddress.Merge(m, src)
}
func (m *HDAddress) XXX_Size() int {
	return xxx_messageInfo_HDAddress.Size(m)
}
func (m *HDAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_HDAddress.DiscardUnknown(m)
}

var xxx_messageInfo_HDAddress proto.InternalMessageInfo

func (m *HDAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *HDAddress) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HDAddress) GetPublic() string {
	if m != nil {
		return m.Public
	}
	return ""
}

type AddressKeychain struct {
	// Standard address representation.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex-encoded Public key.
	Public string `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
	// Hex-encoded Private key.
	Private string `protobuf:"bytes,3,opt,name=private,proto3" json:"private,omitempty"`
	// Wallet import format, a common encoding for the private key.
	Wif string `protobuf:"bytes,4,opt,name=wif,proto3" json:"wif,omitempty"`
	// Optional Array of public keys to provide to generate a multisig address.
	Pubkeys []string `protobuf:"bytes,5,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	// Optional If generating a multisig address, the type of multisig script; typically “multisig-n-of-m”, where n and m are integers.
	ScriptType string `protobuf:"bytes,6,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	// Optional If generating an OAP address, this represents the parent blockchain’s underlying address (the typical address listed above).
	OriginalAddress string `protobuf:"bytes,7,opt,name=original_address,json=originalAddress,proto3" json:"original_address,omitempty"`
	// Optional The OAP address, if generated using the Generate Asset Address Endpoint.
	OapAddress           string   `protobuf:"bytes,8,opt,name=oap_address,json=oapAddress,proto3" json:"oap_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressKeychain) Reset()         { *m = AddressKeychain{} }
func (m *AddressKeychain) String() string { return proto.CompactTextString(m) }
func (*AddressKeychain) ProtoMessage()    {}
func (*AddressKeychain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{10}
}

func (m *AddressKeychain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressKeychain.Unmarshal(m, b)
}
func (m *AddressKeychain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressKeychain.Marshal(b, m, deterministic)
}
func (m *AddressKeychain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressKeychain.Merge(m, src)
}
func (m *AddressKeychain) XXX_Size() int {
	return xxx_messageInfo_AddressKeychain.Size(m)
}
func (m *AddressKeychain) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressKeychain.DiscardUnknown(m)
}

var xxx_messageInfo_AddressKeychain proto.InternalMessageInfo

func (m *AddressKeychain) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressKeychain) GetPublic() string {
	if m != nil {
		return m.Public
	}
	return ""
}

func (m *AddressKeychain) GetPrivate() string {
	if m != nil {
		return m.Private
	}
	return ""
}

func (m *AddressKeychain) GetWif() string {
	if m != nil {
		return m.Wif
	}
	return ""
}

func (m *AddressKeychain) GetPubkeys() []string {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *AddressKeychain) GetScriptType() string {
	if m != nil {
		return m.ScriptType
	}
	return ""
}

func (m *AddressKeychain) GetOriginalAddress() string {
	if m != nil {
		return m.OriginalAddress
	}
	return ""
}

func (m *AddressKeychain) GetOapAddress() string {
	if m != nil {
		return m.OapAddress
	}
	return ""
}

type TXRef struct {
	//	Optional The address associated with this transaction input/output. Only returned when querying an address endpoint via a wallet/HD wallet name.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	//Height of the block that contains this transaction input/output. If it’s unconfirmed, this will equal -1.
	BlockHeight int32 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	//	The hash of the transaction containing this input/output. While reasonably unique, using hashes as identifiers may be unsafe.
	TxHash string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	//Index of this input in the enclosing transaction. It’s a negative number for an output.
	TxInputN int32 `protobuf:"varint,4,opt,name=tx_input_n,json=txInputN,proto3" json:"tx_input_n,omitempty"`
	//Index of this output in the enclosing transaction. It’s a negative number for an input.
	TxOutputN int32 `protobuf:"varint,5,opt,name=tx_output_n,json=txOutputN,proto3" json:"tx_output_n,omitempty"`
	//The value transfered by this input/output in satoshis exchanged in the enclosing transaction.
	Value int32 `protobuf:"varint,6,opt,name=value,proto3" json:"value,omitempty"`
	//	The likelihood that the enclosing transaction will make it to the next block; reflects the preference level miners have to include the enclosing transaction. Can be high, medium or low.
	Preference string `protobuf:"bytes,7,opt,name=preference,proto3" json:"preference,omitempty"`
	//	true if this is an output and was spent. If it’s an input, or an unspent output, it will be false.
	Spent bool `protobuf:"varint,8,opt,name=spent,proto3" json:"spent,omitempty"`
	//	true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,9,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	//	Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
	Confirmations int32 `protobuf:"varint,10,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	//Optional Raw, hex-encoded script of this input/output.
	Script string `protobuf:"bytes,11,opt,name=script,proto3" json:"script,omitempty"`
	//Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions.
	RefBalance int32 `protobuf:"varint,12,opt,name=ref_balance,json=refBalance,proto3" json:"ref_balance,omitempty"`
	//	Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
	Confidence float32 `protobuf:"fixed32,13,opt,name=confidence,proto3" json:"confidence,omitempty"`
	//Optional Time at which transaction was included in a block; only present for confirmed transactions.
	Confirmed *timestamp.Timestamp `protobuf:"bytes,14,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	//Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed.
	SpentBy string `protobuf:"bytes,15,opt,name=spent_by,json=spentBy,proto3" json:"spent_by,omitempty"`
	//Optional Time this transaction was received by Block’s servers; only present for unconfirmed transactions.
	Received *timestamp.Timestamp `protobuf:"bytes,16,opt,name=received,proto3" json:"received,omitempty"`
	//Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions.
	ReceiveCount int32 `protobuf:"varint,17,opt,name=receive_count,json=receiveCount,proto3" json:"receive_count,omitempty"`
	//Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
	DoubleOf             string   `protobuf:"bytes,18,opt,name=double_of,json=doubleOf,proto3" json:"double_of,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXRef) Reset()         { *m = TXRef{} }
func (m *TXRef) String() string { return proto.CompactTextString(m) }
func (*TXRef) ProtoMessage()    {}
func (*TXRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{11}
}

func (m *TXRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXRef.Unmarshal(m, b)
}
func (m *TXRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXRef.Marshal(b, m, deterministic)
}
func (m *TXRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXRef.Merge(m, src)
}
func (m *TXRef) XXX_Size() int {
	return xxx_messageInfo_TXRef.Size(m)
}
func (m *TXRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TXRef.DiscardUnknown(m)
}

var xxx_messageInfo_TXRef proto.InternalMessageInfo

func (m *TXRef) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TXRef) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TXRef) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TXRef) GetTxInputN() int32 {
	if m != nil {
		return m.TxInputN
	}
	return 0
}

func (m *TXRef) GetTxOutputN() int32 {
	if m != nil {
		return m.TxOutputN
	}
	return 0
}

func (m *TXRef) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TXRef) GetPreference() string {
	if m != nil {
		return m.Preference
	}
	return ""
}

func (m *TXRef) GetSpent() bool {
	if m != nil {
		return m.Spent
	}
	return false
}

func (m *TXRef) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *TXRef) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TXRef) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *TXRef) GetRefBalance() int32 {
	if m != nil {
		return m.RefBalance
	}
	return 0
}

func (m *TXRef) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *TXRef) GetConfirmed() *timestamp.Timestamp {
	if m != nil {
		return m.Confirmed
	}
	return nil
}

func (m *TXRef) GetSpentBy() string {
	if m != nil {
		return m.SpentBy
	}
	return ""
}

func (m *TXRef) GetReceived() *timestamp.Timestamp {
	if m != nil {
		return m.Received
	}
	return nil
}

func (m *TXRef) GetReceiveCount() int32 {
	if m != nil {
		return m.ReceiveCount
	}
	return 0
}

func (m *TXRef) GetDoubleOf() string {
	if m != nil {
		return m.DoubleOf
	}
	return ""
}

type OAPIssue struct {
	// The private key being used to issue or transfer assets.
	FromPrivate string `protobuf:"bytes,1,opt,name=from_private,json=fromPrivate,proto3" json:"from_private,omitempty"`
	// The target OAP address assets for issue or transfer.
	ToAddress string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// The amount of assets being issued or transfered.
	Amount int32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional Hex-encoded metadata that can optionally be encoded into the issue or transfer transaction.
	Metadata             string   `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAPIssue) Reset()         { *m = OAPIssue{} }
func (m *OAPIssue) String() string { return proto.CompactTextString(m) }
func (*OAPIssue) ProtoMessage()    {}
func (*OAPIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{12}
}

func (m *OAPIssue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAPIssue.Unmarshal(m, b)
}
func (m *OAPIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAPIssue.Marshal(b, m, deterministic)
}
func (m *OAPIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAPIssue.Merge(m, src)
}
func (m *OAPIssue) XXX_Size() int {
	return xxx_messageInfo_OAPIssue.Size(m)
}
func (m *OAPIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_OAPIssue.DiscardUnknown(m)
}

var xxx_messageInfo_OAPIssue proto.InternalMessageInfo

func (m *OAPIssue) GetFromPrivate() string {
	if m != nil {
		return m.FromPrivate
	}
	return ""
}

func (m *OAPIssue) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *OAPIssue) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OAPIssue) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type OAPTX struct {
	// Version of Open Assets Protocol transaction. Typically 1.
	Ver int32 `protobuf:"varint,1,opt,name=ver,proto3" json:"ver,omitempty"`
	// Unique indentifier associated with this asset; can be used to query other transactions associated with this asset.
	Assetid string `protobuf:"bytes,2,opt,name=assetid,proto3" json:"assetid,omitempty"`
	// This transaction’s unique hash; same as the underlying transaction on the asset’s parent blockchain.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Optional Time this transaction was confirmed; only returned for confirmed transactions.
	Confirmed *timestamp.Timestamp `protobuf:"bytes,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Time this transaction was received.
	Received *timestamp.Timestamp `protobuf:"bytes,5,opt,name=received,proto3" json:"received,omitempty"`
	// Optional Associated hex-encoded metadata with this transaction, if it exists.
	OapMeta string `protobuf:"bytes,6,opt,name=oap_meta,json=oapMeta,proto3" json:"oap_meta,omitempty"`
	// true if this is an attempted double spend; false otherwise.
	DoubleSpend bool `protobuf:"varint,7,opt,name=double_spend,json=doubleSpend,proto3" json:"double_spend,omitempty"`
	// Array of input data, which can be seen explicitly in the cURL example. Very similar to array of TXInputs, but with values related to assets instead of satoshis.
	Inputs []*any.Any `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Array of output data, which can be seen explicitly in the cURL example. Very similar to array of TXOutputs, but with values related to assets instead of satoshis.
	Outputs              []*any.Any `protobuf:"bytes,9,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OAPTX) Reset()         { *m = OAPTX{} }
func (m *OAPTX) String() string { return proto.CompactTextString(m) }
func (*OAPTX) ProtoMessage()    {}
func (*OAPTX) Descriptor() ([]byte, []int) {
	return fileDescriptor_d95b4905c23b6f07, []int{13}
}

func (m *OAPTX) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAPTX.Unmarshal(m, b)
}
func (m *OAPTX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAPTX.Marshal(b, m, deterministic)
}
func (m *OAPTX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAPTX.Merge(m, src)
}
func (m *OAPTX) XXX_Size() int {
	return xxx_messageInfo_OAPTX.Size(m)
}
func (m *OAPTX) XXX_DiscardUnknown() {
	xxx_messageInfo_OAPTX.DiscardUnknown(m)
}

var xxx_messageInfo_OAPTX proto.InternalMessageInfo

func (m *OAPTX) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *OAPTX) GetAssetid() string {
	if m != nil {
		return m.Assetid
	}
	return ""
}

func (m *OAPTX) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *OAPTX) GetConfirmed() *timestamp.Timestamp {
	if m != nil {
		return m.Confirmed
	}
	return nil
}

func (m *OAPTX) GetReceived() *timestamp.Timestamp {
	if m != nil {
		return m.Received
	}
	return nil
}

func (m *OAPTX) GetOapMeta() string {
	if m != nil {
		return m.OapMeta
	}
	return ""
}

func (m *OAPTX) GetDoubleSpend() bool {
	if m != nil {
		return m.DoubleSpend
	}
	return false
}

func (m *OAPTX) GetInputs() []*any.Any {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *OAPTX) GetOutputs() []*any.Any {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterType((*NullValue)(nil), "fairwaycorp.blockchainprotobuf.NullValue")
	proto.RegisterType((*ArrayString)(nil), "fairwaycorp.blockchainprotobuf.ArrayString")
	proto.RegisterType((*TXInput)(nil), "fairwaycorp.blockchainprotobuf.TXInput")
	proto.RegisterType((*TXOutput)(nil), "fairwaycorp.blockchainprotobuf.TXOutput")
	proto.RegisterType((*TX)(nil), "fairwaycorp.blockchainprotobuf.TX")
	proto.RegisterType((*Wallet)(nil), "fairwaycorp.blockchainprotobuf.Wallet")
	proto.RegisterType((*HDWallet)(nil), "fairwaycorp.blockchainprotobuf.HDWallet")
	proto.RegisterType((*HDChain)(nil), "fairwaycorp.blockchainprotobuf.HDChain")
	proto.RegisterType((*Address)(nil), "fairwaycorp.blockchainprotobuf.Address")
	proto.RegisterType((*HDAddress)(nil), "fairwaycorp.blockchainprotobuf.HDAddress")
	proto.RegisterType((*AddressKeychain)(nil), "fairwaycorp.blockchainprotobuf.AddressKeychain")
	proto.RegisterType((*TXRef)(nil), "fairwaycorp.blockchainprotobuf.TXRef")
	proto.RegisterType((*OAPIssue)(nil), "fairwaycorp.blockchainprotobuf.OAPIssue")
	proto.RegisterType((*OAPTX)(nil), "fairwaycorp.blockchainprotobuf.OAPTX")
}

func init() { proto.RegisterFile("commonMessage.proto", fileDescriptor_d95b4905c23b6f07) }

var fileDescriptor_d95b4905c23b6f07 = []byte{
	// 1683 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x5f, 0x6f, 0xdb, 0xc8,
	0x11, 0x87, 0x24, 0x4b, 0x22, 0x87, 0x96, 0x6c, 0x6f, 0x9c, 0x0b, 0xe3, 0xfc, 0xb1, 0xab, 0x6b,
	0x5a, 0x05, 0x68, 0x64, 0x20, 0xfd, 0x8f, 0xa2, 0x3d, 0xd8, 0x77, 0x05, 0x6c, 0x1c, 0xe2, 0xb8,
	0xb4, 0xda, 0x06, 0x7d, 0x21, 0x56, 0xe2, 0x52, 0x22, 0x42, 0x91, 0x2c, 0xb9, 0x74, 0xa8, 0x3c,
	0x15, 0xe8, 0x67, 0x2a, 0xfa, 0x2d, 0xfa, 0x56, 0xa0, 0x8f, 0xfd, 0x14, 0x7d, 0x2e, 0x66, 0x76,
	0x49, 0xd1, 0x51, 0x4e, 0x3a, 0xbf, 0x71, 0x7e, 0x3b, 0x3b, 0xbb, 0xb3, 0xf3, 0xef, 0x27, 0xc1,
	0x83, 0x69, 0xbc, 0x58, 0xc4, 0xd1, 0x1b, 0x91, 0x65, 0x7c, 0x26, 0x46, 0x49, 0x1a, 0xcb, 0x98,
	0x3d, 0xf7, 0x79, 0x90, 0x7e, 0xe0, 0xcb, 0x69, 0x9c, 0x26, 0xa3, 0x49, 0x18, 0x4f, 0xdf, 0x4f,
	0xe7, 0x3c, 0x88, 0x68, 0x71, 0x92, 0xfb, 0x47, 0xc7, 0xb3, 0x38, 0x9e, 0x85, 0xe2, 0xb4, 0x04,
	0x4e, 0x65, 0xb0, 0x10, 0x99, 0xe4, 0x8b, 0x44, 0x19, 0x38, 0x7a, 0xfc, 0xa9, 0x02, 0x8f, 0x96,
	0x6a, 0x69, 0x60, 0x81, 0x79, 0x95, 0x87, 0xe1, 0x9f, 0x78, 0x98, 0x8b, 0xc1, 0x29, 0x58, 0x67,
	0x69, 0xca, 0x97, 0x37, 0x32, 0x0d, 0xa2, 0x19, 0x3b, 0x01, 0x8b, 0xa3, 0x98, 0x91, 0x68, 0x37,
	0x4e, 0x5a, 0x43, 0xd3, 0xa9, 0x43, 0x83, 0x7f, 0x34, 0xa1, 0x3b, 0x7e, 0x77, 0x19, 0x25, 0xb9,
	0x64, 0x4f, 0xc0, 0x4c, 0x52, 0x71, 0xeb, 0xce, 0x79, 0x36, 0xb7, 0x1b, 0x27, 0x8d, 0xa1, 0xe9,
	0x18, 0x08, 0x5c, 0xf0, 0x6c, 0xce, 0x7e, 0x00, 0xbb, 0x71, 0x2e, 0x93, 0x5c, 0xba, 0x41, 0xe4,
	0x89, 0xc2, 0x6e, 0x9e, 0x34, 0x86, 0x6d, 0xc7, 0x52, 0xd8, 0x25, 0x42, 0x35, 0x95, 0x5b, 0xbc,
	0x8c, 0xdd, 0xaa, 0xab, 0xd0, 0xfd, 0xd8, 0x31, 0x58, 0xd9, 0x34, 0x0d, 0x12, 0xe9, 0xca, 0x65,
	0x22, 0xec, 0x1d, 0x3a, 0x04, 0x14, 0x34, 0x5e, 0x26, 0x82, 0x7d, 0x01, 0x1d, 0x25, 0xd9, 0x6d,
	0x5a, 0xd3, 0x12, 0x7b, 0x0a, 0x26, 0xf7, 0xbc, 0x54, 0x64, 0x99, 0xc8, 0xec, 0x0e, 0xf9, 0xb1,
	0x02, 0xd8, 0x11, 0x18, 0x99, 0xf8, 0x6b, 0x2e, 0xa2, 0xa9, 0xb0, 0xbb, 0x74, 0x6a, 0x25, 0xb3,
	0x7d, 0x68, 0xf1, 0x99, 0xb0, 0x0d, 0x82, 0xf1, 0x13, 0x2f, 0xf1, 0x81, 0x87, 0xa1, 0x90, 0x6e,
	0xc4, 0x17, 0xc2, 0x36, 0xd5, 0x25, 0x14, 0x74, 0xc5, 0x17, 0x02, 0x1d, 0xd1, 0x0a, 0x32, 0x7e,
	0x2f, 0x22, 0x1b, 0x48, 0x43, 0x6f, 0x1a, 0x23, 0x34, 0xf8, 0x57, 0x03, 0x8c, 0xf1, 0xbb, 0xb7,
	0xe4, 0x1a, 0x3b, 0x84, 0xb6, 0xf2, 0xb8, 0x41, 0x87, 0x28, 0xa1, 0xe6, 0x4a, 0xf3, 0xbb, 0x5d,
	0x69, 0x7d, 0xea, 0xca, 0xd6, 0x17, 0x7a, 0x0c, 0x46, 0x96, 0x88, 0x48, 0xba, 0x93, 0xa5, 0x7e,
	0xa3, 0x2e, 0xc9, 0xe7, 0x4b, 0x5c, 0xf2, 0xb8, 0xe4, 0xee, 0x5c, 0x14, 0x76, 0x47, 0x2d, 0xa1,
	0x7c, 0x21, 0x0a, 0x34, 0x4b, 0x4b, 0x3a, 0x13, 0xba, 0xca, 0x2c, 0x42, 0x2a, 0x55, 0x06, 0x7f,
	0x37, 0xa0, 0x39, 0x7e, 0x87, 0xae, 0x53, 0x7e, 0xba, 0x73, 0x11, 0xcc, 0xe6, 0x52, 0x7b, 0x64,
	0x11, 0x76, 0x41, 0x10, 0x63, 0xb0, 0x43, 0x19, 0xa2, 0xbc, 0xa2, 0xef, 0x2d, 0x3e, 0x1d, 0x42,
	0x5b, 0xc6, 0x92, 0x87, 0xe4, 0x4d, 0xdb, 0x51, 0x02, 0xda, 0xf1, 0x85, 0xc8, 0xc8, 0x89, 0xb6,
	0x43, 0xdf, 0x88, 0x65, 0xc1, 0x47, 0x41, 0xb7, 0x6f, 0x3b, 0xf4, 0xcd, 0x9e, 0x03, 0x24, 0xa9,
	0xf0, 0x45, 0x5a, 0x85, 0xd7, 0x74, 0x6a, 0x08, 0x7b, 0x06, 0x90, 0x8a, 0x90, 0x2f, 0x85, 0x87,
	0x4f, 0x62, 0xd0, 0xba, 0xa9, 0x91, 0xf3, 0x25, 0xfb, 0x05, 0x18, 0xa9, 0x98, 0x8a, 0xe0, 0x56,
	0x78, 0x14, 0x6a, 0xeb, 0xf5, 0xd1, 0x48, 0x55, 0xd3, 0xa8, 0xac, 0xa6, 0xd1, 0xb8, 0x2c, 0x37,
	0xa7, 0xd2, 0xc5, 0xbc, 0xb9, 0x15, 0x29, 0xc5, 0xbe, 0xed, 0xe0, 0x27, 0xd6, 0x07, 0x3d, 0x0d,
	0x16, 0xa7, 0x6d, 0xa9, 0x34, 0x43, 0x00, 0x77, 0xe3, 0xc3, 0x79, 0x71, 0x3e, 0x09, 0x85, 0x8b,
	0xd1, 0xf0, 0xec, 0xdd, 0x93, 0xc6, 0xd0, 0x70, 0x2c, 0x85, 0xdd, 0x20, 0xc4, 0x1e, 0x42, 0xe7,
	0x36, 0x88, 0xdc, 0xec, 0xa3, 0xdd, 0xd3, 0x79, 0x12, 0x44, 0x37, 0x1f, 0xd9, 0x23, 0xe8, 0xde,
	0xc6, 0xb9, 0x44, 0xbc, 0x4f, 0x78, 0x07, 0xc5, 0x9b, 0x8f, 0xec, 0x87, 0xd0, 0x9b, 0xc6, 0x91,
	0x1f, 0xa4, 0x0b, 0x2e, 0x83, 0x38, 0xca, 0xec, 0x3d, 0x5a, 0xbe, 0x0b, 0xb2, 0xaf, 0xa0, 0x13,
	0x60, 0xf9, 0x66, 0xf6, 0xfe, 0x49, 0x6b, 0x68, 0xbd, 0xfe, 0xf1, 0x68, 0x73, 0xb3, 0x19, 0xe9,
	0x72, 0x77, 0xf4, 0x36, 0x76, 0x0e, 0x5d, 0x55, 0xa2, 0x99, 0x7d, 0x40, 0x16, 0x86, 0xdb, 0x2d,
	0xa8, 0xc4, 0x77, 0xca, 0x8d, 0xec, 0x29, 0x40, 0x9c, 0x60, 0x6b, 0x70, 0xd3, 0x89, 0x6f, 0x33,
	0xf2, 0xdd, 0x88, 0x13, 0x79, 0x19, 0x39, 0x13, 0x1f, 0x23, 0x48, 0x77, 0xf6, 0x28, 0x82, 0x0f,
	0x4e, 0x1a, 0xc3, 0xa6, 0x53, 0x43, 0xd8, 0xaf, 0xc0, 0xd4, 0x3e, 0x09, 0xcf, 0x3e, 0xdc, 0x1a,
	0xa3, 0x95, 0x32, 0xfb, 0x12, 0x7a, 0x3a, 0x60, 0xee, 0x34, 0xce, 0x23, 0x69, 0x3f, 0xa4, 0x27,
	0xda, 0xd5, 0xe0, 0xd7, 0x88, 0xb1, 0x17, 0xd0, 0x9f, 0xce, 0x79, 0x34, 0x13, 0xae, 0x4e, 0x49,
	0xfb, 0x0b, 0x4a, 0x92, 0x9e, 0x42, 0xcf, 0x14, 0x88, 0x79, 0xa4, 0x53, 0x1f, 0xb3, 0xfb, 0x91,
	0xca, 0x23, 0x95, 0xf8, 0x98, 0xe2, 0xc7, 0xa0, 0xaa, 0x40, 0xf7, 0x3f, 0x9b, 0x0e, 0x52, 0x3b,
	0x54, 0xfb, 0x7b, 0x02, 0xa6, 0xce, 0x80, 0xd8, 0xb7, 0x1f, 0xab, 0xf6, 0xa9, 0x80, 0xb7, 0x3e,
	0x5e, 0x94, 0xea, 0x8f, 0xdc, 0x99, 0xc6, 0xa1, 0x7d, 0x44, 0x0a, 0xbb, 0x08, 0x5e, 0x6b, 0x0c,
	0x53, 0x0e, 0x4b, 0xf7, 0x09, 0x2d, 0xe1, 0x27, 0xfb, 0x39, 0x58, 0x91, 0x28, 0xf0, 0x61, 0x29,
	0x3e, 0x4f, 0xe9, 0x6d, 0x0e, 0xd7, 0xde, 0xe6, 0x2c, 0x5a, 0x3a, 0x80, 0x8a, 0x97, 0x2a, 0xa4,
	0xbf, 0x84, 0x5d, 0xda, 0x56, 0xc6, 0xf5, 0xd9, 0x86, 0x7d, 0x74, 0x80, 0x8a, 0x67, 0x36, 0xb8,
	0x86, 0xce, 0x9f, 0xa9, 0xcb, 0xa9, 0x9a, 0xc5, 0xe6, 0xa7, 0x06, 0x81, 0x12, 0xb0, 0x3e, 0xa9,
	0x67, 0xea, 0xda, 0xc7, 0xef, 0xcd, 0xb5, 0x3f, 0xf8, 0x6f, 0x03, 0x8c, 0x8b, 0x6f, 0xee, 0x6d,
	0xf4, 0x2b, 0xe8, 0x50, 0xce, 0x29, 0x8b, 0xdf, 0x23, 0xab, 0x2f, 0xbe, 0xf9, 0x1a, 0x65, 0x47,
	0x6f, 0x63, 0x7d, 0x68, 0xce, 0x3d, 0x6a, 0x38, 0x86, 0xd3, 0x9c, 0x7b, 0x6c, 0x04, 0x0f, 0x44,
	0x21, 0x45, 0xe4, 0x09, 0xcf, 0x4d, 0xf2, 0x49, 0x18, 0x4c, 0xdd, 0xf7, 0xa2, 0xec, 0xa0, 0x07,
	0xe5, 0xd2, 0x35, 0xad, 0x7c, 0x2b, 0x96, 0xec, 0x25, 0xec, 0x67, 0xf9, 0x84, 0x8c, 0xa9, 0x88,
	0xeb, 0xb9, 0xd3, 0x76, 0xf6, 0x4a, 0xfc, 0x52, 0xc1, 0x83, 0x0c, 0xba, 0xfa, 0x74, 0xe6, 0xc0,
	0x9e, 0xda, 0xb2, 0x7a, 0x91, 0x06, 0xdd, 0xff, 0xe5, 0xf6, 0xfb, 0xeb, 0x3c, 0x74, 0xfa, 0xb4,
	0x70, 0x56, 0xef, 0x9e, 0xab, 0x91, 0xdb, 0x72, 0x94, 0x30, 0xf8, 0x67, 0x1b, 0xba, 0x65, 0xe6,
	0xda, 0xd0, 0x2d, 0x33, 0x5b, 0x3d, 0x6c, 0x29, 0xb2, 0xdf, 0x41, 0x47, 0x4d, 0x2d, 0xda, 0x6c,
	0xbd, 0xfe, 0xd1, 0xb6, 0x6b, 0xa8, 0x40, 0x39, 0x7a, 0x17, 0xfb, 0x3d, 0x98, 0x73, 0xcf, 0xd5,
	0x26, 0x5a, 0x64, 0x62, 0xb8, 0xdd, 0x13, 0x6d, 0xc4, 0x98, 0x7b, 0x3a, 0xee, 0x2f, 0xa0, 0x4f,
	0x3d, 0xdf, 0xad, 0x3a, 0xb1, 0x9a, 0x04, 0x3d, 0x42, 0x9d, 0xb2, 0xe5, 0x3e, 0x03, 0x50, 0x6a,
	0x99, 0x88, 0xa4, 0x9e, 0x0b, 0x26, 0x21, 0x37, 0x22, 0x92, 0xe8, 0xe6, 0x84, 0x87, 0x1c, 0x7b,
	0x88, 0x9a, 0x0f, 0xa5, 0xc8, 0x4e, 0xe1, 0x41, 0x1e, 0x55, 0x5d, 0xc1, 0x2d, 0xb5, 0x14, 0x15,
	0x60, 0xb5, 0xa5, 0x73, 0xbd, 0xe1, 0x4b, 0xe8, 0xf9, 0x41, 0xc4, 0xc3, 0x4a, 0x55, 0xd1, 0x83,
	0x5d, 0x02, 0x4b, 0xa5, 0x03, 0xd8, 0x89, 0x5c, 0x59, 0xd0, 0xd4, 0x68, 0x3b, 0xad, 0x68, 0x5c,
	0xb0, 0x21, 0xec, 0xd7, 0x0f, 0xa2, 0x65, 0x35, 0x21, 0xfa, 0x35, 0xfc, 0x6a, 0x5c, 0x60, 0x47,
	0x54, 0x27, 0x90, 0x8e, 0x9e, 0x16, 0x84, 0xe0, 0xea, 0x43, 0xe8, 0xc8, 0xc2, 0xcd, 0xd3, 0x90,
	0xe6, 0x04, 0x56, 0x42, 0xf1, 0xc7, 0x34, 0x64, 0x3f, 0x83, 0x96, 0x2c, 0x32, 0xbb, 0x47, 0x29,
	0x33, 0xd8, 0xde, 0x86, 0x1d, 0x54, 0x67, 0xbf, 0x45, 0x63, 0xa9, 0xf0, 0x33, 0xbb, 0x4f, 0x1b,
	0x5f, 0x7c, 0x8f, 0x8d, 0xc2, 0x77, 0xf4, 0x26, 0x36, 0x86, 0xfa, 0x0b, 0xb9, 0xda, 0xd4, 0xde,
	0x7d, 0x4c, 0x1d, 0xd4, 0x0c, 0x8c, 0x95, 0x55, 0x1b, 0xba, 0x73, 0x9e, 0xbd, 0x89, 0x53, 0x61,
	0xef, 0x53, 0x11, 0x96, 0xe2, 0xe0, 0x0f, 0x60, 0x56, 0xc9, 0xbe, 0x21, 0x75, 0x19, 0xec, 0x24,
	0x5c, 0x56, 0x34, 0x03, 0xbf, 0x91, 0x52, 0xa9, 0xda, 0xa5, 0x5c, 0x34, 0x1d, 0x2d, 0x0d, 0xfe,
	0xd7, 0x80, 0x3d, 0x6d, 0xf1, 0x5b, 0xb1, 0xa4, 0x1b, 0x6e, 0xb0, 0xbc, 0xb2, 0xd2, 0xac, 0x5b,
	0xc1, 0x1d, 0x49, 0x1a, 0xdc, 0x72, 0x29, 0xb4, 0xf9, 0x52, 0xc4, 0xc6, 0xfc, 0x21, 0xf0, 0x35,
	0x19, 0xc3, 0x4f, 0xd2, 0xcd, 0x27, 0xef, 0xc5, 0x12, 0xf9, 0x4b, 0x8b, 0x74, 0x95, 0xf8, 0x29,
	0x81, 0xeb, 0xac, 0x11, 0xb8, 0x97, 0xb0, 0x1f, 0xa7, 0xc1, 0x8c, 0x92, 0xa3, 0xbc, 0xa1, 0x62,
	0x35, 0x7b, 0x25, 0x5e, 0xbe, 0xce, 0x31, 0x58, 0x31, 0x4f, 0x2a, 0x2d, 0xc5, 0x6d, 0x20, 0xe6,
	0x89, 0x56, 0x18, 0xfc, 0x67, 0x07, 0xda, 0x14, 0x82, 0x0d, 0xee, 0x7e, 0x4a, 0xe9, 0x9a, 0xeb,
	0x94, 0xee, 0x11, 0x74, 0x65, 0xa1, 0xe6, 0x9e, 0x7e, 0x58, 0x59, 0x5c, 0x28, 0x5e, 0x07, 0xb2,
	0x50, 0xd3, 0xc7, 0x8d, 0x74, 0xd1, 0x1a, 0xb2, 0xa0, 0x31, 0x73, 0xc5, 0x9e, 0x83, 0x25, 0x0b,
	0x3d, 0x64, 0xdc, 0xa8, 0x2a, 0xd8, 0x42, 0x4d, 0x93, 0xab, 0x15, 0x2f, 0xee, 0xd4, 0x79, 0xf1,
	0x36, 0x3e, 0x77, 0x08, 0x6d, 0x22, 0xb4, 0xe4, 0xae, 0xe1, 0x28, 0x61, 0x8d, 0x5f, 0x99, 0xeb,
	0xfc, 0x6a, 0x8d, 0x2f, 0xc1, 0xe7, 0xf8, 0xd2, 0x8a, 0x96, 0x5b, 0x77, 0x68, 0xf9, 0x31, 0x58,
	0xa9, 0xf0, 0xab, 0x86, 0xb0, 0xab, 0xe6, 0x7b, 0x2a, 0xfc, 0xb2, 0x1d, 0xdc, 0x65, 0x31, 0xbd,
	0xcd, 0x2c, 0xa6, 0x7f, 0x1f, 0x16, 0x53, 0xa7, 0xf4, 0x7b, 0x77, 0x29, 0x7d, 0x9d, 0xbd, 0xee,
	0xdf, 0x83, 0xbd, 0xae, 0x11, 0xa3, 0x83, 0xcf, 0x10, 0xa3, 0x3b, 0x8c, 0x85, 0xdd, 0x65, 0x2c,
	0x83, 0xbf, 0x35, 0xc0, 0x78, 0x7b, 0x76, 0x7d, 0x99, 0x65, 0x39, 0xb1, 0x5b, 0x3f, 0x8d, 0x17,
	0x6e, 0x59, 0x1f, 0x2a, 0xc5, 0x2c, 0xc4, 0xae, 0x75, 0x8d, 0x50, 0xf3, 0xae, 0x52, 0x55, 0x55,
	0x96, 0x29, 0xe3, 0xb3, 0x55, 0xd1, 0xf1, 0x05, 0xdd, 0x44, 0xfd, 0x2c, 0xd4, 0x12, 0xfe, 0x74,
	0x5b, 0x08, 0xc9, 0x91, 0x07, 0xe9, 0xfa, 0xaa, 0xe4, 0xc1, 0xbf, 0x9b, 0xd0, 0x7e, 0x7b, 0x76,
	0x3d, 0x7e, 0x57, 0x92, 0xf1, 0xc6, 0x8a, 0x8c, 0x63, 0xbe, 0x67, 0x99, 0x90, 0x81, 0xa7, 0xcf,
	0x2a, 0xc5, 0xea, 0xf7, 0x49, 0xab, 0xf6, 0xfb, 0xe4, 0x4e, 0x6c, 0x76, 0xee, 0x13, 0x9b, 0x7a,
	0x00, 0xda, 0xf7, 0x08, 0xc0, 0x63, 0x30, 0xb0, 0x74, 0xd1, 0x97, 0xf2, 0xb7, 0x58, 0xcc, 0x93,
	0x37, 0x42, 0xf2, 0xb5, 0x54, 0xee, 0xae, 0xa7, 0xf2, 0x4f, 0x2a, 0x52, 0x6f, 0x50, 0x1f, 0xfe,
	0x3c, 0x75, 0x2b, 0x19, 0xfc, 0x68, 0xc5, 0xe0, 0xcd, 0x0d, 0xea, 0xa5, 0xd2, 0xf9, 0x6f, 0xfe,
	0xf2, 0xeb, 0x59, 0x20, 0xe7, 0xf9, 0x64, 0x34, 0x8d, 0x17, 0xa7, 0xba, 0xc3, 0xbf, 0xc2, 0x16,
	0x7f, 0xba, 0x6a, 0xf1, 0xaf, 0xaa, 0xff, 0x1a, 0x14, 0x67, 0x7d, 0x35, 0x13, 0xd1, 0xab, 0x59,
	0x3c, 0xe9, 0x90, 0xf8, 0xd3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x7c, 0x2e, 0x5f, 0xe9,
	0x10, 0x00, 0x00,
}
