// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchainService.proto

package protoc_gen_go_btc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("blockchainService.proto", fileDescriptor_f27f511d186d3ffe) }

var fileDescriptor_f27f511d186d3ffe = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xce, 0xcb, 0x4a, 0xf4, 0x30,
	0x1c, 0x05, 0x70, 0xfa, 0xc1, 0xe7, 0xa2, 0xe0, 0x2d, 0x82, 0xc2, 0xa8, 0x20, 0xd5, 0x85, 0x8e,
	0x34, 0x01, 0xdd, 0x88, 0x78, 0x81, 0x11, 0xc5, 0x8d, 0x1b, 0xdd, 0xb9, 0x91, 0x24, 0x66, 0x92,
	0xe0, 0x4c, 0x52, 0x9b, 0x7f, 0x15, 0x19, 0xba, 0xf1, 0x0d, 0xc4, 0x07, 0x10, 0x37, 0xae, 0x7c,
	0x1b, 0x5f, 0xc1, 0x07, 0x91, 0xc9, 0x5c, 0x3a, 0x9d, 0x85, 0x56, 0x57, 0x2d, 0x49, 0xce, 0x39,
	0xbf, 0x70, 0x81, 0xb5, 0x2c, 0xbf, 0xe1, 0x8a, 0x6a, 0x73, 0x21, 0xd2, 0x3b, 0xcd, 0x05, 0x4e,
	0x52, 0x0b, 0x16, 0x45, 0x4d, 0xaa, 0xd3, 0x7b, 0xfa, 0xc0, 0x6d, 0x9a, 0xe0, 0xe2, 0x91, 0xbf,
	0x64, 0x59, 0x13, 0x33, 0xe0, 0xb5, 0x25, 0x69, 0xad, 0x6c, 0x09, 0x42, 0x13, 0x4d, 0xa8, 0x31,
	0x16, 0x28, 0x68, 0x6b, 0x5c, 0xaf, 0xa1, 0x36, 0x52, 0x7d, 0x26, 0x9c, 0xa3, 0xb2, 0x5f, 0xbd,
	0xf5, 0xfa, 0x3f, 0x9c, 0x6d, 0x8c, 0xcf, 0xa2, 0xa7, 0x20, 0x9c, 0x3c, 0xea, 0x1e, 0x1c, 0x9b,
	0xeb, 0xc4, 0x6a, 0x03, 0x68, 0x07, 0xff, 0x6c, 0xc0, 0xa5, 0xc8, 0xb9, 0xb8, 0xcd, 0x84, 0x83,
	0x1a, 0xae, 0x92, 0x2c, 0x08, 0xd1, 0xfc, 0xe3, 0xc7, 0xe7, 0xf3, 0xbf, 0x19, 0x34, 0x45, 0x18,
	0x70, 0xd2, 0x71, 0x40, 0xa5, 0xc8, 0x49, 0x1d, 0xbd, 0x05, 0x7d, 0xe9, 0x29, 0x75, 0x6a, 0xe8,
	0xda, 0xab, 0xdc, 0x3e, 0x1a, 0x1b, 0xd8, 0x36, 0x2a, 0xa7, 0xa3, 0x75, 0xcf, 0x8a, 0xd0, 0x4a,
	0x89, 0xe5, 0x23, 0x8e, 0x74, 0xfc, 0xf7, 0x4a, 0x51, 0xa7, 0x72, 0xf4, 0x1e, 0x84, 0x73, 0xbd,
	0x45, 0xa1, 0xa5, 0x82, 0x21, 0xf5, 0xa0, 0x3a, 0xb5, 0x14, 0xfc, 0x03, 0xb6, 0xee, 0xb1, 0x6b,
	0x28, 0xfa, 0x0e, 0xeb, 0x47, 0x72, 0xf4, 0x12, 0x84, 0xd3, 0x27, 0x82, 0x42, 0x96, 0x8a, 0x21,
	0x75, 0xb7, 0xca, 0xd4, 0x58, 0x68, 0xc0, 0xdc, 0xfc, 0x45, 0x36, 0x5a, 0xf5, 0xd0, 0x65, 0xb4,
	0x58, 0x82, 0x36, 0x7b, 0xb7, 0xa4, 0x63, 0x68, 0x5b, 0xe4, 0x8d, 0xc3, 0xcb, 0x7d, 0xa9, 0x41,
	0x65, 0x0c, 0x73, 0xdb, 0x26, 0xfd, 0xf6, 0xb8, 0x5b, 0x4f, 0x8a, 0xfa, 0x78, 0xd0, 0x4f, 0xfc,
	0x0f, 0x8f, 0xa5, 0x30, 0xb1, 0xb4, 0x31, 0x03, 0xce, 0x26, 0xfc, 0xd1, 0xf6, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x89, 0xcd, 0xcb, 0xaa, 0x61, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	ChainEndpoint(ctx context.Context, in *ChainEndpointRequest, opts ...grpc.CallOption) (*Blockchain, error)
	BlockHashEndpoint(ctx context.Context, in *BlockHashEndpointRequest, opts ...grpc.CallOption) (*Block, error)
	BlockHeightEndpoint(ctx context.Context, in *BlockHeightEndpointRequest, opts ...grpc.CallOption) (*Block, error)
	FeatureEndpoint(ctx context.Context, in *FeatureEndpointRequest, opts ...grpc.CallOption) (*Feature, error)
}

type blockchainServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlockchainServiceClient(cc *grpc.ClientConn) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) ChainEndpoint(ctx context.Context, in *ChainEndpointRequest, opts ...grpc.CallOption) (*Blockchain, error) {
	out := new(Blockchain)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/ChainEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) BlockHashEndpoint(ctx context.Context, in *BlockHashEndpointRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/BlockHashEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) BlockHeightEndpoint(ctx context.Context, in *BlockHeightEndpointRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/BlockHeightEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) FeatureEndpoint(ctx context.Context, in *FeatureEndpointRequest, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/FeatureEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
type BlockchainServiceServer interface {
	ChainEndpoint(context.Context, *ChainEndpointRequest) (*Blockchain, error)
	BlockHashEndpoint(context.Context, *BlockHashEndpointRequest) (*Block, error)
	BlockHeightEndpoint(context.Context, *BlockHeightEndpointRequest) (*Block, error)
	FeatureEndpoint(context.Context, *FeatureEndpointRequest) (*Feature, error)
}

func RegisterBlockchainServiceServer(s *grpc.Server, srv BlockchainServiceServer) {
	s.RegisterService(&_BlockchainService_serviceDesc, srv)
}

func _BlockchainService_ChainEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).ChainEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/ChainEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).ChainEndpoint(ctx, req.(*ChainEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_BlockHashEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).BlockHashEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/BlockHashEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).BlockHashEndpoint(ctx, req.(*BlockHashEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_BlockHeightEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).BlockHeightEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/BlockHeightEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).BlockHeightEndpoint(ctx, req.(*BlockHeightEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_FeatureEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).FeatureEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.BlockchainService/FeatureEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).FeatureEndpoint(ctx, req.(*FeatureEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockchainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairwaycorp.blockchainprotobuf.btc.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChainEndpoint",
			Handler:    _BlockchainService_ChainEndpoint_Handler,
		},
		{
			MethodName: "BlockHashEndpoint",
			Handler:    _BlockchainService_BlockHashEndpoint_Handler,
		},
		{
			MethodName: "BlockHeightEndpoint",
			Handler:    _BlockchainService_BlockHeightEndpoint_Handler,
		},
		{
			MethodName: "FeatureEndpoint",
			Handler:    _BlockchainService_FeatureEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchainService.proto",
}
