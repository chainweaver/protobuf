// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metadataService.proto

package protoc_gen_go_btc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("metadataService.proto", fileDescriptor_ba759d463d0d4bf4) }

var fileDescriptor_ba759d463d0d4bf4 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x8a, 0xd4, 0x40,
	0x14, 0x85, 0x29, 0x17, 0x2e, 0x0a, 0x44, 0x88, 0xb8, 0x98, 0xa2, 0x15, 0xa7, 0xc5, 0x11, 0x83,
	0x49, 0x89, 0xee, 0x04, 0x11, 0x87, 0x19, 0x5a, 0xd0, 0x11, 0x51, 0x71, 0xe1, 0x46, 0x2a, 0x95,
	0x3b, 0x49, 0x30, 0x5d, 0xd5, 0xa6, 0x6e, 0x74, 0x86, 0x66, 0x36, 0xbe, 0x82, 0x2f, 0x23, 0x88,
	0x22, 0x88, 0xe0, 0xce, 0x85, 0xaf, 0xe0, 0x4b, 0xb8, 0x93, 0x54, 0x67, 0xda, 0x94, 0xda, 0x93,
	0x9f, 0x71, 0xd5, 0xcd, 0x0d, 0xf7, 0x9c, 0xf3, 0x91, 0x93, 0x4b, 0xcf, 0x4e, 0x01, 0x45, 0x2c,
	0x50, 0x3c, 0x86, 0xe2, 0x55, 0x26, 0x21, 0x9c, 0x15, 0x1a, 0xb5, 0x37, 0xde, 0x15, 0x59, 0xf1,
	0x5a, 0xec, 0x4b, 0x5d, 0xcc, 0xc2, 0x28, 0xd7, 0xf2, 0x85, 0x4c, 0x45, 0xa6, 0xec, 0xc3, 0xa8,
	0xdc, 0x0d, 0x23, 0x94, 0x6c, 0x94, 0x68, 0x9d, 0xe4, 0xc0, 0xc5, 0x2c, 0xe3, 0x42, 0x29, 0x8d,
	0x02, 0x33, 0xad, 0xcc, 0x42, 0x81, 0x2d, 0x85, 0x77, 0xc0, 0x18, 0x91, 0xd4, 0xc2, 0xec, 0x8c,
	0xd4, 0xd3, 0xa9, 0x56, 0xce, 0xf0, 0xfa, 0xcf, 0x53, 0xf4, 0xf4, 0x8e, 0x9b, 0xc3, 0xfb, 0x40,
	0x28, 0x9b, 0x00, 0x1e, 0x8e, 0xef, 0xc4, 0x71, 0x01, 0xc6, 0x6c, 0xab, 0x78, 0xa6, 0x33, 0x85,
	0xde, 0x76, 0xd8, 0x9e, 0x30, 0x5c, 0xbd, 0xff, 0x08, 0x5e, 0x96, 0x60, 0x90, 0x05, 0x5d, 0x64,
	0xee, 0xc1, 0xfe, 0x53, 0x91, 0x97, 0x60, 0xc6, 0x57, 0xde, 0x7c, 0xff, 0xf1, 0xf6, 0xc4, 0x45,
	0x6f, 0x9d, 0x47, 0x28, 0xf9, 0xdc, 0xa0, 0x48, 0xe0, 0x80, 0x8b, 0x38, 0x2e, 0x0c, 0x9f, 0x8b,
	0x85, 0xc5, 0x01, 0xaf, 0xc8, 0xbd, 0x77, 0x84, 0xae, 0x35, 0xfc, 0x9f, 0xec, 0xa5, 0xc2, 0xa4,
	0xcb, 0xf8, 0x5b, 0x3d, 0xe3, 0xbb, 0xeb, 0x03, 0xd3, 0x6f, 0xd8, 0xf4, 0x17, 0xbc, 0xf3, 0x4e,
	0x7a, 0xdc, 0x33, 0x7c, 0x8e, 0x56, 0xbf, 0x8e, 0xfe, 0x85, 0xd0, 0x51, 0xc3, 0x7b, 0xb3, 0xd2,
	0x75, 0xd2, 0x4f, 0x7a, 0xa6, 0xff, 0x4b, 0x61, 0x20, 0x40, 0x60, 0x01, 0x2e, 0x7b, 0x97, 0x1c,
	0x00, 0xbb, 0x66, 0xf8, 0xdc, 0xfe, 0x3e, 0x6f, 0x70, 0x7c, 0x22, 0x94, 0x3d, 0x2c, 0x8f, 0x57,
	0xa1, 0xd5, 0xfb, 0xbd, 0x18, 0x1e, 0x94, 0x79, 0x6e, 0x21, 0xc6, 0x57, 0x2d, 0xc3, 0x06, 0x6b,
	0xaf, 0xd0, 0x4d, 0xe2, 0x7b, 0xef, 0x09, 0x5d, 0x6b, 0x44, 0x18, 0xd2, 0xa2, 0x95, 0xeb, 0x03,
	0x01, 0xea, 0x6f, 0x80, 0xb5, 0xb4, 0xa8, 0x4a, 0xff, 0x95, 0xd0, 0x51, 0xc3, 0x7e, 0x60, 0x91,
	0x8e, 0x52, 0x18, 0xc8, 0x70, 0xcd, 0x32, 0xf8, 0xac, 0x5b, 0x91, 0x2a, 0x94, 0xcf, 0x84, 0x9e,
	0xdb, 0x82, 0x1c, 0x10, 0x56, 0xd5, 0xe9, 0x6e, 0x97, 0x08, 0x47, 0x4a, 0x1c, 0xef, 0x85, 0xf8,
	0x1d, 0x8e, 0xd2, 0x47, 0x42, 0x47, 0x6e, 0x84, 0x3f, 0x1a, 0x35, 0xe9, 0x0f, 0xf1, 0x5f, 0x4a,
	0x55, 0x9f, 0x26, 0xbf, 0xed, 0x34, 0x7d, 0x23, 0x74, 0xdd, 0xb5, 0x5f, 0x54, 0x02, 0xb2, 0x24,
	0xc5, 0x25, 0xc5, 0xfd, 0xfe, 0x14, 0xff, 0x90, 0x19, 0x88, 0x52, 0x1f, 0x29, 0xbf, 0x5b, 0xb7,
	0x36, 0x6f, 0x3f, 0xbb, 0x95, 0x64, 0x98, 0x96, 0x51, 0x28, 0xf5, 0x94, 0xd7, 0x4e, 0x41, 0x65,
	0xc5, 0x7f, 0x5b, 0x05, 0x87, 0x5e, 0xdc, 0xfe, 0x91, 0x41, 0x02, 0x2a, 0x48, 0x74, 0x10, 0xa1,
	0x8c, 0x4e, 0xda, 0xd1, 0x8d, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xb6, 0xac, 0xda, 0xca,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataServiceClient interface {
	GetMetadataAddressEndpoint(ctx context.Context, in *GetMetadataAddressEndpointRequest, opts ...grpc.CallOption) (*KeyValues, error)
	GetMetadataTxhashEndpoint(ctx context.Context, in *GetMetadataTxhashEndpointRequest, opts ...grpc.CallOption) (*KeyValues, error)
	GetMetadataBlockhashEndpoint(ctx context.Context, in *GetMetadataBlockhashEndpointRequest, opts ...grpc.CallOption) (*KeyValues, error)
	PutMetadataAddressEndpoint(ctx context.Context, in *PutMetadataAddressEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
	PutMetadataTxhashEndpoint(ctx context.Context, in *PutMetadataTxhashEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
	PutMetadataBlockhashEndpoint(ctx context.Context, in *PutMetadataBlockhashEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
	DeleteMetadataAddressEndpoint(ctx context.Context, in *DeleteMetadataAddressEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
	DeleteMetadataTxhashEndpoint(ctx context.Context, in *DeleteMetadataTxhashEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
	DeleteMetadataBlockheightEndpoint(ctx context.Context, in *DeleteMetadataBlockheightEndpointRequest, opts ...grpc.CallOption) (*NullValue, error)
}

type metadataServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetadataServiceClient(cc *grpc.ClientConn) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) GetMetadataAddressEndpoint(ctx context.Context, in *GetMetadataAddressEndpointRequest, opts ...grpc.CallOption) (*KeyValues, error) {
	out := new(KeyValues)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/GetMetadataAddressEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetMetadataTxhashEndpoint(ctx context.Context, in *GetMetadataTxhashEndpointRequest, opts ...grpc.CallOption) (*KeyValues, error) {
	out := new(KeyValues)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/GetMetadataTxhashEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetMetadataBlockhashEndpoint(ctx context.Context, in *GetMetadataBlockhashEndpointRequest, opts ...grpc.CallOption) (*KeyValues, error) {
	out := new(KeyValues)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/GetMetadataBlockhashEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) PutMetadataAddressEndpoint(ctx context.Context, in *PutMetadataAddressEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/PutMetadataAddressEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) PutMetadataTxhashEndpoint(ctx context.Context, in *PutMetadataTxhashEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/PutMetadataTxhashEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) PutMetadataBlockhashEndpoint(ctx context.Context, in *PutMetadataBlockhashEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/PutMetadataBlockhashEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteMetadataAddressEndpoint(ctx context.Context, in *DeleteMetadataAddressEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/DeleteMetadataAddressEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteMetadataTxhashEndpoint(ctx context.Context, in *DeleteMetadataTxhashEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/DeleteMetadataTxhashEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteMetadataBlockheightEndpoint(ctx context.Context, in *DeleteMetadataBlockheightEndpointRequest, opts ...grpc.CallOption) (*NullValue, error) {
	out := new(NullValue)
	err := c.cc.Invoke(ctx, "/fairwaycorp.blockchainprotobuf.btc.MetadataService/DeleteMetadataBlockheightEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
type MetadataServiceServer interface {
	GetMetadataAddressEndpoint(context.Context, *GetMetadataAddressEndpointRequest) (*KeyValues, error)
	GetMetadataTxhashEndpoint(context.Context, *GetMetadataTxhashEndpointRequest) (*KeyValues, error)
	GetMetadataBlockhashEndpoint(context.Context, *GetMetadataBlockhashEndpointRequest) (*KeyValues, error)
	PutMetadataAddressEndpoint(context.Context, *PutMetadataAddressEndpointRequest) (*NullValue, error)
	PutMetadataTxhashEndpoint(context.Context, *PutMetadataTxhashEndpointRequest) (*NullValue, error)
	PutMetadataBlockhashEndpoint(context.Context, *PutMetadataBlockhashEndpointRequest) (*NullValue, error)
	DeleteMetadataAddressEndpoint(context.Context, *DeleteMetadataAddressEndpointRequest) (*NullValue, error)
	DeleteMetadataTxhashEndpoint(context.Context, *DeleteMetadataTxhashEndpointRequest) (*NullValue, error)
	DeleteMetadataBlockheightEndpoint(context.Context, *DeleteMetadataBlockheightEndpointRequest) (*NullValue, error)
}

func RegisterMetadataServiceServer(s *grpc.Server, srv MetadataServiceServer) {
	s.RegisterService(&_MetadataService_serviceDesc, srv)
}

func _MetadataService_GetMetadataAddressEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataAddressEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetMetadataAddressEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/GetMetadataAddressEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetMetadataAddressEndpoint(ctx, req.(*GetMetadataAddressEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetMetadataTxhashEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataTxhashEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetMetadataTxhashEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/GetMetadataTxhashEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetMetadataTxhashEndpoint(ctx, req.(*GetMetadataTxhashEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetMetadataBlockhashEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataBlockhashEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetMetadataBlockhashEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/GetMetadataBlockhashEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetMetadataBlockhashEndpoint(ctx, req.(*GetMetadataBlockhashEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_PutMetadataAddressEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMetadataAddressEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).PutMetadataAddressEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/PutMetadataAddressEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).PutMetadataAddressEndpoint(ctx, req.(*PutMetadataAddressEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_PutMetadataTxhashEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMetadataTxhashEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).PutMetadataTxhashEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/PutMetadataTxhashEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).PutMetadataTxhashEndpoint(ctx, req.(*PutMetadataTxhashEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_PutMetadataBlockhashEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMetadataBlockhashEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).PutMetadataBlockhashEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/PutMetadataBlockhashEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).PutMetadataBlockhashEndpoint(ctx, req.(*PutMetadataBlockhashEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteMetadataAddressEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetadataAddressEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteMetadataAddressEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/DeleteMetadataAddressEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteMetadataAddressEndpoint(ctx, req.(*DeleteMetadataAddressEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteMetadataTxhashEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetadataTxhashEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteMetadataTxhashEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/DeleteMetadataTxhashEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteMetadataTxhashEndpoint(ctx, req.(*DeleteMetadataTxhashEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteMetadataBlockheightEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetadataBlockheightEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteMetadataBlockheightEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairwaycorp.blockchainprotobuf.btc.MetadataService/DeleteMetadataBlockheightEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteMetadataBlockheightEndpoint(ctx, req.(*DeleteMetadataBlockheightEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairwaycorp.blockchainprotobuf.btc.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadataAddressEndpoint",
			Handler:    _MetadataService_GetMetadataAddressEndpoint_Handler,
		},
		{
			MethodName: "GetMetadataTxhashEndpoint",
			Handler:    _MetadataService_GetMetadataTxhashEndpoint_Handler,
		},
		{
			MethodName: "GetMetadataBlockhashEndpoint",
			Handler:    _MetadataService_GetMetadataBlockhashEndpoint_Handler,
		},
		{
			MethodName: "PutMetadataAddressEndpoint",
			Handler:    _MetadataService_PutMetadataAddressEndpoint_Handler,
		},
		{
			MethodName: "PutMetadataTxhashEndpoint",
			Handler:    _MetadataService_PutMetadataTxhashEndpoint_Handler,
		},
		{
			MethodName: "PutMetadataBlockhashEndpoint",
			Handler:    _MetadataService_PutMetadataBlockhashEndpoint_Handler,
		},
		{
			MethodName: "DeleteMetadataAddressEndpoint",
			Handler:    _MetadataService_DeleteMetadataAddressEndpoint_Handler,
		},
		{
			MethodName: "DeleteMetadataTxhashEndpoint",
			Handler:    _MetadataService_DeleteMetadataTxhashEndpoint_Handler,
		},
		{
			MethodName: "DeleteMetadataBlockheightEndpoint",
			Handler:    _MetadataService_DeleteMetadataBlockheightEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadataService.proto",
}
