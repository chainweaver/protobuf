/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.Block', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.Blockchain', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.Feature', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.Blockchain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.Blockchain.displayName = 'proto.fairwaycorp.blockchainprotobuf.Blockchain';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.Blockchain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.Blockchain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    time: jspb.Message.getFieldWithDefault(msg, 4, ""),
    latestUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    previousHash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    previousUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    peerCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    highFeePerKb: jspb.Message.getFieldWithDefault(msg, 9, 0),
    mediumFeePerKb: jspb.Message.getFieldWithDefault(msg, 10, 0),
    lowFeePerKb: jspb.Message.getFieldWithDefault(msg, 11, 0),
    unconfirmedCount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    lastForkHeight: jspb.Message.getFieldWithDefault(msg, 13, 0),
    lastForkHash: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.Blockchain}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.Blockchain;
  return proto.fairwaycorp.blockchainprotobuf.Blockchain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.Blockchain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.Blockchain}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousHash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousUrl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeerCount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHighFeePerKb(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMediumFeePerKb(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLowFeePerKb(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnconfirmedCount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastForkHeight(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastForkHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.Blockchain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.Blockchain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLatestUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPreviousUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPeerCount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getHighFeePerKb();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMediumFeePerKb();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getLowFeePerKb();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getUnconfirmedCount();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getLastForkHeight();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getLastForkHash();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string time = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string latest_url = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getLatestUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setLatestUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string previous_hash = 6;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getPreviousHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setPreviousHash = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string previous_url = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getPreviousUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setPreviousUrl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 peer_count = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getPeerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setPeerCount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 high_fee_per_kb = 9;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getHighFeePerKb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setHighFeePerKb = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 medium_fee_per_kb = 10;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getMediumFeePerKb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setMediumFeePerKb = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 low_fee_per_kb = 11;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getLowFeePerKb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setLowFeePerKb = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 unconfirmed_count = 12;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getUnconfirmedCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setUnconfirmedCount = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 last_fork_height = 13;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getLastForkHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setLastForkHeight = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string last_fork_hash = 14;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.getLastForkHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Blockchain.prototype.setLastForkHash = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.Block.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.Block.displayName = 'proto.fairwaycorp.blockchainprotobuf.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.Block.repeatedFields_ = [19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    depth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chain: jspb.Message.getFieldWithDefault(msg, 4, ""),
    total: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fees: jspb.Message.getFieldWithDefault(msg, 6, 0),
    size: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ver: jspb.Message.getFieldWithDefault(msg, 8, 0),
    time: jspb.Message.getFieldWithDefault(msg, 9, ""),
    receivedTime: jspb.Message.getFieldWithDefault(msg, 10, ""),
    relayedBy: jspb.Message.getFieldWithDefault(msg, 11, ""),
    bits: jspb.Message.getFieldWithDefault(msg, 12, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 13, 0),
    nTx: jspb.Message.getFieldWithDefault(msg, 14, 0),
    prevBlock: jspb.Message.getFieldWithDefault(msg, 15, ""),
    prevBlockUrl: jspb.Message.getFieldWithDefault(msg, 16, ""),
    txUrl: jspb.Message.getFieldWithDefault(msg, 17, ""),
    mrklRoot: jspb.Message.getFieldWithDefault(msg, 18, ""),
    txidsList: jspb.Message.getRepeatedField(msg, 19),
    nextTxids: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.Block}
 */
proto.fairwaycorp.blockchainprotobuf.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.Block;
  return proto.fairwaycorp.blockchainprotobuf.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.Block}
 */
proto.fairwaycorp.blockchainprotobuf.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChain(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVer(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivedTime(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayedBy(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBits(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNonce(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNTx(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevBlock(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevBlockUrl(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxUrl(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrklRoot(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxids(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextTxids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getChain();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getVer();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReceivedTime();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRelayedBy();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getBits();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getNTx();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getPrevBlock();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getPrevBlockUrl();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getTxUrl();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getMrklRoot();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getTxidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = message.getNextTxids();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 depth = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string chain = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setChain = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 total = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 fees = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setFees = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 size = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 ver = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setVer = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string time = 9;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string received_time = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getReceivedTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setReceivedTime = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string relayed_by = 11;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getRelayedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setRelayedBy = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 bits = 12;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setBits = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 nonce = 13;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 n_tx = 14;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setNTx = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string prev_block = 15;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getPrevBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setPrevBlock = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string prev_block_url = 16;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getPrevBlockUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setPrevBlockUrl = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string tx_url = 17;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getTxUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setTxUrl = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string mrkl_root = 18;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getMrklRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setMrklRoot = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated string txids = 19;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getTxidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setTxidsList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.addTxids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.Block.prototype.clearTxidsList = function() {
  this.setTxidsList([]);
};


/**
 * optional string next_txids = 20;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.getNextTxids = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Block.prototype.setNextTxids = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.Feature.displayName = 'proto.fairwaycorp.blockchainprotobuf.Feature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.Feature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastTransitionHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lastTransitionHash: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.Feature}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.Feature;
  return proto.fairwaycorp.blockchainprotobuf.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.Feature}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastTransitionHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastTransitionHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastTransitionHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLastTransitionHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string state = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 last_transition_height = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.getLastTransitionHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.setLastTransitionHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string last_transition_hash = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.getLastTransitionHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.Feature.prototype.setLastTransitionHash = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.ChainEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string block_hash = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.BlockHashEndpointRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 block_height = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.BlockHeightEndpointRequest.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.FeatureEndpointRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.fairwaycorp.blockchainprotobuf);
