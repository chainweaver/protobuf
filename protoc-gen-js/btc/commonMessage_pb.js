/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.Address', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.AddressForward', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.ArrayString', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.HDAddress', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.HDChain', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.HDWallet', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.Job', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.JobArgs', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.JobResults', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.NullData', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.NullValue', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.OAPTX', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TX', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TXInput', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TXOutput', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TXRef', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TXS', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TXerror', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.Wallet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.NullValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.NullValue.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.NullValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValue.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.NullValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NullValue}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.NullValue;
  return proto.fairwaycorp.blockchainprotobuf.btc.NullValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NullValue}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.NullValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.NullValueRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.ArrayString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.ArrayString';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.ArrayString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.toObject = function(includeInstance, msg) {
  var f, obj = {
    arraystringList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.ArrayString}
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.ArrayString;
  return proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.ArrayString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.ArrayString}
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addArraystring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.ArrayString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArraystringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string arraystring = 1;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.prototype.getArraystringList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.prototype.setArraystringList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.prototype.addArraystring = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.ArrayString.prototype.clearArraystringList = function() {
  this.setArraystringList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.TXInput.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TXInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TXInput.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TXInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TXInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    prevHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outputValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scriptType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    script: jspb.Message.getFieldWithDefault(msg, 5, ""),
    addressesList: jspb.Message.getRepeatedField(msg, 6),
    sequence: jspb.Message.getFieldWithDefault(msg, 7, 0),
    age: jspb.Message.getFieldWithDefault(msg, 8, 0),
    walletName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    walletToken: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TXInput;
  return proto.fairwaycorp.blockchainprotobuf.btc.TXInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TXInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrevHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOutputValue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getScriptType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScript();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getWalletName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getWalletToken();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string prev_hash = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getPrevHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setPrevHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 output_index = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setOutputIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 output_value = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getOutputValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setOutputValue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string script_type = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getScriptType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setScriptType = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string script = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setScript = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string addresses = 6;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setAddressesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.addAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};


/**
 * optional int32 sequence = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 age = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setAge = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string wallet_name = 9;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getWalletName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setWalletName = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string wallet_token = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.getWalletToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXInput.prototype.setWalletToken = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TXOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TXOutput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    script: jspb.Message.getFieldWithDefault(msg, 2, ""),
    addressesList: jspb.Message.getRepeatedField(msg, 3),
    scriptType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    spentBy: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dataHex: jspb.Message.getFieldWithDefault(msg, 6, ""),
    dataString: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TXOutput;
  return proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpentBy(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataHex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScript();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getScriptType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSpentBy();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDataHex();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDataString();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string script = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.setScript = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.setAddressesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.addAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};


/**
 * optional string script_type = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.getScriptType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.setScriptType = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string spent_by = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.getSpentBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.setSpentBy = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string data_hex = 6;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.getDataHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.setDataHex = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string data_string = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.getDataString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.prototype.setDataString = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.TX.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TX, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TX.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TX';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.repeatedFields_ = [3,16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TX.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TX} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    addressesList: jspb.Message.getRepeatedField(msg, 3),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fees: jspb.Message.getFieldWithDefault(msg, 5, 0),
    size: jspb.Message.getFieldWithDefault(msg, 6, 0),
    preference: jspb.Message.getFieldWithDefault(msg, 7, ""),
    relayedBy: jspb.Message.getFieldWithDefault(msg, 8, ""),
    received: (f = msg.getReceived()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    ver: jspb.Message.getFieldWithDefault(msg, 10, 0),
    lockTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    doubleSpend: jspb.Message.getFieldWithDefault(msg, 12, false),
    vinSz: jspb.Message.getFieldWithDefault(msg, 13, 0),
    voutSz: jspb.Message.getFieldWithDefault(msg, 14, 0),
    confirmations: jspb.Message.getFieldWithDefault(msg, 15, 0),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.TXInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.toObject, includeInstance),
    optInRbf: jspb.Message.getFieldWithDefault(msg, 18, false),
    confidence: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    confirmed: (f = msg.getConfirmed()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    receiveCount: jspb.Message.getFieldWithDefault(msg, 21, 0),
    changeAddress: jspb.Message.getFieldWithDefault(msg, 22, ""),
    blockHash: jspb.Message.getFieldWithDefault(msg, 23, ""),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 24, 0),
    doubleOf: jspb.Message.getFieldWithDefault(msg, 25, ""),
    dataProtocol: jspb.Message.getFieldWithDefault(msg, 26, ""),
    hex: jspb.Message.getFieldWithDefault(msg, 27, ""),
    nextInputs: (f = msg.getNextInputs()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    nextOutputs: (f = msg.getNextOutputs()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TX;
  return proto.fairwaycorp.blockchainprotobuf.btc.TX.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TX} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreference(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayedBy(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReceived(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVer(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLockTime(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoubleSpend(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVinSz(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoutSz(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmations(value);
      break;
    case 16:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TXInput;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TXInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 17:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TXOutput;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptInRbf(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 20:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setConfirmed(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiveCount(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setChangeAddress(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockIndex(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleOf(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataProtocol(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setHex(value);
      break;
    case 28:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setNextInputs(value);
      break;
    case 29:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setNextOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TX.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TX} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPreference();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRelayedBy();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getReceived();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getVer();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getDoubleSpend();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getVinSz();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getVoutSz();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TXInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TXOutput.serializeBinaryToWriter
    );
  }
  f = message.getOptInRbf();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = message.getConfirmed();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReceiveCount();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getChangeAddress();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getDoubleOf();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getDataProtocol();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getHex();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getNextInputs();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getNextOutputs();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 block_height = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setAddressesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.addAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};


/**
 * optional int32 total = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 fees = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setFees = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 size = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string preference = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getPreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setPreference = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string relayed_by = 8;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getRelayedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setRelayedBy = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp received = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getReceived = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setReceived = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.clearReceived = function() {
  this.setReceived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.hasReceived = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 ver = 10;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setVer = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 lock_time = 11;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setLockTime = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool double_spend = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getDoubleSpend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setDoubleSpend = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional int32 vin_sz = 13;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getVinSz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setVinSz = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 vout_sz = 14;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getVoutSz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setVoutSz = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 confirmations = 15;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setConfirmations = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * repeated TXInput inputs = 16;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXInput>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TXInput, 16));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXInput>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXInput, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated TXOutput outputs = 17;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TXOutput, 17));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXOutput, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


/**
 * optional bool opt_in_rbf = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getOptInRbf = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setOptInRbf = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional float confidence = 19;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setConfidence = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional google.protobuf.Timestamp confirmed = 20;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getConfirmed = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 20));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setConfirmed = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.clearConfirmed = function() {
  this.setConfirmed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.hasConfirmed = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int32 receive_count = 21;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getReceiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setReceiveCount = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional string change_address = 22;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getChangeAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setChangeAddress = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string block_hash = 23;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional int32 block_index = 24;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setBlockIndex = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional string double_of = 25;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getDoubleOf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setDoubleOf = function(value) {
  jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional string data_protocol = 26;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getDataProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setDataProtocol = function(value) {
  jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional string hex = 27;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setHex = function(value) {
  jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional google.protobuf.Any next_inputs = 28;
 * @return {?proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getNextInputs = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 28));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setNextInputs = function(value) {
  jspb.Message.setWrapperField(this, 28, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.clearNextInputs = function() {
  this.setNextInputs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.hasNextInputs = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional google.protobuf.Any next_outputs = 29;
 * @return {?proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.getNextOutputs = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 29));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.setNextOutputs = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.clearNextOutputs = function() {
  this.setNextOutputs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TX.prototype.hasNextOutputs = function() {
  return jspb.Message.getField(this, 29) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.Wallet.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.Wallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.Wallet.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.Wallet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.Wallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Wallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    addressesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.Wallet}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.Wallet;
  return proto.fairwaycorp.blockchainprotobuf.btc.Wallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Wallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.Wallet}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.Wallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Wallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.setAddressesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.addAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.Wallet.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.HDWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.HDWallet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDWallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainsList: jspb.Message.toObjectList(msg.getChainsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.HDChain.toObject, includeInstance),
    hd: jspb.Message.getFieldWithDefault(msg, 4, false),
    extendedPublicKey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    subchainIndexesList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDWallet}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.HDWallet;
  return proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDWallet}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.HDChain;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.HDChain.deserializeBinaryFromReader);
      msg.addChains(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHd(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtendedPublicKey(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setSubchainIndexesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.HDChain.serializeBinaryToWriter
    );
  }
  f = message.getHd();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getExtendedPublicKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSubchainIndexesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated HDChain chains = 3;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.HDChain>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.getChainsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.HDChain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.HDChain, 3));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.HDChain>} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.setChainsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDChain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDChain}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.addChains = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.HDChain, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.clearChainsList = function() {
  this.setChainsList([]);
};


/**
 * optional bool hd = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.getHd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.setHd = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string extended_public_key = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.getExtendedPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.setExtendedPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated int32 subchain_indexes = 6;
 * @return {!Array<number>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.getSubchainIndexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<number>} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.setSubchainIndexesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.addSubchainIndexes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.prototype.clearSubchainIndexesList = function() {
  this.setSubchainIndexesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.HDChain.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.HDChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.HDChain.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.HDChain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.HDChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainAddressesList: jspb.Message.toObjectList(msg.getChainAddressesList(),
    proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.toObject, includeInstance),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDChain}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.HDChain;
  return proto.fairwaycorp.blockchainprotobuf.btc.HDChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDChain}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.HDAddress;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.deserializeBinaryFromReader);
      msg.addChainAddresses(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.HDChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated HDAddress chain_addresses = 1;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.getChainAddressesList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.HDAddress, 1));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress>} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.setChainAddressesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.addChainAddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.HDAddress, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.clearChainAddressesList = function() {
  this.setChainAddressesList([]);
};


/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDChain.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.Address.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.Address.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.Address';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.repeatedFields_ = [13,14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wallet: (f = msg.getWallet()) && proto.fairwaycorp.blockchainprotobuf.btc.Wallet.toObject(includeInstance, f),
    hdWallet: (f = msg.getHdWallet()) && proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.toObject(includeInstance, f),
    totalReceived: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalSent: jspb.Message.getFieldWithDefault(msg, 5, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 6, 0),
    unconfirmedBalance: jspb.Message.getFieldWithDefault(msg, 7, 0),
    finalBalance: jspb.Message.getFieldWithDefault(msg, 8, 0),
    nTx: jspb.Message.getFieldWithDefault(msg, 9, 0),
    unconfirmedNTx: jspb.Message.getFieldWithDefault(msg, 10, 0),
    finalNTx: jspb.Message.getFieldWithDefault(msg, 11, 0),
    txUrl: (f = msg.getTxUrl()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.TX.toObject, includeInstance),
    txrefsList: jspb.Message.toObjectList(msg.getTxrefsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.TXRef.toObject, includeInstance),
    unconfirmedTxrefsList: jspb.Message.toObjectList(msg.getUnconfirmedTxrefsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.TXRef.toObject, includeInstance),
    hasmore: jspb.Message.getFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.Address}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.Address;
  return proto.fairwaycorp.blockchainprotobuf.btc.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.Address}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.Wallet;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.Wallet.deserializeBinaryFromReader);
      msg.setWallet(value);
      break;
    case 3:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.HDWallet;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.deserializeBinaryFromReader);
      msg.setHdWallet(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalReceived(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalSent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBalance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnconfirmedBalance(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFinalBalance(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNTx(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnconfirmedNTx(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFinalNTx(value);
      break;
    case 12:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setTxUrl(value);
      break;
    case 13:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TX;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TX.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 14:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TXRef;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TXRef.deserializeBinaryFromReader);
      msg.addTxrefs(value);
      break;
    case 15:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TXRef;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TXRef.deserializeBinaryFromReader);
      msg.addUnconfirmedTxrefs(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasmore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.Wallet.serializeBinaryToWriter
    );
  }
  f = message.getHdWallet();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.HDWallet.serializeBinaryToWriter
    );
  }
  f = message.getTotalReceived();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTotalSent();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUnconfirmedBalance();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getFinalBalance();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getNTx();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getUnconfirmedNTx();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getFinalNTx();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTxUrl();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TX.serializeBinaryToWriter
    );
  }
  f = message.getTxrefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TXRef.serializeBinaryToWriter
    );
  }
  f = message.getUnconfirmedTxrefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TXRef.serializeBinaryToWriter
    );
  }
  f = message.getHasmore();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Wallet wallet = 2;
 * @return {?proto.fairwaycorp.blockchainprotobuf.btc.Wallet}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getWallet = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.btc.Wallet} */ (
    jspb.Message.getWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.Wallet, 2));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.btc.Wallet|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setWallet = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.clearWallet = function() {
  this.setWallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HDWallet hd_wallet = 3;
 * @return {?proto.fairwaycorp.blockchainprotobuf.btc.HDWallet}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getHdWallet = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.btc.HDWallet} */ (
    jspb.Message.getWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.HDWallet, 3));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.btc.HDWallet|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setHdWallet = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.clearHdWallet = function() {
  this.setHdWallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.hasHdWallet = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 total_received = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getTotalReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setTotalReceived = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 total_sent = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getTotalSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setTotalSent = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 balance = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setBalance = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 unconfirmed_balance = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getUnconfirmedBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setUnconfirmedBalance = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 final_balance = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getFinalBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setFinalBalance = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 n_tx = 9;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setNTx = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 unconfirmed_n_tx = 10;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getUnconfirmedNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setUnconfirmedNTx = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 final_n_tx = 11;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getFinalNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setFinalNTx = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional google.protobuf.Any tx_url = 12;
 * @return {?proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getTxUrl = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 12));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setTxUrl = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.clearTxUrl = function() {
  this.setTxUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.hasTxUrl = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated TX txs = 13;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TX>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TX>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TX, 13));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TX>} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TX=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TX, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.clearTxsList = function() {
  this.setTxsList([]);
};


/**
 * repeated TXRef txrefs = 14;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXRef>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getTxrefsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TXRef, 14));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXRef>} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setTxrefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.addTxrefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXRef, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.clearTxrefsList = function() {
  this.setTxrefsList([]);
};


/**
 * repeated TXRef unconfirmed_txrefs = 15;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXRef>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getUnconfirmedTxrefsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TXRef, 15));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXRef>} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setUnconfirmedTxrefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.addUnconfirmedTxrefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXRef, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.clearUnconfirmedTxrefsList = function() {
  this.setUnconfirmedTxrefsList([]);
};


/**
 * optional bool hasMore = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.getHasmore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.Address.prototype.setHasmore = function(value) {
  jspb.Message.setProto3BooleanField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.HDAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.HDAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pb_public: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.HDAddress;
  return proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.HDAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublic();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string public = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.getPublic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.HDAddress.prototype.setPublic = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_public: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pb_private: jspb.Message.getFieldWithDefault(msg, 3, ""),
    wif: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pubkeysList: jspb.Message.getRepeatedField(msg, 5),
    scriptType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    originalAddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    oapAddress: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain;
  return proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWif(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPubkeys(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalAddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOapAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrivate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWif();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPubkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getScriptType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOriginalAddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOapAddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getPublic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setPublic = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string private = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getPrivate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setPrivate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string wif = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getWif = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setWif = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string pubkeys = 5;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getPubkeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setPubkeysList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.addPubkeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.clearPubkeysList = function() {
  this.setPubkeysList([]);
};


/**
 * optional string script_type = 6;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getScriptType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setScriptType = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string original_address = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getOriginalAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setOriginalAddress = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string oap_address = 8;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.getOapAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressKeychain.prototype.setOapAddress = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TXRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TXRef.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TXRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TXRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    txInputN: jspb.Message.getFieldWithDefault(msg, 4, 0),
    txOutputN: jspb.Message.getFieldWithDefault(msg, 5, 0),
    value: jspb.Message.getFieldWithDefault(msg, 6, 0),
    preference: jspb.Message.getFieldWithDefault(msg, 7, ""),
    spent: jspb.Message.getFieldWithDefault(msg, 8, false),
    doubleSpend: jspb.Message.getFieldWithDefault(msg, 9, false),
    confirmations: jspb.Message.getFieldWithDefault(msg, 10, 0),
    script: jspb.Message.getFieldWithDefault(msg, 11, ""),
    refBalance: jspb.Message.getFieldWithDefault(msg, 12, 0),
    confidence: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    confirmed: (f = msg.getConfirmed()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    spentBy: jspb.Message.getFieldWithDefault(msg, 15, ""),
    received: (f = msg.getReceived()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    receiveCount: jspb.Message.getFieldWithDefault(msg, 17, 0),
    doubleOf: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TXRef;
  return proto.fairwaycorp.blockchainprotobuf.btc.TXRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTxInputN(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTxOutputN(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreference(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpent(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoubleSpend(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmations(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefBalance(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 14:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setConfirmed(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpentBy(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReceived(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiveCount(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleOf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TXRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTxInputN();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTxOutputN();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPreference();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSpent();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getDoubleSpend();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getScript();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRefBalance();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getConfirmed();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSpentBy();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getReceived();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReceiveCount();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getDoubleOf();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 block_height = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string tx_hash = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setTxHash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 tx_input_n = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getTxInputN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setTxInputN = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 tx_output_n = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getTxOutputN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setTxOutputN = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 value = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string preference = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getPreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setPreference = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool spent = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getSpent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setSpent = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool double_spend = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getDoubleSpend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setDoubleSpend = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int32 confirmations = 10;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setConfirmations = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string script = 11;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setScript = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 ref_balance = 12;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getRefBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setRefBalance = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional float confidence = 13;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setConfidence = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional google.protobuf.Timestamp confirmed = 14;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getConfirmed = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 14));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setConfirmed = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.clearConfirmed = function() {
  this.setConfirmed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.hasConfirmed = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string spent_by = 15;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getSpentBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setSpentBy = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional google.protobuf.Timestamp received = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getReceived = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setReceived = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.clearReceived = function() {
  this.setReceived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.hasReceived = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 receive_count = 17;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getReceiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setReceiveCount = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string double_of = 18;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.getDoubleOf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXRef.prototype.setDoubleOf = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromPrivate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    metadata: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue;
  return proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromPrivate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromPrivate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string from_private = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.getFromPrivate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.setFromPrivate = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_address = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.setToAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 amount = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string metadata = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssue.prototype.setMetadata = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fromPrivate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    toAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    metadata: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromPrivate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFromPrivate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string from_private = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.getFromPrivate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.setFromPrivate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to_address = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.setToAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 amount = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string metadata = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPIssueRequest.prototype.setMetadata = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.OAPTX, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.OAPTX';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPTX} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.toObject = function(includeInstance, msg) {
  var f, obj = {
    ver: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assetid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    confirmed: (f = msg.getConfirmed()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    received: (f = msg.getReceived()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    oapMeta: jspb.Message.getFieldWithDefault(msg, 6, ""),
    doubleSpend: jspb.Message.getFieldWithDefault(msg, 7, false),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    google_protobuf_any_pb.Any.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    google_protobuf_any_pb.Any.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.OAPTX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.OAPTX;
  return proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPTX} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.OAPTX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setConfirmed(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReceived(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOapMeta(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoubleSpend(value);
      break;
    case 8:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 9:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.OAPTX} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVer();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAssetid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfirmed();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReceived();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getOapMeta();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDoubleSpend();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 ver = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setVer = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string assetid = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getAssetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setAssetid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp confirmed = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getConfirmed = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setConfirmed = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.clearConfirmed = function() {
  this.setConfirmed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.hasConfirmed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp received = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getReceived = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setReceived = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.clearReceived = function() {
  this.setReceived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.hasReceived = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string oap_meta = 6;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getOapMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setOapMeta = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool double_spend = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getDoubleSpend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setDoubleSpend = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated google.protobuf.Any inputs = 8;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 8));
};


/** @param {!Array<!proto.google.protobuf.Any>} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.google.protobuf.Any, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated google.protobuf.Any outputs = 9;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 9));
};


/** @param {!Array<!proto.google.protobuf.Any>} value */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.google.protobuf.Any, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.OAPTX.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.repeatedFields_ = [2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && proto.fairwaycorp.blockchainprotobuf.btc.TX.toObject(includeInstance, f),
    tosignList: jspb.Message.getRepeatedField(msg, 2),
    signaturesList: jspb.Message.getRepeatedField(msg, 3),
    pubkeysList: jspb.Message.getRepeatedField(msg, 4),
    tosignTxList: jspb.Message.getRepeatedField(msg, 5),
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.TXerror.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton;
  return proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TX;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TX.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTosign(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignatures(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPubkeys(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTosignTx(value);
      break;
    case 6:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TXerror;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TXerror.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TX.serializeBinaryToWriter
    );
  }
  f = message.getTosignList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPubkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTosignTxList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TXerror.serializeBinaryToWriter
    );
  }
};


/**
 * optional TX tx = 1;
 * @return {?proto.fairwaycorp.blockchainprotobuf.btc.TX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.getTx = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.btc.TX} */ (
    jspb.Message.getWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TX, 1));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.btc.TX|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.clearTx = function() {
  this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string tosign = 2;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.getTosignList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.setTosignList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.addTosign = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.clearTosignList = function() {
  this.setTosignList([]);
};


/**
 * repeated string signatures = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.getSignaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.setSignaturesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.addSignatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};


/**
 * repeated string pubkeys = 4;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.getPubkeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.setPubkeysList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.addPubkeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.clearPubkeysList = function() {
  this.setPubkeysList([]);
};


/**
 * repeated string tosign_tx = 5;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.getTosignTxList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.setTosignTxList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.addTosignTx = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.clearTosignTxList = function() {
  this.setTosignTxList([]);
};


/**
 * repeated TXerror errors = 6;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXerror>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXerror>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TXerror, 6));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXerror>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXerror, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXSkeleton.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TXerror, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TXerror.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TXerror';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TXerror.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TXerror;
  return proto.fairwaycorp.blockchainprotobuf.btc.TXerror.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TXerror.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXerror.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.NullData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.NullData.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.NullData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.NullData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    encoding: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NullData}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.NullData;
  return proto.fairwaycorp.blockchainprotobuf.btc.NullData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NullData}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoding(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.NullData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.NullData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEncoding();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string encoding = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.getEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.setEncoding = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string hash = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.NullData.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstLocation: (f = msg.getFirstLocation()) && proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.toObject(includeInstance, f),
    firstCity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    firstCountry: jspb.Message.getFieldWithDefault(msg, 4, ""),
    aggregatedOrigin: (f = msg.getAggregatedOrigin()) && proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.toObject(includeInstance, f),
    aggregatedOriginRadius: jspb.Message.getFieldWithDefault(msg, 6, 0),
    firstReceived: (f = msg.getFirstReceived()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow;
  return proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransaction(value);
      break;
    case 2:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.deserializeBinaryFromReader);
      msg.setFirstLocation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstCountry(value);
      break;
    case 5:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.deserializeBinaryFromReader);
      msg.setAggregatedOrigin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAggregatedOriginRadius(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFirstReceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.serializeBinaryToWriter
    );
  }
  f = message.getFirstCity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFirstCountry();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAggregatedOrigin();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.serializeBinaryToWriter
    );
  }
  f = message.getAggregatedOriginRadius();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getFirstReceived();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transaction = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.setTransaction = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FirstLocation first_location = 2;
 * @return {?proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.getFirstLocation = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation} */ (
    jspb.Message.getWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation, 2));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.setFirstLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.clearFirstLocation = function() {
  this.setFirstLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.hasFirstLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string first_city = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.getFirstCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.setFirstCity = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string first_country = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.getFirstCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.setFirstCountry = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional AggregatedOrigin aggregated_origin = 5;
 * @return {?proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.getAggregatedOrigin = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin} */ (
    jspb.Message.getWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin, 5));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.setAggregatedOrigin = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.clearAggregatedOrigin = function() {
  this.setAggregatedOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.hasAggregatedOrigin = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 aggregated_origin_radius = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.getAggregatedOriginRadius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.setAggregatedOriginRadius = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp first_received = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.getFirstReceived = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.setFirstReceived = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.clearFirstReceived = function() {
  this.setFirstReceived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DescribedBelow.prototype.hasFirstReceived = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation}
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation;
  return proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation}
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float latitude = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float longitude = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.FirstLocation.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin;
  return proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float latitude = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float longitude = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.AggregatedOrigin.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.JobArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.JobArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueThreshold: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    degree: jspb.Message.getFieldWithDefault(msg, 6, 0),
    source: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.JobArgs}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.JobArgs;
  return proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.JobArgs}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValueThreshold(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDegree(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueThreshold();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDegree();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 value_threshold = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.getValueThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.setValueThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp start = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.setStart = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.clearStart = function() {
  this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.hasStart = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp end = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.setEnd = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.clearEnd = function() {
  this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 degree = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.getDegree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.setDegree = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string source = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.Job, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.Job.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.Job';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.Job.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Job} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    analyticsEngine: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    completedAt: (f = msg.getCompletedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    finished: jspb.Message.getFieldWithDefault(msg, 5, false),
    started: jspb.Message.getFieldWithDefault(msg, 6, false),
    ticket: jspb.Message.getFieldWithDefault(msg, 7, ""),
    resultPath: (f = msg.getResultPath()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.Job}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.Job;
  return proto.fairwaycorp.blockchainprotobuf.btc.Job.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Job} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.Job}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnalyticsEngine(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCompletedAt(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinished(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStarted(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicket(value);
      break;
    case 8:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setResultPath(value);
      break;
    case 9:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.JobArgs;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.Job.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.Job} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnalyticsEngine();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCompletedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getStarted();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTicket();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getResultPath();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.JobArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string analytics_engine = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getAnalyticsEngine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setAnalyticsEngine = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp completed_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getCompletedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setCompletedAt = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.clearCompletedAt = function() {
  this.setCompletedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.hasCompletedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool finished = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getFinished = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setFinished = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool started = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setStarted = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string ticket = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setTicket = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional google.protobuf.Any result_path = 8;
 * @return {?proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getResultPath = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 8));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setResultPath = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.clearResultPath = function() {
  this.setResultPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.hasResultPath = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional JobArgs args = 9;
 * @return {?proto.fairwaycorp.blockchainprotobuf.btc.JobArgs}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.getArgs = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.btc.JobArgs} */ (
    jspb.Message.getWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.JobArgs, 9));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.btc.JobArgs|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.setArgs = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.clearArgs = function() {
  this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.Job.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.JobResults.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.JobResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.JobResults.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.JobResults';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.JobResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    more: jspb.Message.getFieldWithDefault(msg, 2, false),
    nextPage: (f = msg.getNextPage()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.JobResults}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.JobResults;
  return proto.fairwaycorp.blockchainprotobuf.btc.JobResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.JobResults}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMore(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setNextPage(value);
      break;
    case 4:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.JobResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMore();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNextPage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool more = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.getMore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.setMore = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Any next_page = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.getNextPage = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.setNextPage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.clearNextPage = function() {
  this.setNextPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.hasNextPage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated JobResultArr results = 4;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr, 4));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr>} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.JobResults.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstaddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcaddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    txhash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr;
  return proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstaddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcaddr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDstaddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcaddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string DstAddr = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.getDstaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.setDstaddr = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string SrcAddr = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.getSrcaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.setSrcaddr = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string TxHash = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.setTxhash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 Value = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.JobResultArr.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.TXS.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TXS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TXS.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TXS';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TXS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.toObject = function(includeInstance, msg) {
  var f, obj = {
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.fairwaycorp.blockchainprotobuf.btc.TX.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXS}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TXS;
  return proto.fairwaycorp.blockchainprotobuf.btc.TXS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXS}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fairwaycorp.blockchainprotobuf.btc.TX;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.btc.TX.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TXS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fairwaycorp.blockchainprotobuf.btc.TX.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TX txs = 1;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TX>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TX>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.btc.TX, 1));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TX>} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TX=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXS.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TX, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXS.prototype.clearTxsList = function() {
  this.setTxsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.toObject = function(includeInstance, msg) {
  var f, obj = {
    ageMillis: jspb.Message.getFieldWithDefault(msg, 1, 0),
    receiveCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    confidence: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    txhash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    txurl: (f = msg.getTxurl()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence;
  return proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgeMillis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiveCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 5:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setTxurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgeMillis();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReceiveCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTxurl();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 age_millis = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.getAgeMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.setAgeMillis = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 receive_count = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.getReceiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.setReceiveCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float confidence = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.setConfidence = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string txhash = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.setTxhash = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Any txurl = 5;
 * @return {?proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.getTxurl = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 5));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.setTxurl = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.clearTxurl = function() {
  this.setTxurl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TXConfidence.prototype.hasTxurl = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.AddressForward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.AddressForward';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AddressForward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    processFeesAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    processFeesSatoshis: jspb.Message.getFieldWithDefault(msg, 6, 0),
    processFeesPercent: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    callbackUrl: (f = msg.getCallbackUrl()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    enableConfirmations: jspb.Message.getFieldWithDefault(msg, 9, false),
    miningFeesSatoshis: jspb.Message.getFieldWithDefault(msg, 10, 0),
    txsList: jspb.Message.getRepeatedField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.AddressForward}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.AddressForward;
  return proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AddressForward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.AddressForward}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessFeesAddress(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessFeesSatoshis(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProcessFeesPercent(value);
      break;
    case 8:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setCallbackUrl(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableConfirmations(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMiningFeesSatoshis(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.AddressForward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProcessFeesAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProcessFeesSatoshis();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getProcessFeesPercent();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getCallbackUrl();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getEnableConfirmations();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getMiningFeesSatoshis();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string destination = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string input_address = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getInputAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setInputAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string process_fees_address = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getProcessFeesAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setProcessFeesAddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 process_fees_satoshis = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getProcessFeesSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setProcessFeesSatoshis = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float process_fees_percent = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getProcessFeesPercent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setProcessFeesPercent = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional google.protobuf.Any callback_url = 8;
 * @return {?proto.google.protobuf.Any}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getCallbackUrl = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 8));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setCallbackUrl = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.clearCallbackUrl = function() {
  this.setCallbackUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.hasCallbackUrl = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool enable_confirmations = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getEnableConfirmations = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setEnableConfirmations = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int32 mining_fees_satoshis = 10;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getMiningFeesSatoshis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setMiningFeesSatoshis = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated string txs = 11;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.getTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.setTxsList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.addTxs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.AddressForward.prototype.clearTxsList = function() {
  this.setTxsList([]);
};


/**
 * @enum {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias = {
  MAINNET: 0,
  MAINNET: 0,
  TEST: 1,
  TEST: 1
};

goog.object.extend(exports, proto.fairwaycorp.blockchainprotobuf.btc);
