/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var commonMessage_pb = require('./commonMessage_pb.js');
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    instart: jspb.Message.getFieldWithDefault(msg, 4, 0),
    outstart: jspb.Message.getFieldWithDefault(msg, 5, 0),
    includehex: jspb.Message.getFieldWithDefault(msg, 6, false),
    includeconfidence: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstart(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutstart(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludehex(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeconfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInstart();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOutstart();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIncludehex();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIncludeconfidence();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string txhash = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.setTxhash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 instart = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.getInstart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.setInstart = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 outstart = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.getOutstart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.setOutstart = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool includeHex = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.getIncludehex = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.setIncludehex = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool includeConfidence = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.getIncludeconfidence = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionHashEndpointRequest.prototype.setIncludeconfidence = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.UnconfirmedTransactionsEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.repeatedFields_ = [4,17,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    addressesList: jspb.Message.getRepeatedField(msg, 4),
    total: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fees: jspb.Message.getFieldWithDefault(msg, 6, 0),
    size: jspb.Message.getFieldWithDefault(msg, 7, 0),
    preference: jspb.Message.getFieldWithDefault(msg, 8, ""),
    relayedBy: jspb.Message.getFieldWithDefault(msg, 9, ""),
    received: jspb.Message.getFieldWithDefault(msg, 10, ""),
    ver: jspb.Message.getFieldWithDefault(msg, 11, 0),
    lockTime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    doubleSpend: jspb.Message.getFieldWithDefault(msg, 13, false),
    vinSz: jspb.Message.getFieldWithDefault(msg, 14, 0),
    voutSz: jspb.Message.getFieldWithDefault(msg, 15, 0),
    confirmations: jspb.Message.getFieldWithDefault(msg, 16, 0),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    commonMessage_pb.TXInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    commonMessage_pb.TXOutput.toObject, includeInstance),
    optInRbf: jspb.Message.getFieldWithDefault(msg, 19, false),
    confidence: +jspb.Message.getFieldWithDefault(msg, 20, 0.0),
    confirmed: jspb.Message.getFieldWithDefault(msg, 21, ""),
    receiveCount: jspb.Message.getFieldWithDefault(msg, 22, 0),
    changeAddress: jspb.Message.getFieldWithDefault(msg, 23, ""),
    blockHash: jspb.Message.getFieldWithDefault(msg, 24, ""),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 25, 0),
    doubleOf: jspb.Message.getFieldWithDefault(msg, 26, ""),
    dataProtocol: jspb.Message.getFieldWithDefault(msg, 27, ""),
    hex: jspb.Message.getFieldWithDefault(msg, 28, ""),
    nextInputs: jspb.Message.getFieldWithDefault(msg, 29, ""),
    nextOutputs: jspb.Message.getFieldWithDefault(msg, 30, ""),
    includetosigntx: jspb.Message.getFieldWithDefault(msg, 31, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreference(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayedBy(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceived(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVer(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLockTime(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoubleSpend(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVinSz(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoutSz(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmations(value);
      break;
    case 17:
      var value = new commonMessage_pb.TXInput;
      reader.readMessage(value,commonMessage_pb.TXInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 18:
      var value = new commonMessage_pb.TXOutput;
      reader.readMessage(value,commonMessage_pb.TXOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptInRbf(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmed(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiveCount(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setChangeAddress(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockIndex(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleOf(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataProtocol(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setHex(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextInputs(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextOutputs(value);
      break;
    case 31:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludetosigntx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPreference();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRelayedBy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReceived();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getVer();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDoubleSpend();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getVinSz();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getVoutSz();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      commonMessage_pb.TXInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      commonMessage_pb.TXOutput.serializeBinaryToWriter
    );
  }
  f = message.getOptInRbf();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      20,
      f
    );
  }
  f = message.getConfirmed();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getReceiveCount();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getChangeAddress();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getDoubleOf();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getDataProtocol();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getHex();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getNextInputs();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getNextOutputs();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getIncludetosigntx();
  if (f) {
    writer.writeBool(
      31,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 block_height = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string addresses = 4;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setAddressesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.addAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};


/**
 * optional int32 total = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 fees = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setFees = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 size = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string preference = 8;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getPreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setPreference = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string relayed_by = 9;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getRelayedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setRelayedBy = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string received = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getReceived = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setReceived = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 ver = 11;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setVer = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 lock_time = 12;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setLockTime = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool double_spend = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getDoubleSpend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setDoubleSpend = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional int32 vin_sz = 14;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getVinSz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setVinSz = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 vout_sz = 15;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getVoutSz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setVoutSz = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 confirmations = 16;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setConfirmations = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated TXInput inputs = 17;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXInput>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, commonMessage_pb.TXInput, 17));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXInput>} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXInput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXInput, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated TXOutput outputs = 18;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, commonMessage_pb.TXOutput, 18));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput>} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXOutput}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXOutput, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


/**
 * optional bool opt_in_rbf = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getOptInRbf = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setOptInRbf = function(value) {
  jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional float confidence = 20;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 20, 0.0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setConfidence = function(value) {
  jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional string confirmed = 21;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getConfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setConfirmed = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional int32 receive_count = 22;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getReceiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setReceiveCount = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional string change_address = 23;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getChangeAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setChangeAddress = function(value) {
  jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string block_hash = 24;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional int32 block_index = 25;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setBlockIndex = function(value) {
  jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional string double_of = 26;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getDoubleOf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setDoubleOf = function(value) {
  jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional string data_protocol = 27;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getDataProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setDataProtocol = function(value) {
  jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string hex = 28;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setHex = function(value) {
  jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string next_inputs = 29;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getNextInputs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setNextInputs = function(value) {
  jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional string next_outputs = 30;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getNextOutputs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setNextOutputs = function(value) {
  jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional bool includeToSignTx = 31;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.getIncludetosigntx = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 31, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.btc.CreateTransactionEndpointRequest.prototype.setIncludetosigntx = function(value) {
  jspb.Message.setProto3BooleanField(this, 31, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.repeatedFields_ = [3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tx: (f = msg.getTx()) && commonMessage_pb.TX.toObject(includeInstance, f),
    tosignList: jspb.Message.getRepeatedField(msg, 3),
    signaturesList: jspb.Message.getRepeatedField(msg, 4),
    pubkeysList: jspb.Message.getRepeatedField(msg, 5),
    tosignTxList: jspb.Message.getRepeatedField(msg, 6),
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    commonMessage_pb.TXerror.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = new commonMessage_pb.TX;
      reader.readMessage(value,commonMessage_pb.TX.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTosign(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignatures(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPubkeys(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addTosignTx(value);
      break;
    case 7:
      var value = new commonMessage_pb.TXerror;
      reader.readMessage(value,commonMessage_pb.TXerror.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      commonMessage_pb.TX.serializeBinaryToWriter
    );
  }
  f = message.getTosignList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getPubkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getTosignTxList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      commonMessage_pb.TXerror.serializeBinaryToWriter
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TX tx = 2;
 * @return {?proto.fairwaycorp.blockchainprotobuf.btc.TX}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.getTx = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.btc.TX} */ (
    jspb.Message.getWrapperField(this, commonMessage_pb.TX, 2));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.btc.TX|undefined} value */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.clearTx = function() {
  this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.hasTx = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string tosign = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.getTosignList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.setTosignList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.addTosign = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.clearTosignList = function() {
  this.setTosignList([]);
};


/**
 * repeated string signatures = 4;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.getSignaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.setSignaturesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.addSignatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};


/**
 * repeated string pubkeys = 5;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.getPubkeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.setPubkeysList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.addPubkeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.clearPubkeysList = function() {
  this.setPubkeysList([]);
};


/**
 * repeated string tosign_tx = 6;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.getTosignTxList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.setTosignTxList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.addTosignTx = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.clearTosignTxList = function() {
  this.setTosignTxList([]);
};


/**
 * repeated TXerror errors = 7;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXerror>}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXerror>} */ (
    jspb.Message.getRepeatedWrapperField(this, commonMessage_pb.TXerror, 7));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.btc.TXerror>} value */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TXerror}
 */
proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.fairwaycorp.blockchainprotobuf.btc.TXerror, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.btc.SendTransactionEndpointRequest.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tx: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTx();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string tx = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.prototype.getTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.PushRawTransactionEndpointRequest.prototype.setTx = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tx: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTx();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string tx = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.prototype.getTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DecodeRawTransactionEndpointRequest.prototype.setTx = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    encoding: jspb.Message.getFieldWithDefault(msg, 4, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoding(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEncoding();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string encoding = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.getEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.setEncoding = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string hash = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.DataEndpointRequest.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.displayName = 'proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txhash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest;
  return proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional NetworkAllowingAlias network = 1;
 * @return {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.prototype.getNetwork = function() {
  return /** @type {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fairwaycorp.blockchainprotobuf.btc.NetworkAllowingAlias} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string txhash = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.btc.TransactionPropagationEndpointRequest.prototype.setTxhash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.fairwaycorp.blockchainprotobuf.btc);
