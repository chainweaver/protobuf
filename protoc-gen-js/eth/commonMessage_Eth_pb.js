/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.Address', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.Block', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.Blockchain', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.Contract', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.Event', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.NetworkAllowingAlias', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.NullValue', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.TX', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.TXRef', null, global);
goog.exportSymbol('proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.NullValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.NullValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.NullValue.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.NullValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.NullValue.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.NullValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.NullValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.NullValue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.NullValue}
 */
proto.fairwaycorp.blockchainprotobuf.eth.NullValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.NullValue;
  return proto.fairwaycorp.blockchainprotobuf.eth.NullValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.NullValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.NullValue}
 */
proto.fairwaycorp.blockchainprotobuf.eth.NullValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.NullValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.NullValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.NullValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.NullValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.Blockchain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.Blockchain';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Blockchain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    time: jspb.Message.getFieldWithDefault(msg, 4, ""),
    latestUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    previousHash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    previousUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    unconfirmedCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    highGasPrice: jspb.Message.getFieldWithDefault(msg, 9, 0),
    mediumGasPrice: jspb.Message.getFieldWithDefault(msg, 10, 0),
    lowGasPrice: jspb.Message.getFieldWithDefault(msg, 11, 0),
    lastForkHeight: jspb.Message.getFieldWithDefault(msg, 13, 0),
    lastForkHash: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Blockchain}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.Blockchain;
  return proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Blockchain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Blockchain}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousHash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousUrl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnconfirmedCount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHighGasPrice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMediumGasPrice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLowGasPrice(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastForkHeight(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastForkHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Blockchain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLatestUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPreviousUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUnconfirmedCount();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getHighGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getMediumGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getLowGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getLastForkHeight();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getLastForkHash();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string time = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string latest_url = 5;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getLatestUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setLatestUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string previous_hash = 6;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getPreviousHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setPreviousHash = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string previous_url = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getPreviousUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setPreviousUrl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 unconfirmed_count = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getUnconfirmedCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setUnconfirmedCount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 high_gas_price = 9;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getHighGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setHighGasPrice = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 medium_gas_price = 10;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getMediumGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setMediumGasPrice = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 low_gas_price = 11;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getLowGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setLowGasPrice = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 last_fork_height = 13;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getLastForkHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setLastForkHeight = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string last_fork_hash = 14;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.getLastForkHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Blockchain.prototype.setLastForkHash = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.eth.Block.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.Block.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.repeatedFields_ = [19,20,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    depth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chain: jspb.Message.getFieldWithDefault(msg, 4, ""),
    total: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fees: jspb.Message.getFieldWithDefault(msg, 6, 0),
    size: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ver: jspb.Message.getFieldWithDefault(msg, 8, 0),
    time: jspb.Message.getFieldWithDefault(msg, 9, ""),
    receivedTime: jspb.Message.getFieldWithDefault(msg, 10, ""),
    coinbaseAddr: jspb.Message.getFieldWithDefault(msg, 11, ""),
    relayedBy: jspb.Message.getFieldWithDefault(msg, 12, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 13, 0),
    nTx: jspb.Message.getFieldWithDefault(msg, 14, 0),
    prevBlock: jspb.Message.getFieldWithDefault(msg, 15, ""),
    prevBlockUrl: jspb.Message.getFieldWithDefault(msg, 16, ""),
    txUrl: jspb.Message.getFieldWithDefault(msg, 17, ""),
    mrklRoot: jspb.Message.getFieldWithDefault(msg, 18, ""),
    txidsList: jspb.Message.getRepeatedField(msg, 19),
    internalTxidsList: jspb.Message.getRepeatedField(msg, 20),
    nextTxids: jspb.Message.getFieldWithDefault(msg, 21, ""),
    nextInternalTxids: jspb.Message.getFieldWithDefault(msg, 22, ""),
    unclesList: jspb.Message.getRepeatedField(msg, 23)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Block}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.Block;
  return proto.fairwaycorp.blockchainprotobuf.eth.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Block}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepth(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChain(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFees(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVer(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivedTime(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoinbaseAddr(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayedBy(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNTx(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevBlock(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevBlockUrl(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxUrl(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrklRoot(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxids(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.addInternalTxids(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextTxids(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextInternalTxids(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.addUncles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getChain();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getVer();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReceivedTime();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCoinbaseAddr();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRelayedBy();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getNTx();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getPrevBlock();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getPrevBlockUrl();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getTxUrl();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getMrklRoot();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getTxidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = message.getInternalTxidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      20,
      f
    );
  }
  f = message.getNextTxids();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getNextInternalTxids();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getUnclesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      23,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 depth = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string chain = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setChain = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 total = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 fees = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setFees = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 size = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 ver = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setVer = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string time = 9;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string received_time = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getReceivedTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setReceivedTime = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string coinbase_addr = 11;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getCoinbaseAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setCoinbaseAddr = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string relayed_by = 12;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getRelayedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setRelayedBy = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint64 nonce = 13;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 n_tx = 14;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setNTx = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string prev_block = 15;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getPrevBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setPrevBlock = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string prev_block_url = 16;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getPrevBlockUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setPrevBlockUrl = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string tx_url = 17;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getTxUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setTxUrl = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string mrkl_root = 18;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getMrklRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setMrklRoot = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated string txids = 19;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getTxidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setTxidsList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.addTxids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.clearTxidsList = function() {
  this.setTxidsList([]);
};


/**
 * repeated string internal_txids = 20;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getInternalTxidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 20));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setInternalTxidsList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.addInternalTxids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.clearInternalTxidsList = function() {
  this.setInternalTxidsList([]);
};


/**
 * optional string next_txids = 21;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getNextTxids = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setNextTxids = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string next_internal_txids = 22;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getNextInternalTxids = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setNextInternalTxids = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * repeated string uncles = 23;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.getUnclesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 23));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.setUnclesList = function(value) {
  jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.addUncles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Block.prototype.clearUnclesList = function() {
  this.setUnclesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.TXRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.TXRef.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.TXRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.TXRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    txInputN: jspb.Message.getFieldWithDefault(msg, 3, 0),
    txOutputN: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: jspb.Message.getFieldWithDefault(msg, 5, 0),
    doubleSpend: jspb.Message.getFieldWithDefault(msg, 6, false),
    confirmations: jspb.Message.getFieldWithDefault(msg, 7, 0),
    refBalance: jspb.Message.getFieldWithDefault(msg, 8, 0),
    confirmed: jspb.Message.getFieldWithDefault(msg, 9, ""),
    doubleOf: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.TXRef;
  return proto.fairwaycorp.blockchainprotobuf.eth.TXRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxInputN(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxOutputN(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoubleSpend(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmations(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRefBalance(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmed(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleOf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.TXRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTxInputN();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTxOutputN();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDoubleSpend();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getRefBalance();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getConfirmed();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDoubleOf();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setTxHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 tx_input_n = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getTxInputN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setTxInputN = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 tx_output_n = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getTxOutputN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setTxOutputN = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 value = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool double_spend = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getDoubleSpend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setDoubleSpend = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint64 confirmations = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setConfirmations = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 ref_balance = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getRefBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setRefBalance = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string confirmed = 9;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getConfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setConfirmed = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string double_of = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.getDoubleOf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXRef.prototype.setDoubleOf = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && proto.fairwaycorp.blockchainprotobuf.eth.TX.toObject(includeInstance, f),
    tosignList: jspb.Message.getRepeatedField(msg, 2),
    signaturesList: jspb.Message.getRepeatedField(msg, 3),
    errorsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton;
  return proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fairwaycorp.blockchainprotobuf.eth.TX;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.eth.TX.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTosign(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignatures(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.fairwaycorp.blockchainprotobuf.eth.TX.serializeBinaryToWriter
    );
  }
  f = message.getTosignList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional TX tx = 1;
 * @return {?proto.fairwaycorp.blockchainprotobuf.eth.TX}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.getTx = function() {
  return /** @type{?proto.fairwaycorp.blockchainprotobuf.eth.TX} */ (
    jspb.Message.getWrapperField(this, proto.fairwaycorp.blockchainprotobuf.eth.TX, 1));
};


/** @param {?proto.fairwaycorp.blockchainprotobuf.eth.TX|undefined} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.clearTx = function() {
  this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string tosign = 2;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.getTosignList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.setTosignList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.addTosign = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.clearTosignList = function() {
  this.setTosignList([]);
};


/**
 * repeated string signatures = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.getSignaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.setSignaturesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.addSignatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};


/**
 * repeated string errors = 4;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.setErrorsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.addErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.TXSkeleton.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.eth.TX.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.TX, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.TX.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.TX';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.repeatedFields_ = [3,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.TX.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TX} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    addressesList: jspb.Message.getRepeatedField(msg, 3),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fees: jspb.Message.getFieldWithDefault(msg, 5, 0),
    size: jspb.Message.getFieldWithDefault(msg, 6, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 8, 0),
    relayedBy: jspb.Message.getFieldWithDefault(msg, 9, ""),
    received: jspb.Message.getFieldWithDefault(msg, 10, ""),
    ver: jspb.Message.getFieldWithDefault(msg, 11, 0),
    doubleSpend: jspb.Message.getFieldWithDefault(msg, 12, false),
    vinSz: jspb.Message.getFieldWithDefault(msg, 13, 0),
    voutSz: jspb.Message.getFieldWithDefault(msg, 14, 0),
    confirmations: jspb.Message.getFieldWithDefault(msg, 15, 0),
    inputs: jspb.Message.getFieldWithDefault(msg, 16, ""),
    outputs: jspb.Message.getFieldWithDefault(msg, 17, ""),
    internalTxidsList: jspb.Message.getRepeatedField(msg, 18),
    parentTx: jspb.Message.getFieldWithDefault(msg, 19, ""),
    confirmed: jspb.Message.getFieldWithDefault(msg, 20, ""),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 21, 0),
    contractCreation: jspb.Message.getFieldWithDefault(msg, 22, false),
    receiveCount: jspb.Message.getFieldWithDefault(msg, 23, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 24, ""),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 25, 0),
    doubleOf: jspb.Message.getFieldWithDefault(msg, 26, ""),
    executionError: jspb.Message.getFieldWithDefault(msg, 27, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TX}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.TX;
  return proto.fairwaycorp.blockchainprotobuf.eth.TX.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TX} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TX}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFees(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasPrice(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayedBy(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceived(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVer(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoubleSpend(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVinSz(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVoutSz(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmations(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputs(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputs(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addInternalTxids(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentTx(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmed(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContractCreation(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReceiveCount(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockIndex(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleOf(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.TX.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TX} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getRelayedBy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReceived();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getVer();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getDoubleSpend();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getVinSz();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getVoutSz();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getInputs();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getOutputs();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getInternalTxidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getParentTx();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getConfirmed();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      21,
      f
    );
  }
  f = message.getContractCreation();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getReceiveCount();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      25,
      f
    );
  }
  f = message.getDoubleOf();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getExecutionError();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setAddressesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.addAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};


/**
 * optional uint64 total = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 fees = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setFees = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 size = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 gas_used = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setGasUsed = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 gas_price = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string relayed_by = 9;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getRelayedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setRelayedBy = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string received = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getReceived = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setReceived = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 ver = 11;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setVer = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool double_spend = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getDoubleSpend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setDoubleSpend = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint64 vin_sz = 13;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getVinSz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setVinSz = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 vout_sz = 14;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getVoutSz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setVoutSz = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint64 confirmations = 15;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setConfirmations = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string inputs = 16;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getInputs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setInputs = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string outputs = 17;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getOutputs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setOutputs = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * repeated string internal_txids = 18;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getInternalTxidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setInternalTxidsList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.addInternalTxids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.clearInternalTxidsList = function() {
  this.setInternalTxidsList([]);
};


/**
 * optional string parent_tx = 19;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getParentTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setParentTx = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string confirmed = 20;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getConfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setConfirmed = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional uint64 gas_limit = 21;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional bool contract_creation = 22;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getContractCreation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 22, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setContractCreation = function(value) {
  jspb.Message.setProto3BooleanField(this, 22, value);
};


/**
 * optional uint64 receive_count = 23;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getReceiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setReceiveCount = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string block_hash = 24;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setBlockHash = function(value) {
  jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional uint64 block_index = 25;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setBlockIndex = function(value) {
  jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional string double_of = 26;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getDoubleOf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setDoubleOf = function(value) {
  jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional string execution_error = 27;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.getExecutionError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.TX.prototype.setExecutionError = function(value) {
  jspb.Message.setProto3StringField(this, 27, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.eth.Address.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.Address.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.Address';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.repeatedFields_ = [11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalReceived: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalSent: jspb.Message.getFieldWithDefault(msg, 3, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 4, 0),
    unconfirmedBalance: jspb.Message.getFieldWithDefault(msg, 5, 0),
    finalBalance: jspb.Message.getFieldWithDefault(msg, 6, 0),
    nTx: jspb.Message.getFieldWithDefault(msg, 7, 0),
    unconfirmedNTx: jspb.Message.getFieldWithDefault(msg, 8, 0),
    finalNTx: jspb.Message.getFieldWithDefault(msg, 9, 0),
    txUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    txrefsList: jspb.Message.toObjectList(msg.getTxrefsList(),
    proto.fairwaycorp.blockchainprotobuf.eth.TXRef.toObject, includeInstance),
    unconfirmedTxrefsList: jspb.Message.toObjectList(msg.getUnconfirmedTxrefsList(),
    proto.fairwaycorp.blockchainprotobuf.eth.TXRef.toObject, includeInstance),
    hasmore: jspb.Message.getFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Address}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.Address;
  return proto.fairwaycorp.blockchainprotobuf.eth.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Address}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalReceived(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalSent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnconfirmedBalance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFinalBalance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNTx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnconfirmedNTx(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFinalNTx(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxUrl(value);
      break;
    case 11:
      var value = new proto.fairwaycorp.blockchainprotobuf.eth.TXRef;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.eth.TXRef.deserializeBinaryFromReader);
      msg.addTxrefs(value);
      break;
    case 12:
      var value = new proto.fairwaycorp.blockchainprotobuf.eth.TXRef;
      reader.readMessage(value,proto.fairwaycorp.blockchainprotobuf.eth.TXRef.deserializeBinaryFromReader);
      msg.addUnconfirmedTxrefs(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasmore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalReceived();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTotalSent();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getUnconfirmedBalance();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFinalBalance();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getNTx();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getUnconfirmedNTx();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getFinalNTx();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getTxUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTxrefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.fairwaycorp.blockchainprotobuf.eth.TXRef.serializeBinaryToWriter
    );
  }
  f = message.getUnconfirmedTxrefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.fairwaycorp.blockchainprotobuf.eth.TXRef.serializeBinaryToWriter
    );
  }
  f = message.getHasmore();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 total_received = 2;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getTotalReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setTotalReceived = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 total_sent = 3;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getTotalSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setTotalSent = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 balance = 4;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setBalance = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 unconfirmed_balance = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getUnconfirmedBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setUnconfirmedBalance = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 final_balance = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getFinalBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setFinalBalance = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 n_tx = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setNTx = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 unconfirmed_n_tx = 8;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getUnconfirmedNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setUnconfirmedNTx = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 final_n_tx = 9;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getFinalNTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setFinalNTx = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string tx_url = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getTxUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setTxUrl = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated TXRef txrefs = 11;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.eth.TXRef>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getTxrefsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.eth.TXRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.eth.TXRef, 11));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.eth.TXRef>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setTxrefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.addTxrefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.fairwaycorp.blockchainprotobuf.eth.TXRef, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.clearTxrefsList = function() {
  this.setTxrefsList([]);
};


/**
 * repeated TXRef unconfirmed_txrefs = 12;
 * @return {!Array<!proto.fairwaycorp.blockchainprotobuf.eth.TXRef>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getUnconfirmedTxrefsList = function() {
  return /** @type{!Array<!proto.fairwaycorp.blockchainprotobuf.eth.TXRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairwaycorp.blockchainprotobuf.eth.TXRef, 12));
};


/** @param {!Array<!proto.fairwaycorp.blockchainprotobuf.eth.TXRef>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setUnconfirmedTxrefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.TXRef}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.addUnconfirmedTxrefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.fairwaycorp.blockchainprotobuf.eth.TXRef, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.clearUnconfirmedTxrefsList = function() {
  this.setUnconfirmedTxrefsList([]);
};


/**
 * optional bool hasMore = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.getHasmore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.fairwaycorp.blockchainprotobuf.eth.Address.prototype.setHasmore = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_public: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pb_private: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain}
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain;
  return proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain}
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrivate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.getPublic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.setPublic = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string private = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.getPrivate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.AddressKeychain.prototype.setPrivate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairwaycorp.blockchainprotobuf.eth.Contract.repeatedFields_, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.Contract.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.Contract';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.repeatedFields_ = [2,3,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Contract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    solidity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramsList: jspb.Message.getRepeatedField(msg, 2),
    publishList: jspb.Message.getRepeatedField(msg, 3),
    pb_private: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    value: jspb.Message.getFieldWithDefault(msg, 6, 0),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    bin: jspb.Message.getFieldWithDefault(msg, 8, ""),
    abi: jspb.Message.getFieldWithDefault(msg, 9, ""),
    address: jspb.Message.getFieldWithDefault(msg, 10, ""),
    created: jspb.Message.getFieldWithDefault(msg, 11, ""),
    creationTxHash: jspb.Message.getFieldWithDefault(msg, 12, ""),
    resultsList: jspb.Message.getRepeatedField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Contract}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.Contract;
  return proto.fairwaycorp.blockchainprotobuf.eth.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Contract}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSolidity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addParams(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPublish(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBin(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbi(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationTxHash(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSolidity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPublishList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPrivate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBin();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAbi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCreationTxHash();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
};


/**
 * optional string solidity = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getSolidity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setSolidity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string params = 2;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getParamsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setParamsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.addParams = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.clearParamsList = function() {
  this.setParamsList([]);
};


/**
 * repeated string publish = 3;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getPublishList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setPublishList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.addPublish = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.clearPublishList = function() {
  this.setPublishList([]);
};


/**
 * optional string private = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getPrivate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setPrivate = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 gas_limit = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 value = 6;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string bin = 8;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getBin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setBin = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string abi = 9;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getAbi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setAbi = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string address = 10;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string created = 11;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setCreated = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string creation_tx_hash = 12;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getCreationTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setCreationTxHash = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * repeated string results = 13;
 * @return {!Array<string>}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.getResultsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array<string>} value */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.setResultsList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.addResults = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.fairwaycorp.blockchainprotobuf.eth.Contract.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairwaycorp.blockchainprotobuf.eth.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fairwaycorp.blockchainprotobuf.eth.Event.displayName = 'proto.fairwaycorp.blockchainprotobuf.eth.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.fairwaycorp.blockchainprotobuf.eth.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    event: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    confirmations: jspb.Message.getFieldWithDefault(msg, 5, 0),
    url: jspb.Message.getFieldWithDefault(msg, 6, ""),
    callbackErrors: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Event}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairwaycorp.blockchainprotobuf.eth.Event;
  return proto.fairwaycorp.blockchainprotobuf.eth.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairwaycorp.blockchainprotobuf.eth.Event}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmations(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallbackErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairwaycorp.blockchainprotobuf.eth.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairwaycorp.blockchainprotobuf.eth.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCallbackErrors();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event = 2;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.setEvent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 confirmations = 5;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.setConfirmations = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 callback_errors = 7;
 * @return {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.getCallbackErrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.fairwaycorp.blockchainprotobuf.eth.Event.prototype.setCallbackErrors = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.fairwaycorp.blockchainprotobuf.eth.NetworkAllowingAlias = {
  MAIN: 0,
  MAIN: 0,
  ROPSTEN: 1,
  ROPSTEN: 1
};

goog.object.extend(exports, proto.fairwaycorp.blockchainprotobuf.eth);
