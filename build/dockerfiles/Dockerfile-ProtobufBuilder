FROM golang:1.11.5-alpine3.8 AS Build

ENV GO111MODULE=on
ENV GOLANG_PROTOBUF_VERSION v1.2.0
ENV GRPC_GATEWAY_VERSION v1.7.0
ENV GOGO_PROTOBUF_VERSION v1.2.1
ENV GOGO_GOOGLEAPIS v1.1.0

RUN apk add --update \
  && apk --no-cache add git

# Install protobuf for golang
RUN mkdir -p $GOPATH/src/github.com/golang
WORKDIR $GOPATH/src/github.com/golang
RUN git clone https://github.com/golang/protobuf.git
WORKDIR $GOPATH/src/github.com/golang/protobuf
RUN git checkout -b $GOLANG_PROTOBUF_VERSION refs/tags/$GOLANG_PROTOBUF_VERSION
WORKDIR $GOPATH/src/github.com/golang/protobuf/protoc-gen-go
RUN go install

# Install grpc-gateway and swagger
WORKDIR $GOPATH/src/github.com/grpc-ecosystem
RUN git clone https://github.com/grpc-ecosystem/grpc-gateway.git
WORKDIR $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway
RUN git checkout -b $GRPC_GATEWAY_VERSION refs/tags/$GRPC_GATEWAY_VERSION
WORKDIR $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
RUN go install
WORKDIR $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger
RUN go install

# Install gogo protobuf
WORKDIR $GOPATH/src/github.com/gogo
RUN git clone https://github.com/gogo/protobuf.git
WORKDIR $GOPATH/src/github.com/gogo/protobuf
RUN git checkout -b $GOGO_PROTOBUF_VERSION refs/tags/$GOGO_PROTOBUF_VERSION
WORKDIR $GOPATH/src/github.com/gogo/protobuf/protoc-gen-gogo
RUN go install

# Download gogo googleapis
WORKDIR $GOPATH/src/github.com/gogo
RUN git clone https://github.com/gogo/googleapis.git
WORKDIR $GOPATH/src/github.com/gogo/googleapis
RUN git checkout -b $GOGO_GOOGLEAPIS refs/tags/$GOGO_GOOGLEAPIS

FROM alpine:3.9

### start from https://github.com/nodejs/docker-node/blob/de76fb48b532d6be012098dc3538bd15329a27d0/8/alpine/Dockerfile
ENV NODE_VERSION 8.15.1

RUN addgroup -g 1000 node \
    && adduser -u 1000 -G node -s /bin/sh -D node \
    && apk add --no-cache \
        libstdc++ \
    && apk add --no-cache --virtual .build-deps \
        binutils-gold \
        curl \
        g++ \
        gcc \
        gnupg \
        libgcc \
        linux-headers \
        make \
        python \
  # gpg keys listed at https://github.com/nodejs/node#release-keys
  && for key in \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    77984A986EBC2AA786BC0F66B01FBB92821C587A \
    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
    4ED778F539E3634C779C87C6D7062848A1AB005C \
    A48C2BEE680E841632CD4E44F07496B3EB3C1762 \
    B9E2F5981AA6E0CD28160D9FF13993A75599653C \
  ; do \
    gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
    gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
    gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
  done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && grep " node-v$NODE_VERSION.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xf "node-v$NODE_VERSION.tar.xz" \
    && cd "node-v$NODE_VERSION" \
    && ./configure \
    && make -j$(getconf _NPROCESSORS_ONLN) \
    && make install \
    && apk del .build-deps \
    && cd .. \
    && rm -Rf "node-v$NODE_VERSION" \
    && rm "node-v$NODE_VERSION.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt

ENV YARN_VERSION 1.12.3

RUN apk add --no-cache --virtual .build-deps-yarn curl gnupg tar \
  && for key in \
    6A010C5166006599AA17F08146C2130DFD2497F5 \
  ; do \
    gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
    gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
    gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
  done \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" \
  && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  && mkdir -p /opt \
  && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \
  && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  && apk del .build-deps-yarn
### end

RUN apk --no-cache add protobuf protobuf-dev py-pip bash git perl

# Install jq
COPY build/dockerfiles/bin/jq-1.6 /usr/local/bin/jq
RUN chmod 700 /usr/local/bin/jq

# Install yq
RUN pip install --upgrade pip yq

# Install swagger2openapi
RUN npm install -g swagger2openapi

# Install openapi-to-postman
WORKDIR /
RUN git clone https://github.com/chainweaver/openapi-to-postman.git
WORKDIR /openapi-to-postman
RUN git checkout feature-param
RUN yarn install

ENV GOPATH /go

COPY --from=build $GOPATH/bin/protoc-gen-go /usr/bin/
COPY --from=build $GOPATH/bin/protoc-gen-grpc-gateway /usr/bin/
COPY --from=build $GOPATH/bin/protoc-gen-swagger /usr/bin/
COPY --from=build $GOPATH/bin/protoc-gen-gogo /usr/bin/
COPY --from=build $GOPATH/src/github.com/golang/protobuf $GOPATH/src/github.com/golang/protobuf
COPY --from=build $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway
COPY --from=build $GOPATH/src/github.com/gogo/protobuf $GOPATH/src/github.com/gogo/protobuf
COPY --from=build $GOPATH/src/github.com/gogo/googleapis $GOPATH/src/github.com/gogo/googleapis

WORKDIR $GOPATH/src/github.com/chainweaver/protobuf
CMD [ "/bin/bash", "scripts/build.sh" ]