syntax = "proto3";

package fairwaycorp.blockchainprotobuf;
option go_package = "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go";

message Wallet {
  // User token associated with this wallet.
  string token	= 1;  
  // Name of the wallet.
  string name = 2;  
  // List of addresses associated with this wallet.
  repeated string addresses	= 3; 
}

message HDWallet {
  // User token associated with this HD wallet.
  string token	= 1;  
  // Name of the HD wallet.
  string name = 2;
  // List of HD chains associated with this wallet, each containing HDAddresses. A single chain is returned if the wallet has no subchains.
  repeated HDChain chains = 3;
  // true for HD wallets, not present for normal wallets.
  bool hd = 4;  
  // The extended public key all addresses in the HD wallet are derived from. It’s encoded in BIP32 format
  string extended_public_key = 5;  
  // optional returned for HD wallets created with subchains.
  repeated int32 subchain_indexes = 6; 
}

message HDChain {
  // Array of HDAddresses associated with this subchain.
  repeated HDAddress chain_addresses = 1;  
  // optional Index of the subchain, returned if the wallet has subchains.
  int64 index = 2; 
}

message HDAddress {
  // Standard address representation.
  string address = 1; 
  // The BIP32 path of the HD address.
  string path = 2; 
  // optional Contains the hex-encoded public key if returned by Derive Address in Wallet endpoint.
  string public = 3; 
}

message ListWallets {
  repeated string wallet_name = 1;
}

message AddressKeychain {
  // Standard address representation.
  string address = 1;
  // Hex-encoded Public key.
  string public = 2;  
  // Hex-encoded Private key.
  string private = 3;   
  // Wallet import format, a common encoding for the private key.
  string wif = 4; 
  // Optional Array of public keys to provide to generate a multisig address.
  repeated string pubkeys  = 5;   
  // Optional If generating a multisig address, the type of multisig script; typically “multisig-n-of-m”, where n and m are integers.
  string script_type = 6;  
  // Optional If generating an OAP address, this represents the parent blockchain’s underlying address (the typical address listed above).
  string original_address = 7;  
  // Optional The OAP address, if generated using the Generate Asset Address Endpoint.
  string oap_address = 8; 
}

message WalletAddressKeychain {
  Wallet wallet = 1;
  AddressKeychain addresskeychain = 2;
}

message NullValue {}

message CreateWalletEndpointRequest {
  string token	= 1;
  string name = 2;
  repeated string addresses	= 3;
}

message CreateWalletHDEndpointRequest {
  string token 	= 1;
  string name = 2;
  repeated HDChain chains = 3;
  bool hd = 4;
  string extended_public_key = 5;
  repeated int32 subchain_indexes = 6;
}

message ListWalletsEndpointRequest {
}

message GetWalletEndpointRequest {
  string name = 1;
}

message AddAddressesToWalletEndpointRequest {
  string name = 1;
  bool omitWalletAddresses = 2;
}

message GetWalletAddressesEndpointRequest {
  string name = 1;
  bool used = 2;
  bool zerobalance = 3;
}

message RemoveAddressesFromWalletEndpointRequest {
  string name = 1;
//  string address = 2;
}

message GenerateAdressInWalletEndpointRequest {
  string name = 1;
}

message DeriveAddressInWalletEndpointRequest {
  string name = 1;
  int32 count = 2;
  int64 subchain_index = 3;
}

message DeleteWalletEndpointRequest {
  string name = 1;
}
