syntax = "proto3";

package chainweaver.protobuf.eth;
option go_package = "github.com/chainweaver/protobuf/protoc-gen-go/eth";

import "protoc-gen-swagger/options/annotations.proto";

enum NetworkAllowingAlias {
  option allow_alias = true;
  MAIN = 0;
  main = 0;
  ROPSTEN = 1;
  ropsten = 1;
}

message NullValue {}

message Blockchain {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["name", "height", "hash", "time", "latest_url", "previous_hash", "previous_url", "unconfirmed_count", "high_gas_price", "medium_gas_price", "low_gas_price"]
    }
  };

  // The name of the blockchain represented, in the form of $COIN.$CHAIN.
  string name = 1;
  // The current height of the blockchain; i.e., the number of blocks in the blockchain.
  uint64 height = 2;
  // The hash of the latest confirmed block in the blockchain; in Ethereum, the hashing function is Keccak/SHA3.
  string hash = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{64})$"}];
  // The time of the latest update to the blockchain; typically when the latest block was added.
  string time = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "date-time"}];
  // The BlockCypher URL to query for more information on the latest confirmed block; returns a Block.
  string latest_url = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "uri"}];
  // The hash of the second-to-latest confirmed block in the blockchain.
  string previous_hash = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{64})$"}];
  // The BlockCypher URL to query for more information on the second-to-latest confirmed block; returns a Block.
  string previous_url = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "uri"}];
  // Number of unconfirmed transactions in memory pool (likely to be included in next block).
  uint64 unconfirmed_count = 8;
  // A rolling average of the gas price (in wei) for transactions to be confirmed within 1 to 2 blocks.
  uint64 high_gas_price = 9;
  // A rolling average of the gas price (in wei) for transactions to be confirmed within 1 to 2 blocks. This is a hex string.
  string high_gas_price_hex = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // A rolling average of the gas price (in wei) for transactions to be confirmed within 3 to 6 blocks.
  uint64 medium_gas_price = 11;
  // A rolling average of the gas price (in wei) for transactions to be confirmed within 3 to 6 blocks. This is a hex string.
  string medium_gas_price_hex = 12 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // A rolling average of the gas price (in wei) for transactions to be confirmed in 7 or more blocks.
  uint64 low_gas_price = 13;
  // A rolling average of the gas price (in wei) for transactions to be confirmed in 7 or more blocks. This is a hex string.
  string low_gas_price_hex = 14 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Optional The current height of the latest fork to the blockchain; when no competing blockchain fork present, not returned with endpoints that return Blockchains.
  uint64 last_fork_height = 15;
  // Optional The hash of the latest confirmed block in the latest fork of the blockchain; when no competing blockchain fork present, not returned with endpoints that return Blockchains.
  string last_fork_hash = 16 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^(|[a-z0-9]{64})$"}];
}

message Block {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["hash", "height", "depth", "chain", "total", "fees", "size", "ver", "time", "received_time", "coinbase_addr", "relayed_by", "nonce", "n_tx", "prev_block", "tx_url", "mrkl_root", "txids", "internal_txids"]
    }
  };

  // The hash of the block; in Ethereum, the hashing function is Keccak/SHA3
  string hash = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{64})$"}];
  // The height of the block in the blockchain; i.e., there are height earlier blocks in its blockchain.
  uint64 height = 2;
  // The depth of the block in the blockchain; i.e., there are depth later blocks in its blockchain.
  uint64 depth = 3;
  // The name of the blockchain represented, in the form of $COIN.$CHAIN
  string chain = 4;
  // The total number of wei transacted in this block.
  uint64 total = 5;
  // The total number of wei transacted in this block. This is a hex string.
  string total_hex = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // The total number of fees—in wei—collected by miners in this block.
  uint64 fees = 7;
  // The total number of fees—in wei—collected by miners in this block. This is a hex string.
  string fees_hex = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Raw size of block (including header and all transactions) in bytes.
  uint64 size = 9;
  // Block version.
  uint64 ver = 10;
  // Recorded time at which block was built.
  string time = 11 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "date-time"}];
  // The time BlockCypher’s servers receive the block.
  string received_time = 12 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "date-time"}];
  // The Ethereum address of the miner that received the coinbase and fee reward.
  string coinbase_addr = 13 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{40})$"}];
  // Address of the peer that sent BlockCypher’s servers this block.
  string relayed_by = 14 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^(|[a-z0-9]{40})$"}];
  // The number used by a miner to generate this block.
  uint64 nonce = 15;
  // Number of transactions in this block.
  uint64 n_tx = 16;
  // The hash of the previous block in the blockchain.
  string prev_block = 17 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{64})$"}];
  // The BlockCypher URL to query for more information on the previous block.
  string prev_block_url = 18 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "uri"}];
  // The base BlockCypher URL to receive transaction details. To get more details about specific transactions, you must concatenate this URL with the desired transaction hash(es).
  string tx_url = 19 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "uri"}];
  // The Merkle root of this block.
  string mrkl_root = 20 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{64})$"}];
  // An array of transaction hashes in this block (initiated by externally controlled accounts). By default, only 20 are included.
  repeated string txids = 21;
  // An array of internal transaction hashes (initiated by internal contracts) in this block. By default, only 20 are included.
  repeated string internal_txids = 22;
  // Optional If there are more transactions that couldn’t fit in the txids array, this is the BlockCypher URL to query the next set of transactions (within a Block object).
  string next_txids = 23 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "uri"}];
  // Optional If there are more internal transactions that couldn’t fit in the internal_txids array, this is the BlockCypher URL to query the next set of transactions (within a Block object).
  string next_internal_txids = 24 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "uri"}];
  // List of uncle blocks by hash included by the miner of this block. You can read more about uncles here.
  repeated string uncles = 25;
}

message TXRef {
  // Height of the block that contains this transaction input/output. If it’s unconfirmed, this will equal -1.
  int32 block_height = 1;
  // The hash of the transaction containing this input/output.
  string tx_hash = 2;
  // Index of this input in the enclosing transaction. 0 if it’s an input, -1 if it’s an output.
  uint64 tx_input_n = 3;
  // Index of this output in the enclosing transaction. -1 if it’s an input, 0 if it’s an output.
  int64 tx_output_n = 4;
  // The value transfered by this input/output in wei exchanged in the enclosing transaction.
  uint64 value = 5;
  // true if this is an attempted double spend; false otherwise.
  bool double_spend = 6;
  // Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
  uint64 confirmations = 7;
  // Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions.
  uint64 ref_balance = 8;
  // Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions. This is a hex string.
  string ref_balance_hex = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Optional Time at which transaction was included in a block; only present for confirmed transactions.
  string confirmed = 10;
  // Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
  string double_of = 11;
}

message TXSkeleton {
  // A temporary TX, usually returned fully filled.
  TX tx = 1;
  // Array of hex-encoded data for you to sign, containing one element for you to sign. Still an array to maintain parity with the Bitcoin API.
  repeated string tosign = 2;
  // Array of signatures corresponding to all the data in tosign, typically provided by you. Only one signature is required.
  repeated string signatures = 3;
  // Optional Array of errors in the form “error”:“description-of-error”. This is only returned if there was an error in any stage of transaction generation, and is usually accompanied by a HTTP 400 code.
  repeated string errors = 4;
}

message InputType {
  int64 sequence = 1;
  repeated string addresses = 2;
}

message OutputType {
  int64 value = 1;
  string script = 2;
  repeated string addresses = 3;
}

message TX {
  // Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1.
  int32 block_height = 1;
  // The hash of the transaction.
  string hash = 2;
  // Array of Ethereum addresses involved in the transaction.
  repeated string addresses = 3;
  // The total number of wei exchanged in this transaction.
  uint64 total = 4;
  // The total number of wei exchanged in this transaction. This is a hex string.
  string total_hex = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // The total number of fees—in wei—collected by miners in this transaction. Equal to gas_price * gas_used.
  uint64 fees = 6;
  // The total number of fees—in wei—collected by miners in this transaction. Equal to gas_price * gas_used. This is a hex string.
  string fees_hex = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // The size of the transaction in bytes.
  uint64 size = 8;
  // The amount of gas used by this transaction.
  uint64 gas_used = 9;
  // The amount of gas used by this transaction. This is a hex string.
  string gas_used_hex = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // The price of gas—in wei—in this transaction.
  uint64 gas_price = 11;
  // The price of gas—in wei—in this transaction. This is a hex string.
  string gas_price_hex = 12 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Address of the peer that sent BlockCypher’s servers this transaction. May be empty.
  string relayed_by = 13;
  // Time this transaction was received by BlockCypher’s servers.
  string received = 14;
  // Version number of this transaction.
  uint64 ver = 15;
  // true if this is an attempted double spend; false otherwise.
  bool double_spend = 16;
  // Total number of inputs in the transaction.
  uint64 vin_sz = 17;
  // Total number of outputs in the transaction.
  uint64 vout_sz = 18;
  // Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
  uint64 confirmations = 19;
  // An array object containing a single input with a sequence number (used as a nonce for account balances) and an Ethereum account address. Only contains one input in the array; we still use an array to maintain parity with the Bitcoin API.
  repeated InputType inputs = 20;
  // An array object containing a single output with value (in wei), script, and an Ethereum account address. Only contains one output in the array; we still use an array to maintain parity with the Bitcoin API.
  repeated OutputType outputs = 21;
  // Optional If this transaction executed a contract which propagated its own subsequent transactions, then this array will be present, containing the hashes of those subsequent internal transactions.
  repeated string internal_txids = 22;
  // Optional If this transaction was initiated by a contract, this field will be present, conveying the hash of the parent transaction that executed the contract resulting in this transaction (the inverse of an internal_txids hash).
  string parent_tx = 23;
  // Optional Time at which transaction was included in a block; only present for confirmed transactions.
  string confirmed = 24;
  // Optional If creating a transaction, can optionally set a higher default gas limit (useful if your recepient is a contract). If not set, default is 21000 gas for external accounts and 80000 for contract accounts.
  uint64 gas_limit = 25;
  // Optional If creating a transaction, can optionally set a higher default gas limit (useful if your recepient is a contract). If not set, default is 21000 gas for external accounts and 80000 for contract accounts. This is a hex string.
  string gas_limit_hex = 26 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Optional If true, this transaction was used to create a contract and contract account. Note that the contract address (in the outputs field) will be blank until the transaction is confirmed.
  bool contract_creation = 27;
  // Optional Number of peers that have sent this transaction to BlockCypher; only present for unconfirmed transactions.
  uint64 receive_count = 28;
  // Optional Hash of the block that contains this transaction; only present for confirmed transactions.
  string block_hash = 29;
  // Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions.
  uint64 block_index = 30;
  // Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
  string double_of = 31;
  // Optional If this transaction has an execution error, then this field will be included (e.g. “out of gas”).
  string execution_error = 32;
}

message Address {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["address", "total_received", "total_sent", "balance", "unconfirmed_balance", "final_balance", "n_tx", "unconfirmed_n_tx", "final_n_tx"]
    }
  };

  // The requested address.
  string address = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{40})$"}];
  // Total amount of confirmed wei received by this address.
  uint64 total_received = 2;
  // Total amount of confirmed wei received by this address. This is a hex string.
  string total_received_hex = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Total amount of confirmed wei sent by this address.
  uint64 total_sent = 4;
  // Total amount of confirmed wei sent by this address. This is a hex string.
  string total_sent_hex = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Balance of confirmed wei on this address. (i.e., for transactions whose confirmations > 0).
  uint64 balance = 6;
  // Balance of confirmed wei on this address. (i.e., for transactions whose confirmations > 0). This is a hex string.
  string balance_hex = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Balance of unconfirmed wei on this address. Can be negative (if unconfirmed transactions are just spending part of an address balance). Only unconfirmed transactions (haven’t made it into a block) are included in this calculation.
  uint64 unconfirmed_balance = 8;
  // Balance of unconfirmed wei on this address. Can be negative (if unconfirmed transactions are just spending part of an address balance). Only unconfirmed transactions (haven’t made it into a block) are included in this calculation. This is a hex string.
  string unconfirmed_balance_hex = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Total balance of wei, including confirmed and unconfirmed transactions, for this address.
  uint64 final_balance = 10;
  // Total balance of wei, including confirmed and unconfirmed transactions, for this address. This is a hex string.
  string final_balance_hex = 11 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Number of confirmed transactions on this address. Only transactions that have made it into a block (confirmations > 0) are counted.
  uint64 n_tx = 12;
  // Number of unconfirmed transactions for this address. Only unconfirmed transactions (confirmations == 0) are counted.
  uint64 unconfirmed_n_tx = 13;
  // Final number of transactions, including confirmed and unconfirmed transactions, for this address.
  uint64 final_n_tx = 14;
  // Optional To retrieve base URL transactions. To get the full URL, concatenate this URL with a transaction’s hash.
  string tx_url = 15 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "uri"}];
  // Optional Array of transaction summaries for this address. Usually only returned from the standard Address Endpoint.
  repeated TXRef txrefs = 16;
  // Optional All unconfirmed transaction summaries for this address. Usually only returned from the standard Address Endpoint.
  repeated TXRef unconfirmed_txrefs = 17;
  // Optional If true, then the Address object contains more transactions than shown. Useful for determining whether to poll the API for more transaction information.
  bool hasMore = 18;
}

message AddressKeychain {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["address", "public", "private"]
    }
  };

  // Standard address representation.
  string address = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{40})$"}];
  // Hex-encoded Public key.
  string public = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{130})$"}];
  // Hex-encoded Private key.
  string private = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^([a-z0-9]{64})$"}];
}

message Contract {
  // Solidity code of this contract; required when creating a contract. In responses, only returned with contracts initially compiled by BlockCypher.
  string solidity = 1;
  // Parameters for either contract creation or method execution.
  repeated string params = 2;
  // Named contract(s) to publish; necessary to specify when first creating a contract.
  repeated string publish = 3;
  // Private key associated with a funded Ethereum external account used to publish a contract or execute a method.
  string private = 4;
  // Maximum amount of gas to use in contract creation or method execution.
  uint64 gas_limit = 5;
  // Maximum amount of gas to use in contract creation or method execution. This is a hex string.
  string gas_limit_hex = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Amount (in wei) to transfer; can be used when creating a contract or calling a method.
  uint64 value = 7;
  // Amount (in wei) to transfer; can be used when creating a contract or calling a method. This is a hex string.
  string value_hex = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^0x[0-9a-fA-F]+$"}];
  // Name of contract as published.
  string name = 9;
  // Hex-encoded binary compilation of this contract.
  string bin = 10;
  // JSON-encoded ABI. Only returned with contracts initially compiled by BlockCypher.
  string abi = 11;
  // Hex-encoded address of this contract.
  string address = 12;
  // Timestamp when this contract was confirmed in the Ethereum blockchain.
  string created = 13;
  // Hex-encoded transaction hash that created this contract.
  string creation_tx_hash = 14;
  // If this is a response from a calling a contract method, this array of results may appear if the method returns any.
  repeated string results = 15;
}

message Event {
  // Identifier of the event; generated when a new request is created.
  string id = 1;
  // Type of event; can be unconfirmed-tx, new-block, confirmed-tx, tx-confirmation, double-spend-tx.
  string event = 2;
  // optional Only objects with a matching hash will be sent. The hash can either be for a block or a transaction.
  string hash = 3;
  // optional Only transactions associated with the given address will be sent.
  string address = 4;
  // optional Used in concert with the tx-confirmation event type to set the number of confirmations desired for which to receive an update. You’ll receive an updated TX for every confirmation up to this amount. The maximum allowed is 10; if not set, it will default to 6.
  uint64 confirmations = 5;
  // optional Callback URL for this Event’s WebHook; not applicable for WebSockets usage.
  string url = 6;
  // Number of errors when attempting to POST to callback URL; not applicable for WebSockets usage.
  uint64 callback_errors = 7;
  // filter
  string filter = 8;
}
