syntax = "proto3";

package fairwaycorp.blockchainprotobuf;
option go_package = "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "walletMessage.proto";

message TXRef {
  string address = 1;  //	Optional The address associated with this transaction input/output. Only returned when querying an address endpoint via a wallet/HD wallet name.
  int32 block_height = 2;  //Height of the block that contains this transaction input/output. If it’s unconfirmed, this will equal -1.
  string tx_hash = 3;  //	The hash of the transaction containing this input/output. While reasonably unique, using hashes as identifiers may be unsafe.
  int32 tx_input_n = 4;  //Index of this input in the enclosing transaction. It’s a negative number for an output.
  int32 tx_output_n = 5;  //Index of this output in the enclosing transaction. It’s a negative number for an input.
  int32 value = 6;  //The value transfered by this input/output in satoshis exchanged in the enclosing transaction.
  string preference = 7;  //	The likelihood that the enclosing transaction will make it to the next block; reflects the preference level miners have to include the enclosing transaction. Can be high, medium or low.
  bool spent = 8;  //	true if this is an output and was spent. If it’s an input, or an unspent output, it will be false.
  bool double_spend = 9;  //	true if this is an attempted double spend; false otherwise.
  int32 confirmations	   = 10;  //	Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
  string script = 11;  //Optional Raw, hex-encoded script of this input/output.
  int32 ref_balance = 12;  //Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions.
  float confidence = 13;  //	Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
  google.protobuf.Timestamp confirmed = 14;  //Optional Time at which transaction was included in a block; only present for confirmed transactions.
  string spent_by = 15;  //Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed.
  google.protobuf.Timestamp received = 16;  //Optional Time this transaction was received by BlockCypher’s servers; only present for unconfirmed transactions.
  int32 receive_count = 17;  //Optional Number of peers that have sent this transaction to BlockCypher; only present for unconfirmed transactions.
  string double_of = 18;  //Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
}

message TXInput {
  string prev_hash = 1;
  int32 output_index = 2;
  int32 output_value = 3;
  string script_type = 4;
  string script = 5;
  repeated string addresses = 6;
  int32 sequence = 7;
  int32 age = 8;
  string wallet_name = 9;
  string wallet_token = 10;
}

message TXOutput {
  int32 value = 1;
  string script = 2;
  repeated string addresses = 3;
  string script_type = 4;
  string spent_by = 5;
  string data_hex = 6;
  string data_string = 7;
}

message TX {
  int32 block_height = 1;  //	Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1.
  string hash = 2;  //The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe.
  repeated string addresses = 3;  //Array of bitcoin public addresses involved in the transaction.
  int32 total = 4;  //The total number of satoshis exchanged in this transaction.
  int32 fees = 5;  //The total number of fees—in satoshis—collected by miners in this transaction.
  int32 size = 6;  //The size of the transaction in bytes.
  string preference = 7;  //The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low.
  string relayed_by = 8;  //Address of the peer that sent BlockCypher’s servers this transaction.
  google.protobuf.Timestamp received = 9;  //Time this transaction was received by BlockCypher’s servers.
  int32 ver = 10;  //Version number, typically 1 for Bitcoin transactions.
  int32 lock_time = 11;  //Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time.
  bool double_spend = 12;  //true if this is an attempted double spend; false otherwise.
  int32 vin_sz = 13;  //Total number of inputs in the transaction.
  int32 vout_sz = 14;  //Total number of outputs in the transaction.
  int32 confirmations = 15;  //Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
  repeated TXInput inputs = 16;  //TXInput Array, limited to 20 by default.
  repeated TXOutput outputs = 17;  //TXOutput Array, limited to 20 by default.
  bool opt_in_rbf = 18;  //Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here.
  float confidence = 19;  //Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
  google.protobuf.Timestamp confirmed = 20;  //Optional Time at which transaction was included in a block; only present for confirmed transactions.
  int32 receive_count = 21;  //Optional Number of peers that have sent this transaction to BlockCypher; only present for unconfirmed transactions.
  string change_address = 22;  //Optional Address BlockCypher will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent.
  string block_hash = 23;  //Optional Hash of the block that contains this transaction; only present for confirmed transactions.
  int32 block_index = 24;  //Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions.
  string double_of = 25;  //Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
  string data_protocol = 26;  //Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni
  string hex = 27;  //Optional Hex-encoded bytes of the transaction, as sent over the network.
  google.protobuf.Any next_inputs = 28;  //Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the BlockCypher URL to query the next set of TXInputs (within a TX object).
  google.protobuf.Any next_outputs = 29;  //Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the BlockCypher URL to query the next set of TXOutputs(within a TX object).
}

message OAPIssue {
  string from_private = 1;
  string to_address = 2;
  int32 amount = 3;
  string metadata = 4;
}

message OAPTX {
  int32 ver = 1;
  string assetid = 2;
  string hash = 3;
  google.protobuf.Timestamp confirmed = 4;
  google.protobuf.Timestamp received = 5;
  string oap_meta = 6;
  bool double_spend = 7;
  repeated string inputs = 8;
  repeated string outputs = 9;
}

message ArrayString {
  repeated string arraystring = 1;
}

message Address {
  string address = 1;
  Wallet wallet = 2;
  HDWallet hd_wallet = 3;
  int32 total_received = 4;
  int32 total_sent = 5;
  int32 balance = 6;
  int32 unconfirmed_balance = 7;
  int32 final_balance = 8;
  int32 n_tx = 9;
  int32 unconfirmed_n_tx = 10;
  int32 final_n_tx = 11;
  string tx_url = 12;
  repeated TX txs = 13;
  repeated TXRef txrefs = 14;
  repeated TXRef unconfirmed_txrefs = 15;
  bool hasMore = 16;
}

message IssueAssetEndpointRequest {
}

message TransferAssetEndpointRequest {
  string assetid = 1;
}

message GenerateAssetAddressEndpointRequest {
}

message ListAssetTXsEndpointRequest {
  string assetid = 1;
}

message GetAssetTXEndpointRequest {
  string assetid = 1;
  string txhash = 2;
}

message GetAssetAddressEndpointRequest {
  string assetid = 1;
  string oapaddr = 2;
}
