syntax = "proto3";

package fairwaycorp.blockchainprotobuf.btc;
option go_package = "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go/btc";

import "commonMessage.proto";

message AddressBalanceEndpointRequest {
  NetworkAllowingAlias network = 1;
  string address = 2;
  //If omitWalletAddresses is true and you’re querying a Wallet or HDWallet, the response will omit address information (useful to speed up the API call for larger wallets).
  bool omitWalletAddresses = 3;
}

message AddressEndpointRequest {
  NetworkAllowingAlias network = 1;
  string address = 2;
  //If unspentOnly is true, filters response to only include unspent transaction outputs (UTXOs).
  bool unspentOnly = 3;
  //If includeScript is true, includes raw script of input or output within returned TXRefs.
  bool includeScript = 4;
  //If true, includes the confidence attribute (useful for unconfirmed transactions) within returned TXRefs. For more info about this figure, check the Confidence Factor documentation.
  bool includeConfidence = 5;
  //Filters response to only include transactions below before height in the blockchain.
  int32 before = 6;
  //Filters response to only include transactions above after height in the blockchain.
  int32 after = 7;
  //limit sets the minimum number of returned TXRefs; there can be less if there are less than limit TXRefs associated with this address, but there can be more in the rare case of more TXRefs in the block at the bottom of your call. This ensures paging by block height never misses TXRefs. Defaults to 200, maximum is 2000.
  int32 limit = 8;
  //If set, only returns the balance and TXRefs that have at least this number of confirmations.
  int32 confirmations = 9;
  //Filters response to only include TXRefs above confidence in percent; e.g., if this is set to 99, will only return TXRefs with 99% confidence or above (including all confirmed TXRefs). For more detail on confidence, check the Confidence Factor documentation.
  int32 confidence = 10;
  //If omitWalletAddresses is true and you’re querying a Wallet or HDWallet, the response will omit address information (useful to speed up the API call for larger wallets).
  bool omitWalletAddresses = 11;
}

message AddressFullEndpointRequest {
  NetworkAllowingAlias network = 1;
  //address
  string address = 2;
  //Filters response to only include transactions below before height in the blockchain.
  int32 before = 3;
  //Filters response to only include transactions above after height in the blockchain.
  int32 after = 4;
  //limit sets the minimum number of returned TXs; there can be less if there are less than limit TXs associated with this address, but there can also be more in the rare case of more TXs in the block at the bottom of your call. This ensures paging by block height never misses TXs. Defaults to 10, maximum is 50.
  int32 limit = 5;
  //This filters the TXInputs/TXOutputs within the returned TXs to include a maximum of txlimit items.
  int32 txlimit = 6;
  //If set, only returns the balance and TXs that have at least this number of confirmations.
  int32 confirmations = 7;
  //Filters response to only include TXs above confidence in percent; e.g., if this is set to 99, will only return TXs with 99% confidence or above (including all confirmed TXs). For more detail on confidence, check the Confidence Factor documentation.
  int32 confidence = 8;
  //If true, includes hex-encoded raw transaction for each TX; false by default.
  bool includeHex = 9;
  //If true, includes the confidence attribute (useful for unconfirmed transactions) within returned TXs. For more info about this figure, check the Confidence Factor documentation.
  bool includeConfidence = 10;
  //If omitWalletAddresses is true and you’re querying a Wallet or HDWallet, the response will omit address information (useful to speed up the API call for larger wallets).
  bool omitWalletAddresses = 11;
}

message GenerateAddressEndpointRequest {
  NetworkAllowingAlias network = 1;
  // Standard address representation.
  string address = 2;
  // Hex-encoded Public key.
  string public = 3;  
  // Hex-encoded Private key.
  string private = 4;   
  // Wallet import format, a common encoding for the private key.
  string wif = 5; 
  // Optional Array of public keys to provide to generate a multisig address.
  repeated string pubkeys  = 6;   
  // Optional If generating a multisig address, the type of multisig script; typically “multisig-n-of-m”, where n and m are integers.
  string script_type = 7;  
  // Optional If generating an OAP address, this represents the parent blockchain’s underlying address (the typical address listed above).
  string original_address = 8;  
  // Optional The OAP address, if generated using the Generate Asset Address Endpoint.
  string oap_address = 9; 
}
