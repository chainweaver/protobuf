syntax = "proto3";

package chainweaver.protobuf.btc;
option go_package = "github.com/chainweaver/protobuf/protoc-gen-go/btc";

import "commonMessage.proto";

message ListWallets {
  repeated string wallet_names = 1;
}

message WalletAddressKeychain {
  // --- Wallet ---
  // User token associated with this wallet.
  string token	= 1;
  // Name of the wallet.
  string name = 2;
  // List of addresses associated with this wallet.
  repeated string addresses	= 3;

  // --- AddressKeychain ---
  // Standard address representation.
  string address = 4;
  // Hex-encoded Public key.
  string public = 5;
  // Hex-encoded Private key.
  string private = 6;
  // Wallet import format, a common encoding for the private key.
  string wif = 7;
  // Optional Array of public keys to provide to generate a multisig address.
  repeated string pubkeys  = 8;
  // Optional If generating a multisig address, the type of multisig script;typically “multisig-n-of-m”, where n and m are integers.
  string script_type = 9;
  // Optional If generating an OAP address, this represents the parent blockchain’s underlying address (the typical address listed above).
  string original_address = 10;
  // Optional The OAP address, if generated using the Generate Asset Address Endpoint.
  string oap_address = 11;
}

message CreateWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string token	= 2;
  string name = 3;
  repeated string addresses	= 4;
}

message CreateHDWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string token 	= 2;
  string name = 3;
  repeated HDChain chains = 4;
  bool hd = 5;
  string extended_public_key = 6;
  repeated int32 subchain_indexes =7;
}

message ListWalletsEndpointRequest {
  NetworkAllowingAlias network = 1;
}

message WalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
}

message HDWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
}

message AddAddressesToWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
  // If omitWalletAddresses is true, the response will omit address information (useful to speed up the API call for larger wallets).
  bool omitWalletAddresses = 3;
}

message WalletAddressesEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
  // Returns only used addresses if set to true and only unused if false. Only valid on HD wallets.
  bool used = 3;
  // Returns only addresses with zero balance if set to true and only addresses with non-zero balance if false. Only valid on HD wallets.
  bool zerobalance = 4;
}

message HDWalletAddressesEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
  // Returns only used addresses if set to true and only unused if false. Only valid on HD wallets.
  bool used = 3;
  // Returns only addresses with zero balance if set to true and only addresses with non-zero balance if false. Only valid on HD wallets.
  bool zerobalance = 4;
}

message RemoveAddressesFromWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
  string address = 3;
}

message GenerateAddressInWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
}

message DeriveAddressInWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
  // Number of addresses to derive. If not set, default is one address.
  int32 count = 3;
  // Derives address(es) on this specific subchain. If not set, address will be generated on the first chain in the HD wallet.
  uint32 subchain_index = 4;
}

message DeleteWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
}

message DeleteHDWalletEndpointRequest {
  NetworkAllowingAlias network = 1;
  string name = 2;
}
