syntax = "proto3";

package fairwaycorp.blockchainprotobuf.btc;
option go_package = "github.com/fairway-corp/blockchain-protobuf/protoc-gen-go/btc";

import "commonMessage.proto";

message TransactionHashEndpointRequest {
  NetworkAllowingAlias network = 1;
  string txhash = 2;
  //Filters TXInputs/TXOutputs, if unset, default is 20.
  int32 limit = 3;
  //Filters TX to only include TXInputs from this input index and above.
  int32 instart = 4;
  //Filters TX to only include TXOutputs from this output index and above.
  int32 outstart = 5;
  //If true, includes hex-encoded raw transaction; false by default.
  bool includeHex = 6;
  //If true, includes the confidence attribute (useful for unconfirmed transactions). For more info about this figure, check the Confidence Factor documentation.
  bool includeConfidence = 7;
}

message UnconfirmedTransactionsEndpointRequest {
  NetworkAllowingAlias network = 1;
}

message NewTransactionEndpointRequest {
  NetworkAllowingAlias network = 1;
  //	Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1.
  int32 block_height = 2;  
  //The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe.
  string hash = 3;  
  //Array of bitcoin public addresses involved in the transaction.
  repeated string addresses = 4;
  //The total number of satoshis exchanged in this transaction.
  int32 total = 5;
  //The total number of fees—in satoshis—collected by miners in this transaction.
  int32 fees = 6;  
  //The size of the transaction in bytes.
  int32 size = 7; 
  //The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low.
  string preference = 8;
  //Address of the peer that sent Block’s servers this transaction.
  string relayed_by = 9;
  //Time this transaction was received by Block’s servers.
  string received = 10;
  //Version number, typically 1 for Bitcoin transactions.
  int32 ver = 11;
  //Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time.
  int32 lock_time = 12;
  //true if this is an attempted double spend; false otherwise.
  bool double_spend = 13;
  //Total number of inputs in the transaction.
  int32 vin_sz = 14;
  //Total number of outputs in the transaction.
  int32 vout_sz = 15;
  //Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations.
  int32 confirmations = 16;
  //TXInput Array, limited to 20 by default.
  repeated TXInput inputs = 17;
  //TXOutput Array, limited to 20 by default.
  repeated TXOutput outputs = 18;
  //Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here.
  bool opt_in_rbf = 19;
  //Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor.
  float confidence = 20;
  //Optional Time at which transaction was included in a block; only present for confirmed transactions.
  string confirmed = 21;
  //Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions.
  int32 receive_count = 22;
  //Optional Address Block will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent.
  string change_address = 23;
  //Optional Hash of the block that contains this transaction; only present for confirmed transactions.
  string block_hash = 24;
  //Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions.
  int32 block_index = 25;
  //Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending.
  string double_of = 26;
  //Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni
  string data_protocol = 27;
  //Optional Hex-encoded bytes of the transaction, as sent over the network.
  string hex = 28;
  //Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the Block URL to query the next set of TXInputs (within a TX object).
  string next_inputs = 29;
  //Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the Block URL to query the next set of TXOutputs(within a TX object).
  string next_outputs = 30;
  bool includeToSignTx = 31;
}

message SendTransactionEndpointRequest {
  NetworkAllowingAlias network = 1;
  //A temporary TX, usually returned fully filled but missing input scripts.
  TX tx = 2;
  //Array of hex-encoded data for you to sign, one for each input.
  repeated string tosign = 3;
  //Array of signatures corresponding to all the data in tosign, typically provided by you.
  repeated string signatures = 4;
  //Array of public keys corresponding to each signature. In general, these are provided by you, and correspond to the signatures you provide.
  repeated string pubkeys = 5;
  //Optional Array of hex-encoded, work-in-progress transactions; optionally returned to validate the tosign data locally.
  repeated string tosign_tx = 6;
  //Optional Array of errors in the form “error”:“description-of-error”. This is only returned if there was an error in any stage of transaction generation, and is usually accompanied by a HTTP 400 code.
  repeated TXerror errors = 7;
}

message PushRawTransactionEndpointRequest {
  NetworkAllowingAlias network = 1;
  string tx = 2;
}

message DecodeRawTransactionEndpointRequest {
  NetworkAllowingAlias network = 1;
  string tx = 2;
}

message DataEndpointRequest {
  NetworkAllowingAlias network = 1;
  //The string representing the data to embed, can be either hex-encoded or plaintext.
  string data = 2;
  //Optional Your BlockCypher API token, can either be included here or as a URL Parameter in your request.
  string token = 3;
  //Optional The encoding of your data, can be either string (for plaintext) or hex (for hex-encoded). If not set, defaults to hex.
  string encoding = 4;
  //Optional The hash of the transaction containing your data; only part of return object.
  string hash = 5;
}

message TransactionPropagationEndpointRequest {
  NetworkAllowingAlias network = 1;
  string txhash = 2;
}


