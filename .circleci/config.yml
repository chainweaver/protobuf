version: 2
jobs:
  build:
    machine:
      image: circleci/classic:edge
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Building protobuf
          command: |
            make build
      - run:
          name: Git commit and push
          command: |
            if [ ! -z "$(git status --porcelain)" ]; then
              if [ $CIRCLE_BRANCH = "master"]; then
                # In the case of the master, if the repository is not clean, it is judged as an error
                exit 1
              fi

              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER"
              git remote add protobuf https://$GITHUB_ACCESS_TOKEN@github.com/chainweaver/protobuf.git

              git add .
              git commit -m "[ci skip] Auto build"

              if [ -n "$CIRCLE_TAG" ]; then
                version=$(./scripts/semVer.sh vvv)

                git checkout -b vup-$version
                git checkout master
                git merge vup-$version
                git push protobuf master

                git tag $version
                git push protobuf $version
              else
                git push protobuf $CIRCLE_BRANCH
              fi
            fi

  render-protobuf-document:
    machine:
      image: circleci/classic:edge
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Rendering protobuf document
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              version=$(./scripts/semVer.sh vvv)
              git pull origin $version
            else
              git pull origin $CIRCLE_BRANCH
            fi

            make render-protobuf-document

            mkdir -p /tmp/protoc-gen-doc
            cp -r protoc-gen-doc/* /tmp/protoc-gen-doc/
      - store_artifacts:
          path: /tmp/protoc-gen-doc
      - persist_to_workspace:
          root: /tmp
          paths:
            - protoc-gen-doc
      - run:
          name: Notify artifacts url to slack
          command: |
            artifactsUrl=$(curl https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts?circle-token=CIRCLE_TOKEN | jq -r '.[].url')
            curl -X POST --data-urlencode \
              "payload={\
                \"channel\": \"#$NOTIFICATION_SLACK_CHANNEL\",\
                \"username\": \"$NOTIFICATION_SLACK_USERNAME\",\
                \"text\": \"Please check the protobuf document\n$artifactsUrl\",\
                \"icon_emoji\": \":$NOTIFICATION_SLACK_ICON_EMOJI:\"\
              }" \
              $NOTIFICATION_SLACK_WEBHOOK_URL

  render-openapi-document:
    machine:
      image: circleci/classic:edge
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Rendering OpenAPI document
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              version=$(./scripts/semVer.sh vvv)
              git pull origin $version
            else
              git pull origin $CIRCLE_BRANCH
            fi

            make render-openapi-document

            mkdir -p /tmp/openapi
            cp -r openapi/*.html /tmp/openapi/
      - store_artifacts:
          path: /tmp/openapi
      - persist_to_workspace:
          root: /tmp
          paths:
            - openapi
      - run:
          name: Notify artifacts url to slack
          command: |
            artifactsUrl=$(curl https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts?circle-token=CIRCLE_TOKEN | jq -r '.[].url')
            curl -X POST --data-urlencode \
              "payload={\
                \"channel\": \"#$NOTIFICATION_SLACK_CHANNEL\",\
                \"username\": \"$NOTIFICATION_SLACK_USERNAME\",\
                \"text\": \"Please check the OpenAPI document\n$artifactsUrl\",\
                \"icon_emoji\": \":$NOTIFICATION_SLACK_ICON_EMOJI:\"\
              }" \
              $NOTIFICATION_SLACK_WEBHOOK_URL

  update-document:
    machine:
      image: circleci/classic:edge
      docker_layer_caching: true
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Git commit and push
          command: |
            # Clone github page repo and create new branch
            cd ~
            git clone https://github.com/chainweaver/chainweaver.github.io.git
            cd chainweaver.github.io
            version=$(~/project/scripts/semVer.sh vvv)
            branchName=doc-${version//./-}
            git checkout $GITHUB_PAGE_DEFAULT_BRANCH
            git checkout -b $branchName

            majorVersion=$(~/project/scripts/semVer.sh v)

            # Store resources in static directory (protobuf)
            protobufDocPath=docusaurus/website/static/protobuf/v$majorVersion
            mkdir -p $protobufDocPath
            cp /tmp/protoc-gen-doc/* $protobufDocPath/

            # Store resources in static directory (OpenAPI)
            openApiDocPath=docusaurus/website/static/openapi/v$majorVersion
            mkdir -p $openApiDocPath
            cp /tmp/openapi/* $openApiDocPath/

            # Commit and push
            git config --global user.email "$GIT_USER_EMAIL"
            git config --global user.name "$GIT_USER"
            git remote add github-io https://$GITHUB_ACCESS_TOKEN@github.com/chainweaver/chainweaver.github.io.git

            git add .
            git commit -m "Update API Documents"
            git push github-io :$branchName || true
            git push github-io $branchName

            git remote add protobuf https://$GITHUB_ACCESS_TOKEN@github.com/chainweaver/protobuf.git
            git push protobuf :$CIRCLE_TAG || true

workflows:
  version: 2
  chainweaver-protobuf:
    jobs:
      - build:
          filters:
            tags:
              ignore: /[0-9]+\.[0-9]+\.[0-9]+/
      - render-protobuf-document:
          requires:
           - build
          filters:
            tags:
              only: /.*/
      - render-openapi-document:
          requires:
           - build
          filters:
            tags:
              only: /.*/
      - update-document:
          requires:
            - render-protobuf-document
            - render-openapi-document
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-\d+\.\d+\.\d+$/