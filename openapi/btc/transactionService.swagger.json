{
  "swagger": "2.0",
  "info": {
    "title": "transactionService.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/btc/{network}/txs": {
      "get": {
        "operationId": "UnconfirmedTransactionsEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcTXS"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/btc/{network}/txs/data": {
      "post": {
        "operationId": "DataEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcNullData"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/btcDataEndpointRequest"
            }
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/btc/{network}/txs/decode": {
      "post": {
        "operationId": "DecodeRawTransactionEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcTX"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/btcDecodeRawTransactionEndpointRequest"
            }
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/btc/{network}/txs/new": {
      "post": {
        "operationId": "NewTransactionEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcTXSkeleton"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/btcNewTransactionEndpointRequest"
            }
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/btc/{network}/txs/push": {
      "post": {
        "operationId": "PushRawTransactionEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcTX"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/btcPushRawTransactionEndpointRequest"
            }
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/btc/{network}/txs/send": {
      "post": {
        "operationId": "SendTransactionEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcTXSkeleton"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/btcSendTransactionEndpointRequest"
            }
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/btc/{network}/txs/{txhash}": {
      "get": {
        "operationId": "TransactionHashEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcTX"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "txhash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Filters TXInputs/TXOutputs, if unset, default is 20.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "instart",
            "description": "Filters TX to only include TXInputs from this input index and above.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "outstart",
            "description": "Filters TX to only include TXOutputs from this output index and above.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeHex",
            "description": "If true, includes hex-encoded raw transaction; false by default.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "includeConfidence",
            "description": "If true, includes the confidence attribute (useful for unconfirmed transactions). For more info about this figure, check the Confidence Factor documentation.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/btc/{network}/txs/{txhash}/propagation": {
      "get": {
        "operationId": "TransactionPropagationEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcDescribedBelow"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "txhash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    }
  },
  "definitions": {
    "btcAggregatedOrigin": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "btcDataEndpointRequest": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/btcNetworkAllowingAlias"
        },
        "data": {
          "type": "string",
          "description": "The string representing the data to embed, can be either hex-encoded or plaintext."
        },
        "token": {
          "type": "string",
          "description": "Optional Your BlockCypher API token, can either be included here or as a URL Parameter in your request."
        },
        "encoding": {
          "type": "string",
          "description": "Optional The encoding of your data, can be either string (for plaintext) or hex (for hex-encoded). If not set, defaults to hex."
        },
        "hash": {
          "type": "string",
          "description": "Optional The hash of the transaction containing your data; only part of return object."
        }
      }
    },
    "btcDecodeRawTransactionEndpointRequest": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/btcNetworkAllowingAlias"
        },
        "tx": {
          "type": "string"
        }
      }
    },
    "btcDescribedBelow": {
      "type": "object",
      "properties": {
        "transaction": {
          "type": "string",
          "description": "The hash of the transaction you queried."
        },
        "first_location": {
          "$ref": "#/definitions/btcFirstLocation",
          "description": "An object containing latitude and longitude floats representing the first location to broadcast this transaction to BlockCypher."
        },
        "first_city": {
          "type": "string",
          "description": "Optional The name of the city closest to the first_location. If no nearby city can be found, this is not returned."
        },
        "first_country": {
          "type": "string",
          "description": "The name of the country containing the first_location."
        },
        "aggregated_origin": {
          "$ref": "#/definitions/btcAggregatedOrigin",
          "description": "An object containing latitude and longitude floats representing BlockCypher’s best guess of likely origin of this transaction, based on the radius of the smallest circle containing the first peer from which we detect this transaction, the average of the first five peers, and the average of the first ten peers."
        },
        "aggregated_origin_radius": {
          "type": "integer",
          "format": "int32",
          "description": "The radius (in meters) of the smallest circle containing the first peer from which we detect this transaction, the average of the first five peers, and the average of the first ten peers. In a general sense, this represents an approximate confidence interval in our calculated aggregated_origin; the smaller the radius, the more confidence in our aggregated_origin assessment."
        },
        "first_received": {
          "type": "string",
          "description": "The timestamp when BlockCypher first received this transaction."
        }
      }
    },
    "btcFirstLocation": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "btcNetworkAllowingAlias": {
      "type": "string",
      "enum": [
        "MAINNET",
        "mainnet",
        "TEST",
        "test"
      ],
      "default": "MAINNET"
    },
    "btcNewTransactionEndpointRequest": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/btcNetworkAllowingAlias"
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "description": "Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1."
        },
        "hash": {
          "type": "string",
          "description": "The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of bitcoin public addresses involved in the transaction."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of satoshis exchanged in this transaction."
        },
        "fees": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of fees—in satoshis—collected by miners in this transaction."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the transaction in bytes."
        },
        "preference": {
          "type": "string",
          "description": "The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low."
        },
        "relayed_by": {
          "type": "string",
          "description": "Address of the peer that sent Block’s servers this transaction."
        },
        "received": {
          "type": "string",
          "description": "Time this transaction was received by Block’s servers."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version number, typically 1 for Bitcoin transactions."
        },
        "lock_time": {
          "type": "integer",
          "format": "int32",
          "description": "Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time."
        },
        "double_spend": {
          "type": "boolean",
          "format": "boolean",
          "description": "true if this is an attempted double spend; false otherwise."
        },
        "vin_sz": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of inputs in the transaction."
        },
        "vout_sz": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of outputs in the transaction."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXInput"
          },
          "description": "TXInput Array, limited to 20 by default."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXOutput"
          },
          "description": "TXOutput Array, limited to 20 by default."
        },
        "opt_in_rbf": {
          "type": "boolean",
          "format": "boolean",
          "description": "Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor."
        },
        "confirmed": {
          "type": "string",
          "description": "Optional Time at which transaction was included in a block; only present for confirmed transactions."
        },
        "receive_count": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions."
        },
        "change_address": {
          "type": "string",
          "description": "Optional Address Block will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent."
        },
        "block_hash": {
          "type": "string",
          "description": "Optional Hash of the block that contains this transaction; only present for confirmed transactions."
        },
        "block_index": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions."
        },
        "double_of": {
          "type": "string",
          "description": "Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending."
        },
        "data_protocol": {
          "type": "string",
          "title": "Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni"
        },
        "hex": {
          "type": "string",
          "description": "Optional Hex-encoded bytes of the transaction, as sent over the network."
        },
        "next_inputs": {
          "type": "string",
          "description": "Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the Block URL to query the next set of TXInputs (within a TX object)."
        },
        "next_outputs": {
          "type": "string",
          "description": "Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the Block URL to query the next set of TXOutputs(within a TX object)."
        },
        "includeToSignTx": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "btcNullData": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The string representing the data to embed, can be either hex-encoded or plaintext."
        },
        "token": {
          "type": "string",
          "description": "Optional Your BlockCypher API token, can either be included here or as a URL Parameter in your request."
        },
        "encoding": {
          "type": "string",
          "description": "Optional The encoding of your data, can be either string (for plaintext) or hex (for hex-encoded). If not set, defaults to hex."
        },
        "hash": {
          "type": "string",
          "description": "Optional The hash of the transaction containing your data; only part of return object."
        }
      }
    },
    "btcPushRawTransactionEndpointRequest": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/btcNetworkAllowingAlias"
        },
        "tx": {
          "type": "string"
        }
      }
    },
    "btcSendTransactionEndpointRequest": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/btcNetworkAllowingAlias"
        },
        "tx": {
          "$ref": "#/definitions/btcTX",
          "description": "A temporary TX, usually returned fully filled but missing input scripts."
        },
        "tosign": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of hex-encoded data for you to sign, one for each input."
        },
        "signatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of signatures corresponding to all the data in tosign, typically provided by you."
        },
        "pubkeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of public keys corresponding to each signature. In general, these are provided by you, and correspond to the signatures you provide."
        },
        "tosign_tx": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional Array of hex-encoded, work-in-progress transactions; optionally returned to validate the tosign data locally."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXerror"
          },
          "description": "Optional Array of errors in the form “error”:“description-of-error”. This is only returned if there was an error in any stage of transaction generation, and is usually accompanied by a HTTP 400 code."
        }
      }
    },
    "btcTX": {
      "type": "object",
      "properties": {
        "block_height": {
          "type": "integer",
          "format": "int32",
          "description": "Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1."
        },
        "hash": {
          "type": "string",
          "description": "The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of bitcoin public addresses involved in the transaction."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of satoshis exchanged in this transaction."
        },
        "fees": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of fees—in satoshis—collected by miners in this transaction."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the transaction in bytes."
        },
        "preference": {
          "type": "string",
          "description": "The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low."
        },
        "relayed_by": {
          "type": "string",
          "description": "Address of the peer that sent Block’s servers this transaction."
        },
        "received": {
          "type": "string",
          "description": "Time this transaction was received by Block’s servers."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version number, typically 1 for Bitcoin transactions."
        },
        "lock_time": {
          "type": "integer",
          "format": "int32",
          "description": "Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time."
        },
        "double_spend": {
          "type": "boolean",
          "format": "boolean",
          "description": "true if this is an attempted double spend; false otherwise."
        },
        "vin_sz": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of inputs in the transaction."
        },
        "vout_sz": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of outputs in the transaction."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXInput"
          },
          "description": "TXInput Array, limited to 20 by default."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXOutput"
          },
          "description": "TXOutput Array, limited to 20 by default."
        },
        "opt_in_rbf": {
          "type": "boolean",
          "format": "boolean",
          "description": "Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor."
        },
        "confirmed": {
          "type": "string",
          "description": "Optional Time at which transaction was included in a block; only present for confirmed transactions."
        },
        "receive_count": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions."
        },
        "change_address": {
          "type": "string",
          "description": "Optional Address Block will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent."
        },
        "block_hash": {
          "type": "string",
          "description": "Optional Hash of the block that contains this transaction; only present for confirmed transactions."
        },
        "block_index": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions."
        },
        "double_of": {
          "type": "string",
          "description": "Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending."
        },
        "data_protocol": {
          "type": "string",
          "title": "Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni"
        },
        "hex": {
          "type": "string",
          "description": "Optional Hex-encoded bytes of the transaction, as sent over the network."
        },
        "next_inputs": {
          "type": "string",
          "description": "Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the Block URL to query the next set of TXInputs (within a TX object)."
        },
        "next_outputs": {
          "type": "string",
          "description": "Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the Block URL to query the next set of TXOutputs(within a TX object)."
        }
      }
    },
    "btcTXInput": {
      "type": "object",
      "properties": {
        "prev_hash": {
          "type": "string",
          "description": "The previous transaction hash where this input was an output. Not present for coinbase transactions."
        },
        "output_index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the output being spent within the previous transaction. Not present for coinbase transactions."
        },
        "output_value": {
          "type": "integer",
          "format": "int32",
          "description": "The value of the output being spent within the previous transaction. Not present for coinbase transactions."
        },
        "script_type": {
          "type": "string",
          "description": "The type of script that encumbers the output corresponding to this input."
        },
        "script": {
          "type": "string",
          "description": "Raw hexadecimal encoding of the script."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of public addresses associated with the output of the previous transaction."
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "Legacy 4-byte sequence number, not usually relevant unless dealing with locktime encumbrances."
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Number of confirmations of the previous transaction for which this input was an output. Currently, only returned in unconfirmed transactions."
        },
        "wallet_name": {
          "type": "string",
          "description": "Optional Name of Wallet or HDWallet from which to derive inputs. Only used when constructing transactions via the Creating Transactions process."
        },
        "wallet_token": {
          "type": "string",
          "description": "Optional Token associated with Wallet or HDWallet used to derive inputs. Only used when constructing transactions via the Creating Transactions process."
        }
      }
    },
    "btcTXOutput": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "Value in this transaction output, in satoshis."
        },
        "script": {
          "type": "string",
          "description": "Raw hexadecimal encoding of the encumbrance script for this output."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Addresses that correspond to this output; typically this will only have a single address, and you can think of this output as having “sent” value to the address contained herein."
        },
        "script_type": {
          "type": "string",
          "description": "The type of encumbrance script used for this output."
        },
        "spent_by": {
          "type": "string",
          "description": "Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed."
        },
        "data_hex": {
          "type": "string",
          "description": "Optional A hex-encoded representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data."
        },
        "data_string": {
          "type": "string",
          "description": "Optional An ASCII representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data and if its data falls into the visible ASCII range."
        }
      }
    },
    "btcTXS": {
      "type": "object",
      "properties": {
        "txs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTX"
          }
        }
      }
    },
    "btcTXSkeleton": {
      "type": "object",
      "properties": {
        "tx": {
          "$ref": "#/definitions/btcTX",
          "description": "A temporary TX, usually returned fully filled but missing input scripts."
        },
        "tosign": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of hex-encoded data for you to sign, one for each input."
        },
        "signatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of signatures corresponding to all the data in tosign, typically provided by you."
        },
        "pubkeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of public keys corresponding to each signature. In general, these are provided by you, and correspond to the signatures you provide."
        },
        "tosign_tx": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional Array of hex-encoded, work-in-progress transactions; optionally returned to validate the tosign data locally."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXerror"
          },
          "description": "Optional Array of errors in the form “error”:“description-of-error”. This is only returned if there was an error in any stage of transaction generation, and is usually accompanied by a HTTP 400 code."
        }
      }
    },
    "btcTXerror": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    }
  }
}
