{
  "swagger": "2.0",
  "info": {
    "title": "addressService.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/btc/{network}/addrs": {
      "post": {
        "operationId": "GenerateMultisigAddressEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcAddressKeychain"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/btcGenerateMultisigAddressEndpointRequest"
            }
          }
        ],
        "tags": [
          "AddressService"
        ]
      }
    },
    "/btc/{network}/addrs/{address}": {
      "get": {
        "operationId": "AddressEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcAddress"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "unspentOnly",
            "description": "If unspentOnly is true, filters response to only include unspent transaction outputs (UTXOs).",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "includeScript",
            "description": "If includeScript is true, includes raw script of input or output within returned TXRefs.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "includeConfidence",
            "description": "If true, includes the confidence attribute (useful for unconfirmed transactions) within returned TXRefs. For more info about this figure, check the Confidence Factor documentation.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "before",
            "description": "Filters response to only include transactions below before height in the blockchain.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "after",
            "description": "Filters response to only include transactions above after height in the blockchain.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "limit sets the minimum number of returned TXRefs; there can be less if there are less than limit TXRefs associated with this address, but there can be more in the rare case of more TXRefs in the block at the bottom of your call. This ensures paging by block height never misses TXRefs. Defaults to 200, maximum is 2000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "confirmations",
            "description": "If set, only returns the balance and TXRefs that have at least this number of confirmations.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "confidence",
            "description": "Filters response to only include TXRefs above confidence in percent; e.g., if this is set to 99, will only return TXRefs with 99% confidence or above (including all confirmed TXRefs). For more detail on confidence, check the Confidence Factor documentation.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "omitWalletAddresses",
            "description": "If omitWalletAddresses is true and you’re querying a Wallet or HDWallet, the response will omit address information (useful to speed up the API call for larger wallets).",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "AddressService"
        ]
      }
    },
    "/btc/{network}/addrs/{address}/balance": {
      "get": {
        "operationId": "AddressBalanceEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcAddress"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "omitWalletAddresses",
            "description": "If omitWalletAddresses is true and you’re querying a Wallet or HDWallet, the response will omit address information (useful to speed up the API call for larger wallets).",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "AddressService"
        ]
      }
    },
    "/btc/{network}/addrs/{address}/full": {
      "get": {
        "operationId": "AddressFullEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/btcAddress"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAINNET",
              "mainnet",
              "TEST",
              "test"
            ]
          },
          {
            "name": "address",
            "description": "address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "before",
            "description": "Filters response to only include transactions below before height in the blockchain.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "after",
            "description": "Filters response to only include transactions above after height in the blockchain.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "limit sets the minimum number of returned TXs; there can be less if there are less than limit TXs associated with this address, but there can also be more in the rare case of more TXs in the block at the bottom of your call. This ensures paging by block height never misses TXs. Defaults to 10, maximum is 50.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "txlimit",
            "description": "This filters the TXInputs/TXOutputs within the returned TXs to include a maximum of txlimit items.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "confirmations",
            "description": "If set, only returns the balance and TXs that have at least this number of confirmations.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "confidence",
            "description": "Filters response to only include TXs above confidence in percent; e.g., if this is set to 99, will only return TXs with 99% confidence or above (including all confirmed TXs). For more detail on confidence, check the Confidence Factor documentation.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeHex",
            "description": "If true, includes hex-encoded raw transaction for each TX; false by default.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "includeConfidence",
            "description": "If true, includes the confidence attribute (useful for unconfirmed transactions) within returned TXs. For more info about this figure, check the Confidence Factor documentation.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "omitWalletAddresses",
            "description": "If omitWalletAddresses is true and you’re querying a Wallet or HDWallet, the response will omit address information (useful to speed up the API call for larger wallets).",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "AddressService"
        ]
      }
    }
  },
  "definitions": {
    "btcAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Optional The requested address. Not returned if querying a wallet/HD wallet."
        },
        "wallet": {
          "$ref": "#/definitions/btcWallet",
          "description": "Optional The requested wallet object. Only returned if querying by wallet name instead of public address."
        },
        "hd_wallet": {
          "$ref": "#/definitions/btcHDWallet",
          "description": "Optional The requested HD wallet object. Only returned if querying by HD wallet name instead of public address."
        },
        "total_received": {
          "type": "integer",
          "format": "int32",
          "description": "Total amount of confirmed satoshis received by this address."
        },
        "total_sent": {
          "type": "integer",
          "format": "int32",
          "description": "Total amount of confirmed satoshis sent by this address."
        },
        "balance": {
          "type": "integer",
          "format": "int32",
          "description": "Balance of confirmed satoshis on this address. This is the difference between outputs and inputs on this address, but only for transactions that have been included into a block (i.e., for transactions whose confirmations \u003e 0)."
        },
        "unconfirmed_balance": {
          "type": "integer",
          "format": "int32",
          "description": "Balance of unconfirmed satoshis on this address. Can be negative (if unconfirmed transactions are just spending outputs). Only unconfirmed transactions (haven’t made it into a block) are included."
        },
        "final_balance": {
          "type": "integer",
          "format": "int32",
          "description": "Total balance of satoshis, including confirmed and unconfirmed transactions, for this address."
        },
        "n_tx": {
          "type": "integer",
          "format": "int32",
          "description": "Number of confirmed transactions on this address. Only transactions that have made it into a block (confirmations \u003e 0) are counted."
        },
        "unconfirmed_n_tx": {
          "type": "integer",
          "format": "int32",
          "description": "Number of unconfirmed transactions for this address. Only unconfirmed transactions (confirmations == 0) are counted."
        },
        "final_n_tx": {
          "type": "integer",
          "format": "int32",
          "description": "Final number of transactions, including confirmed and unconfirmed transactions, for this address."
        },
        "tx_url": {
          "type": "string",
          "description": "Optional To retrieve base URL transactions. To get the full URL, concatenate this URL with a transaction’s hash."
        },
        "txs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTX"
          },
          "description": "Array of full transaction details associated with this address. Usually only returned from the Address Full Endpoint."
        },
        "txrefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXRef"
          },
          "description": "Optional Array of transaction inputs and outputs for this address. Usually only returned from the standard Address Endpoint."
        },
        "unconfirmed_txrefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXRef"
          },
          "description": "Optional All unconfirmed transaction inputs and outputs for this address. Usually only returned from the standard Address Endpoint."
        },
        "hasMore": {
          "type": "boolean",
          "format": "boolean",
          "description": "Optional If true, then the Address object contains more transactions than shown. Useful for determining whether to poll the API for more transaction information."
        }
      }
    },
    "btcAddressKeychain": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Standard address representation."
        },
        "public": {
          "type": "string",
          "description": "Hex-encoded Public key."
        },
        "private": {
          "type": "string",
          "description": "Hex-encoded Private key."
        },
        "wif": {
          "type": "string",
          "description": "Wallet import format, a common encoding for the private key."
        },
        "pubkeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional Array of public keys to provide to generate a multisig address."
        },
        "script_type": {
          "type": "string",
          "description": "Optional If generating a multisig address, the type of multisig script; typically “multisig-n-of-m”, where n and m are integers."
        },
        "original_address": {
          "type": "string",
          "description": "Optional If generating an OAP address, this represents the parent blockchain’s underlying address (the typical address listed above)."
        },
        "oap_address": {
          "type": "string",
          "description": "Optional The OAP address, if generated using the Generate Asset Address Endpoint."
        }
      }
    },
    "btcGenerateAddressEndpointRequest": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/btcNetworkAllowingAlias"
        }
      }
    },
    "btcGenerateMultisigAddressEndpointRequest": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "#/definitions/btcNetworkAllowingAlias"
        },
        "address": {
          "type": "string",
          "description": "Standard address representation."
        },
        "public": {
          "type": "string",
          "description": "Hex-encoded Public key."
        },
        "private": {
          "type": "string",
          "description": "Hex-encoded Private key."
        },
        "wif": {
          "type": "string",
          "description": "Wallet import format, a common encoding for the private key."
        },
        "pubkeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional Array of public keys to provide to generate a multisig address."
        },
        "script_type": {
          "type": "string",
          "description": "Optional If generating a multisig address, the type of multisig script; typically “multisig-n-of-m”, where n and m are integers."
        },
        "original_address": {
          "type": "string",
          "description": "Optional If generating an OAP address, this represents the parent blockchain’s underlying address (the typical address listed above)."
        },
        "oap_address": {
          "type": "string",
          "description": "Optional The OAP address, if generated using the Generate Asset Address Endpoint."
        }
      }
    },
    "btcHDAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Standard address representation."
        },
        "path": {
          "type": "string",
          "description": "The BIP32 path of the HD address."
        },
        "public": {
          "type": "string",
          "description": "optional Contains the hex-encoded public key if returned by Derive Address in Wallet endpoint."
        }
      }
    },
    "btcHDChain": {
      "type": "object",
      "properties": {
        "chain_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcHDAddress"
          },
          "description": "Array of HDAddresses associated with this subchain."
        },
        "index": {
          "type": "string",
          "format": "int64",
          "description": "optional Index of the subchain, returned if the wallet has subchains."
        }
      }
    },
    "btcHDWallet": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "User token associated with this HD wallet."
        },
        "name": {
          "type": "string",
          "description": "Name of the HD wallet."
        },
        "chains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcHDChain"
          },
          "description": "List of HD chains associated with this wallet, each containing HDAddresses. A single chain is returned if the wallet has no subchains."
        },
        "hd": {
          "type": "boolean",
          "format": "boolean",
          "description": "true for HD wallets, not present for normal wallets."
        },
        "extended_public_key": {
          "type": "string",
          "title": "The extended public key all addresses in the HD wallet are derived from. It’s encoded in BIP32 format"
        },
        "subchain_indexes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "optional returned for HD wallets created with subchains."
        }
      }
    },
    "btcNetworkAllowingAlias": {
      "type": "string",
      "enum": [
        "MAINNET",
        "mainnet",
        "TEST",
        "test"
      ],
      "default": "MAINNET"
    },
    "btcTX": {
      "type": "object",
      "properties": {
        "block_height": {
          "type": "integer",
          "format": "int32",
          "description": "Height of the block that contains this transaction. If this is an unconfirmed transaction, it will equal -1."
        },
        "hash": {
          "type": "string",
          "description": "The hash of the transaction. While reasonably unique, using hashes as identifiers may be unsafe."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of bitcoin public addresses involved in the transaction."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of satoshis exchanged in this transaction."
        },
        "fees": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of fees—in satoshis—collected by miners in this transaction."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the transaction in bytes."
        },
        "preference": {
          "type": "string",
          "description": "The likelihood that this transaction will make it to the next block; reflects the preference level miners have to include this transaction. Can be high, medium or low."
        },
        "relayed_by": {
          "type": "string",
          "description": "Address of the peer that sent Block’s servers this transaction."
        },
        "received": {
          "type": "string",
          "description": "Time this transaction was received by Block’s servers."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version number, typically 1 for Bitcoin transactions."
        },
        "lock_time": {
          "type": "integer",
          "format": "int32",
          "description": "Time when transaction can be valid. Can be interpreted in two ways: if less than 500 million, refers to block height. If more, refers to Unix epoch time."
        },
        "double_spend": {
          "type": "boolean",
          "format": "boolean",
          "description": "true if this is an attempted double spend; false otherwise."
        },
        "vin_sz": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of inputs in the transaction."
        },
        "vout_sz": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of outputs in the transaction."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXInput"
          },
          "description": "TXInput Array, limited to 20 by default."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/btcTXOutput"
          },
          "description": "TXOutput Array, limited to 20 by default."
        },
        "opt_in_rbf": {
          "type": "boolean",
          "format": "boolean",
          "description": "Optional Returns true if this transaction has opted in to Replace-By-Fee (RBF), either true or not present. You can read more about Opt-In RBF here."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor."
        },
        "confirmed": {
          "type": "string",
          "description": "Optional Time at which transaction was included in a block; only present for confirmed transactions."
        },
        "receive_count": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions."
        },
        "change_address": {
          "type": "string",
          "description": "Optional Address Block will use to send back your change, if you constructed this transaction. If not set, defaults to the address from which the coins were originally sent."
        },
        "block_hash": {
          "type": "string",
          "description": "Optional Hash of the block that contains this transaction; only present for confirmed transactions."
        },
        "block_index": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Canonical, zero-indexed location of this transaction in a block; only present for confirmed transactions."
        },
        "double_of": {
          "type": "string",
          "description": "Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending."
        },
        "data_protocol": {
          "type": "string",
          "title": "Optional Returned if this transaction contains an OP_RETURN associated with a known data protocol. Data protocols currently detected: blockchainid ; openassets ; factom ; colu ; coinspark ; omni"
        },
        "hex": {
          "type": "string",
          "description": "Optional Hex-encoded bytes of the transaction, as sent over the network."
        },
        "next_inputs": {
          "type": "string",
          "description": "Optional If there are more transaction inptus that couldn’t fit into the TXInput array, this is the Block URL to query the next set of TXInputs (within a TX object)."
        },
        "next_outputs": {
          "type": "string",
          "description": "Optional If there are more transaction outputs that couldn’t fit into the TXOutput array, this is the Block URL to query the next set of TXOutputs(within a TX object)."
        }
      }
    },
    "btcTXInput": {
      "type": "object",
      "properties": {
        "prev_hash": {
          "type": "string",
          "description": "The previous transaction hash where this input was an output. Not present for coinbase transactions."
        },
        "output_index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the output being spent within the previous transaction. Not present for coinbase transactions."
        },
        "output_value": {
          "type": "integer",
          "format": "int32",
          "description": "The value of the output being spent within the previous transaction. Not present for coinbase transactions."
        },
        "script_type": {
          "type": "string",
          "description": "The type of script that encumbers the output corresponding to this input."
        },
        "script": {
          "type": "string",
          "description": "Raw hexadecimal encoding of the script."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of public addresses associated with the output of the previous transaction."
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "Legacy 4-byte sequence number, not usually relevant unless dealing with locktime encumbrances."
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Number of confirmations of the previous transaction for which this input was an output. Currently, only returned in unconfirmed transactions."
        },
        "wallet_name": {
          "type": "string",
          "description": "Optional Name of Wallet or HDWallet from which to derive inputs. Only used when constructing transactions via the Creating Transactions process."
        },
        "wallet_token": {
          "type": "string",
          "description": "Optional Token associated with Wallet or HDWallet used to derive inputs. Only used when constructing transactions via the Creating Transactions process."
        }
      }
    },
    "btcTXOutput": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "Value in this transaction output, in satoshis."
        },
        "script": {
          "type": "string",
          "description": "Raw hexadecimal encoding of the encumbrance script for this output."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Addresses that correspond to this output; typically this will only have a single address, and you can think of this output as having “sent” value to the address contained herein."
        },
        "script_type": {
          "type": "string",
          "description": "The type of encumbrance script used for this output."
        },
        "spent_by": {
          "type": "string",
          "description": "Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed."
        },
        "data_hex": {
          "type": "string",
          "description": "Optional A hex-encoded representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data."
        },
        "data_string": {
          "type": "string",
          "description": "Optional An ASCII representation of an OP_RETURN data output, without any other script instructions. Only returned for outputs whose script_type is null-data and if its data falls into the visible ASCII range."
        }
      }
    },
    "btcTXRef": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Optional The address associated with this transaction input/output. Only returned when querying an address endpoint via a wallet/HD wallet name."
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "description": "Height of the block that contains this transaction input/output. If it’s unconfirmed, this will equal -1."
        },
        "tx_hash": {
          "type": "string",
          "description": "The hash of the transaction containing this input/output. While reasonably unique, using hashes as identifiers may be unsafe."
        },
        "tx_input_n": {
          "type": "integer",
          "format": "int32",
          "description": "Index of this input in the enclosing transaction. It’s a negative number for an output."
        },
        "tx_output_n": {
          "type": "integer",
          "format": "int32",
          "description": "Index of this output in the enclosing transaction. It’s a negative number for an input."
        },
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "The value transfered by this input/output in satoshis exchanged in the enclosing transaction."
        },
        "preference": {
          "type": "string",
          "description": "The likelihood that the enclosing transaction will make it to the next block; reflects the preference level miners have to include the enclosing transaction. Can be high, medium or low."
        },
        "spent": {
          "type": "boolean",
          "format": "boolean",
          "description": "true if this is an output and was spent. If it’s an input, or an unspent output, it will be false."
        },
        "double_spend": {
          "type": "boolean",
          "format": "boolean",
          "description": "true if this is an attempted double spend; false otherwise."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of subsequent blocks, including the block the transaction is in. Unconfirmed transactions have 0 confirmations."
        },
        "script": {
          "type": "string",
          "description": "Optional Raw, hex-encoded script of this input/output."
        },
        "ref_balance": {
          "type": "integer",
          "format": "int32",
          "description": "Optional The past balance of the parent address the moment this transaction was confirmed. Not present for unconfirmed transactions."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Optional The percentage chance this transaction will not be double-spent against, if unconfirmed. For more information, check the section on Confidence Factor."
        },
        "confirmed": {
          "type": "string",
          "description": "Optional Time at which transaction was included in a block; only present for confirmed transactions."
        },
        "spent_by": {
          "type": "string",
          "description": "Optional The transaction hash that spent this output. Only returned for outputs that have been spent. The spending transaction may be unconfirmed."
        },
        "received": {
          "type": "string",
          "description": "Optional Time this transaction was received by Block’s servers; only present for unconfirmed transactions."
        },
        "receive_count": {
          "type": "integer",
          "format": "int32",
          "description": "Optional Number of peers that have sent this transaction to Block; only present for unconfirmed transactions."
        },
        "double_of": {
          "type": "string",
          "description": "Optional If this transaction is a double-spend (i.e. double_spend == true) then this is the hash of the transaction it’s double-spending."
        }
      }
    },
    "btcWallet": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "User token associated with this wallet."
        },
        "name": {
          "type": "string",
          "description": "Name of the wallet."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of addresses associated with this wallet."
        }
      }
    }
  }
}
