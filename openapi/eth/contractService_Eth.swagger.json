{
  "swagger": "2.0",
  "info": {
    "title": "contractService_Eth.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/eth/{network}/contracts": {
      "post": {
        "operationId": "PostCreateContractEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ethContractArray"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAIN",
              "main",
              "ROPSTEN",
              "ropsten"
            ]
          }
        ],
        "tags": [
          "ContractService"
        ]
      }
    },
    "/eth/{network}/contracts/{query_address}": {
      "get": {
        "operationId": "GetContractAddressEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ethContract"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAIN",
              "main",
              "ROPSTEN",
              "ropsten"
            ]
          },
          {
            "name": "query_address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ContractService"
        ]
      }
    },
    "/eth/{network}/contracts/{query_address}/{method}": {
      "post": {
        "operationId": "PostCallContractMethodEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ethContract"
            }
          }
        },
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "MAIN",
              "main",
              "ROPSTEN",
              "ropsten"
            ]
          },
          {
            "name": "query_address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "method",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ContractService"
        ]
      }
    }
  },
  "definitions": {
    "ethContract": {
      "type": "object",
      "properties": {
        "solidity": {
          "type": "string",
          "description": "Solidity code of this contract; required when creating a contract. In responses, only returned with contracts initially compiled by BlockCypher."
        },
        "params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameters for either contract creation or method execution."
        },
        "publish": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Named contract(s) to publish; necessary to specify when first creating a contract."
        },
        "private": {
          "type": "string",
          "description": "Private key associated with a funded Ethereum external account used to publish a contract or execute a method."
        },
        "gas_limit": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum amount of gas to use in contract creation or method execution."
        },
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "Amount (in wei) to transfer; can be used when creating a contract or calling a method."
        },
        "name": {
          "type": "string",
          "description": "Name of contract as published."
        },
        "bin": {
          "type": "string",
          "description": "Hex-encoded binary compilation of this contract."
        },
        "abi": {
          "type": "string",
          "description": "JSON-encoded ABI. Only returned with contracts initially compiled by BlockCypher."
        },
        "address": {
          "type": "string",
          "description": "Hex-encoded address of this contract."
        },
        "created": {
          "type": "string",
          "description": "Timestamp when this contract was confirmed in the Ethereum blockchain."
        },
        "creation_tx_hash": {
          "type": "string",
          "description": "Hex-encoded transaction hash that created this contract."
        },
        "results": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "If this is a response from a calling a contract method, this array of results may appear if the method returns any."
        }
      }
    },
    "ethContractArray": {
      "type": "object",
      "properties": {
        "contract": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ethContract"
          }
        }
      }
    },
    "ethNetworkAllowingAlias": {
      "type": "string",
      "enum": [
        "MAIN",
        "main",
        "ROPSTEN",
        "ropsten"
      ],
      "default": "MAIN"
    }
  }
}
