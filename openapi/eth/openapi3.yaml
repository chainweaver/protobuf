openapi: 3.0.0
info:
  title: Chainweaver API for Ethereum
  description: Welcome to Chainweaver's API documentation!\n All API calls are versioned
    and the current BlockCypher API is v1. The BlockCypher Ethereum API is currently
    in beta, and we hope not to introduce any breaking changes, but until it’s out
    of beta we can’t make that guarantee until it’s stable.
  version: master
security:
- ApiKeyAuthInHeader: []
- ApiKeyAuthInQuery: []
paths:
  /eth/{network}/addrs:
    post:
      summary: Generate Address Endpoint
      description: The Generate Address endpoint allows you to generate private-public
        key-pairs along with an associated public address. No information is required
        with this POST request. The returned object contains a private key, a public
        key, and a public address, all hex-encoded.<aside class="notice">The private
        key returned is immediately discarded by our servers, but we advise that these
        keys should not be used for any high-value—or long-term storage—addresses.</aside>
      operationId: GenerateAddressEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethAddressKeychain'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethAddressKeychain'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethGenerateAddressEndpointRequest'
        required: true
      tags:
      - Address API
  /eth/{network}/addrs/{address}:
    get:
      summary: Address Endpoint
      description: The Address Endpoint returns more information about an address’
        transactions than the Address Balance Endpoint, but sacrifices some response
        speed in the process. The returned object contains information about the address,
        including its balance in wei, the number of transactions associated with it,
        and transaction summaries in descending order by block height.
      operationId: AddressEndpoint
      responses:
        '200':
          description: Success OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethAddress'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: address
        in: path
        required: true
        schema:
          type: string
      - name: before
        description: Filters response to only include transactions below before height
          in the blockchain. ( < before ).
        in: query
        required: false
        schema:
          type: integer
      - name: after
        description: Filters response to only include transactions above after height
          in the blockchain. ( after <= ).
        in: query
        required: false
        schema:
          type: integer
      - name: limit
        description: limit sets the minimum number of returned TXRefs; there can be
          less if there are less than limit TXRefs associated with this address, but
          there can be more in the rare case of more TXRefs in the block at the bottom
          of your call. This ensures paging by block height never misses TXRefs. Defaults
          to 200, maximum is 2000.
        in: query
        required: false
        schema:
          type: integer
      - name: confirmations
        description: If set, only returns the balance and TXRefs that have at least
          this number of confirmations.
        in: query
        required: false
        schema:
          type: integer
      tags:
      - Address API
  /eth/{network}/addrs/{address}/balance:
    get:
      summary: Address Balance Endpoint
      description: The Address Balance Endpoint is the simplest—and fastest—method
        to get a subset of information on a public address. The returned object contains
        information about the address, including its balance in wei and the number
        of transactions associated with it. The endpoint omits any detailed transaction
        information, but if that isn’t required by your application, then it’s the
        fastest and preferred way to get public address information.
      operationId: AddressBalanceEndpoint
      responses:
        '200':
          description: Success OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethAddress'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: address
        in: path
        required: true
        schema:
          type: string
      tags:
      - Address API
  /eth/{network}:
    get:
      summary: Chain Endpoint
      description: General information about the Ethereum blockchain is available
        by GET-ing the base resource. The returned object contains a litany of information,
        including its height, the time/hash of the latest block, and more. For Ethereum,
        the object includes information on gas_price, denoted in wei. Unlike Bitcoin,
        fees are determined by the computational execution cost of the transaction
        via gas; in order to prevent runaway contract execution, each operation in
        Ethereum’s Virtual Machine requires a fixed/known amount of gas. While the
        amount of gas is fixed for a given EVM operation, the price of gas fluctuates
        based on market demand on the Ethereum blockchain (similar to Bitcoin fees).
        For more detail, check this very helpful Stack Exchange explanation.
      operationId: ChainEndpoint
      responses:
        '200':
          description: Success OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethBlockchain'
      parameters:
      - name: network
        description: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      tags:
      - Blockchain API
  /eth/{network}/blocks/{block_hash}:
    get:
      summary: Block Hash Endpoint
      description: If you want more data on a particular block, you can use the Block
        Hash endpoint. The returned object contains information about the block, including
        its height, the total amount of wei transacted within it, the number of transactions
        in it, transaction hashes listed in the canonical order in which they appear
        in the block, and more. For more detail on the data returned, check the Block
        object.
      operationId: BlockHashEndpoint
      responses:
        '200':
          description: Success OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethBlock'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      parameters:
      - name: network
        description: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: block_hash
        description: 'String representing the hash of the block you’re interested
          in querying, for example: `0000000000000000189bba3564a63772107b5673c940c16f12662b3e8546b412`'
        in: path
        required: true
        schema:
          type: string
      - name: txstart
        description: Filters response to only include transaction hashes after txstart
          height in the block.
        in: query
        required: false
        schema:
          type: integer
      - name: limit
        description: Filters response to only include a maximum of limit transactions
          hashes in the block. Defaults to 20, maximum value allowed is 500.
        in: query
        required: false
        schema:
          type: integer
      tags:
      - Blockchain API
  /eth/{network}/blocks/{block_height}:
    get:
      summary: Block Height Endpoint
      description: You can also query for information on a block using its height,
        using the same resource but with a different variable type. As above, the
        returned object contains information about the block, including its hash,
        the total amount of wei transacted within it, the number of transactions in
        it, transaction hashes listed in the canonical order in which they appear
        in the block, and more. For more detail on the data returned, check the Block
        object. <aside class="notice">With recent blocks, $BLOCK_HEIGHT is not always
        a unique identifier, due to the possibility of soft forks/orphans and the
        nature of the consensus model with blockchains. If you’re querying blocks
        with depth above 10 (i.e., there are more than 10 blocks ahead of your target)
        the height should be a safe identifier.</aside>
      operationId: BlockHeightEndpoint
      responses:
        '200':
          description: Success OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethBlock'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      parameters:
      - name: network
        description: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: block_height
        description: 'Integer representing the height of the block you’re interested
          in querying, for example: `1500000`'
        in: path
        required: true
        schema:
          type: string
      - name: txstart
        description: Filters response to only include transaction hashes after txstart
          height in the block.
        in: query
        required: false
        schema:
          type: integer
      - name: limit
        description: Filters response to only include a maximum of limit transactions
          hashes in the block. Defaults to 20, maximum value allowed is 500.
        in: query
        required: false
        schema:
          type: integer
      tags:
      - Blockchain API
  /eth/{network}/contracts:
    post:
      operationId: CreateContractEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethContracts'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethCreateContractEndpointRequest'
        required: true
      tags:
      - ContractService
  /eth/{network}/contracts/{query_address}:
    get:
      operationId: ContractAddressEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethContract'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: query_address
        in: path
        required: true
        schema:
          type: string
      tags:
      - ContractService
  /eth/{network}/contracts/{query_address}/{method}:
    post:
      operationId: CallContractMethodEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethContract'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: query_address
        in: path
        required: true
        schema:
          type: string
      - name: method
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethCallContractMethodEndpointRequest'
        required: true
      tags:
      - ContractService
  /eth/{network}/txs:
    get:
      operationId: UnconfirmedTransactionsEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethTXs'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      tags:
      - TransactionService
  /eth/{network}/txs/decode:
    post:
      operationId: DecodeRawTransactionEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethTX'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethDecodeRawTransactionEndpointRequest'
        required: true
      tags:
      - TransactionService
  /eth/{network}/txs/new:
    post:
      operationId: CreateTransactionEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethTXSkeleton'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethCreateTransactionEndpointRequest'
        required: true
      tags:
      - TransactionService
  /eth/{network}/txs/push:
    put:
      operationId: PushRawTransactionEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethTX'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethPushRawTransactionEndpointRequest'
        required: true
      tags:
      - TransactionService
  /eth/{network}/txs/send:
    post:
      operationId: SendTransactionEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethTXSkeleton'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethSendTransactionEndpointRequest'
        required: true
      tags:
      - TransactionService
  /eth/{network}/txs/{txhash}:
    get:
      operationId: TransactionHashEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethTX'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: txhash
        in: path
        required: true
        schema:
          type: string
      tags:
      - TransactionService
  /eth/{network}/hooks:
    get:
      operationId: ListWebHooksEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethEvents'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      tags:
      - WebHooksService
    post:
      operationId: CreateWebHookEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethEvent'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ethCreateWebHookEndpointRequest'
        required: true
      tags:
      - WebHooksService
  /eth/{network}/hooks/{webhookid}:
    get:
      operationId: WebHookIDEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethEvent'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: webhookid
        in: path
        required: true
        schema:
          type: string
      tags:
      - WebHooksService
    delete:
      operationId: DeleteWebHookEndpoint
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ethNullValue'
      parameters:
      - name: network
        in: path
        required: true
        schema:
          type: string
          enum:
          - MAIN
          - main
          - ROPSTEN
          - ropsten
      - name: webhookid
        in: path
        required: true
        schema:
          type: string
      tags:
      - WebHooksService
servers:
- url: https://api.chainweaver.io/master
components:
  securitySchemes:
    ApiKeyAuthInHeader:
      type: apiKey
      name: x-chainweaver-token
      in: header
    ApiKeyAuthInQuery:
      type: apiKey
      name: token
      in: query
  schemas:
    ethAddress:
      type: object
      properties:
        address:
          type: string
          description: The requested address.
          pattern: ^0x([a-z0-9]{40})$
        total_received:
          type: integer
          description: Total amount of confirmed wei received by this address.
        total_received_hex:
          type: string
          description: Total amount of confirmed wei received by this address. This
            is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        total_sent:
          type: integer
          description: Total amount of confirmed wei sent by this address.
        total_sent_hex:
          type: string
          description: Total amount of confirmed wei sent by this address. This is
            a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        balance:
          type: integer
          description: Balance of confirmed wei on this address. (i.e., for transactions
            whose confirmations > 0).
        balance_hex:
          type: string
          description: Balance of confirmed wei on this address. (i.e., for transactions
            whose confirmations > 0). This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        unconfirmed_balance:
          type: integer
          description: Balance of unconfirmed wei on this address. Can be negative
            (if unconfirmed transactions are just spending part of an address balance).
            Only unconfirmed transactions (haven’t made it into a block) are included
            in this calculation.
        unconfirmed_balance_hex:
          type: string
          description: Balance of unconfirmed wei on this address. Can be negative
            (if unconfirmed transactions are just spending part of an address balance).
            Only unconfirmed transactions (haven’t made it into a block) are included
            in this calculation. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        final_balance:
          type: integer
          description: Total balance of wei, including confirmed and unconfirmed transactions,
            for this address.
        final_balance_hex:
          type: string
          description: Total balance of wei, including confirmed and unconfirmed transactions,
            for this address. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        n_tx:
          type: integer
          description: Number of confirmed transactions on this address. Only transactions
            that have made it into a block (confirmations > 0) are counted.
        unconfirmed_n_tx:
          type: integer
          description: Number of unconfirmed transactions for this address. Only unconfirmed
            transactions (confirmations == 0) are counted.
        final_n_tx:
          type: integer
          description: Final number of transactions, including confirmed and unconfirmed
            transactions, for this address.
        tx_url:
          type: string
          description: Optional To retrieve base URL transactions. To get the full
            URL, concatenate this URL with a transaction’s hash.
          pattern: uri
        txrefs:
          type: array
          items:
            $ref: '#/components/schemas/ethTXRef'
          description: Optional Array of transaction summaries for this address. Usually
            only returned from the standard Address Endpoint.
        unconfirmed_txrefs:
          type: array
          items:
            $ref: '#/components/schemas/ethTXRef'
          description: Optional All unconfirmed transaction summaries for this address.
            Usually only returned from the standard Address Endpoint.
        hasMore:
          type: boolean
          description: Optional If true, then the Address object contains more transactions
            than shown. Useful for determining whether to poll the API for more transaction
            information.
      required:
      - address
      - total_received
      - total_received_hex
      - total_sent
      - total_sent_hex
      - balance
      - balance_hex
      - unconfirmed_balance
      - unconfirmed_balance_hex
      - final_balance
      - final_balance_hex
      - n_tx
      - unconfirmed_n_tx
      - final_n_tx
    ethAddressKeychain:
      type: object
      properties:
        address:
          type: string
          description: Standard address representation.
          pattern: ^0x([a-z0-9]{40})$
        public:
          type: string
          description: Hex-encoded Public key.
          pattern: ^([a-z0-9]{130})$
        private:
          type: string
          description: Hex-encoded Private key.
          pattern: ^([a-z0-9]{64})$
      required:
      - address
      - public
      - private
    ethGenerateAddressEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
    ethNetworkAllowingAlias:
      type: string
      enum:
      - MAIN
      - main
      - ROPSTEN
      - ropsten
      default: MAIN
    ethTXRef:
      type: object
      properties:
        block_height:
          type: integer
          description: Height of the block that contains this transaction input/output.
            If it’s unconfirmed, this will equal -1.
        tx_hash:
          type: string
          description: The hash of the transaction containing this input/output.
        tx_input_n:
          type: integer
          description: Index of this input in the enclosing transaction. 0 if it’s
            an input, -1 if it’s an output.
        tx_output_n:
          type: integer
          description: Index of this output in the enclosing transaction. -1 if it’s
            an input, 0 if it’s an output.
        value:
          type: integer
          description: The value transfered by this input/output in wei exchanged
            in the enclosing transaction.
        value_hex:
          type: string
          description: The value transfered by this input/output in wei exchanged
            in the enclosing transaction. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        double_spend:
          type: boolean
          description: true if this is an attempted double spend; false otherwise.
        confirmations:
          type: integer
          description: Number of subsequent blocks, including the block the transaction
            is in. Unconfirmed transactions have 0 confirmations.
        ref_balance:
          type: integer
          description: Optional The past balance of the parent address the moment
            this transaction was confirmed. Not present for unconfirmed transactions.
        ref_balance_hex:
          type: string
          description: Optional The past balance of the parent address the moment
            this transaction was confirmed. Not present for unconfirmed transactions.
            This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        confirmed:
          type: string
          description: Optional Time at which transaction was included in a block;
            only present for confirmed transactions.
        double_of:
          type: string
          description: Optional If this transaction is a double-spend (i.e. double_spend
            == true) then this is the hash of the transaction it’s double-spending.
    ethBlock:
      type: object
      properties:
        hash:
          type: string
          title: The hash of the block; in Ethereum, the hashing function is Keccak/SHA3
          pattern: ^([a-z0-9]{64})$
        height:
          type: integer
          description: The height of the block in the blockchain; i.e., there are
            height earlier blocks in its blockchain.
        depth:
          type: integer
          description: The depth of the block in the blockchain; i.e., there are depth
            later blocks in its blockchain.
        chain:
          type: string
          title: The name of the blockchain represented, in the form of $COIN.$CHAIN
        total:
          type: integer
          description: The total number of wei transacted in this block.
        total_hex:
          type: string
          description: The total number of wei transacted in this block. This is a
            hex string.
          pattern: ^0x[0-9a-fA-F]+$
        fees:
          type: integer
          description: The total number of fees—in wei—collected by miners in this
            block.
        fees_hex:
          type: string
          description: The total number of fees—in wei—collected by miners in this
            block. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        size:
          type: integer
          description: Raw size of block (including header and all transactions) in
            bytes.
        ver:
          type: integer
          description: Block version.
        time:
          type: string
          description: Recorded time at which block was built.
          pattern: date-time
        received_time:
          type: string
          description: The time BlockCypher’s servers receive the block.
          pattern: date-time
        coinbase_addr:
          type: string
          description: The Ethereum address of the miner that received the coinbase
            and fee reward.
          pattern: ^0x([a-z0-9]{40})$
        relayed_by:
          type: string
          description: Address of the peer that sent BlockCypher’s servers this block.
          pattern: ^(|[a-z0-9]{40})$
        nonce:
          type: integer
          description: The number used by a miner to generate this block.
        n_tx:
          type: integer
          description: Number of transactions in this block.
        prev_block:
          type: string
          description: The hash of the previous block in the blockchain.
          pattern: ^([a-z0-9]{64})$
        prev_block_url:
          type: string
          description: The BlockCypher URL to query for more information on the previous
            block.
          pattern: uri
        tx_url:
          type: string
          description: The base BlockCypher URL to receive transaction details. To
            get more details about specific transactions, you must concatenate this
            URL with the desired transaction hash(es).
          pattern: uri
        mrkl_root:
          type: string
          description: The Merkle root of this block.
          pattern: ^([a-z0-9]{64})$
        txids:
          type: array
          items:
            type: string
          description: An array of transaction hashes in this block (initiated by
            externally controlled accounts). By default, only 20 are included.
        internal_txids:
          type: array
          items:
            type: string
          description: An array of internal transaction hashes (initiated by internal
            contracts) in this block. By default, only 20 are included.
        next_txids:
          type: string
          description: Optional If there are more transactions that couldn’t fit in
            the txids array, this is the BlockCypher URL to query the next set of
            transactions (within a Block object).
          pattern: uri
        next_internal_txids:
          type: string
          description: Optional If there are more internal transactions that couldn’t
            fit in the internal_txids array, this is the BlockCypher URL to query
            the next set of transactions (within a Block object).
          pattern: uri
        uncles:
          type: array
          items:
            type: string
          description: List of uncle blocks by hash included by the miner of this
            block. You can read more about uncles here.
      required:
      - hash
      - height
      - depth
      - chain
      - total
      - total_hex
      - fees
      - fees_hex
      - size
      - ver
      - time
      - received_time
      - coinbase_addr
      - relayed_by
      - nonce
      - n_tx
      - prev_block
      - tx_url
      - mrkl_root
      - txids
      - internal_txids
    ethBlockchain:
      type: object
      properties:
        name:
          type: string
          description: The name of the blockchain represented, in the form of $COIN.$CHAIN.
        height:
          type: integer
          description: The current height of the blockchain; i.e., the number of blocks
            in the blockchain.
        hash:
          type: string
          description: The hash of the latest confirmed block in the blockchain; in
            Ethereum, the hashing function is Keccak/SHA3.
          pattern: ^([a-z0-9]{64})$
        time:
          type: string
          description: The time of the latest update to the blockchain; typically
            when the latest block was added.
          pattern: date-time
        latest_url:
          type: string
          description: The BlockCypher URL to query for more information on the latest
            confirmed block; returns a Block.
          pattern: uri
        previous_hash:
          type: string
          description: The hash of the second-to-latest confirmed block in the blockchain.
          pattern: ^([a-z0-9]{64})$
        previous_url:
          type: string
          description: The BlockCypher URL to query for more information on the second-to-latest
            confirmed block; returns a Block.
          pattern: uri
        unconfirmed_count:
          type: integer
          description: Number of unconfirmed transactions in memory pool (likely to
            be included in next block).
        high_gas_price:
          type: integer
          description: A rolling average of the gas price (in wei) for transactions
            to be confirmed within 1 to 2 blocks.
        high_gas_price_hex:
          type: string
          description: A rolling average of the gas price (in wei) for transactions
            to be confirmed within 1 to 2 blocks. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        medium_gas_price:
          type: integer
          description: A rolling average of the gas price (in wei) for transactions
            to be confirmed within 3 to 6 blocks.
        medium_gas_price_hex:
          type: string
          description: A rolling average of the gas price (in wei) for transactions
            to be confirmed within 3 to 6 blocks. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        low_gas_price:
          type: integer
          description: A rolling average of the gas price (in wei) for transactions
            to be confirmed in 7 or more blocks.
        low_gas_price_hex:
          type: string
          description: A rolling average of the gas price (in wei) for transactions
            to be confirmed in 7 or more blocks. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        last_fork_height:
          type: integer
          description: Optional The current height of the latest fork to the blockchain;
            when no competing blockchain fork present, not returned with endpoints
            that return Blockchains.
        last_fork_hash:
          type: string
          description: Optional The hash of the latest confirmed block in the latest
            fork of the blockchain; when no competing blockchain fork present, not
            returned with endpoints that return Blockchains.
          pattern: ^(|[a-z0-9]{64})$
      required:
      - name
      - height
      - hash
      - time
      - latest_url
      - previous_hash
      - previous_url
      - unconfirmed_count
      - high_gas_price
      - high_gas_price_hex
      - medium_gas_price
      - medium_gas_price_hex
      - low_gas_price
      - low_gas_price_hex
    ethCallContractMethodEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
        query_address:
          type: string
        method:
          type: string
        solidity:
          type: string
          description: Solidity code of this contract; required when creating a contract.
            In responses, only returned with contracts initially compiled by BlockCypher.
        params:
          type: array
          items:
            type: string
          description: Parameters for either contract creation or method execution.
        publish:
          type: array
          items:
            type: string
          description: Named contract(s) to publish; necessary to specify when first
            creating a contract.
        private:
          type: string
          description: Private key associated with a funded Ethereum external account
            used to publish a contract or execute a method.
        gas_limit:
          type: integer
          description: Maximum amount of gas to use in contract creation or method
            execution.
        gas_limit_hex:
          type: string
          description: Maximum amount of gas to use in contract creation or method
            execution. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        value:
          type: integer
          description: Amount (in wei) to transfer; can be used when creating a contract
            or calling a method.
        name:
          type: string
          description: Name of contract as published.
        bin:
          type: string
          description: Hex-encoded binary compilation of this contract.
        abi:
          type: string
          description: JSON-encoded ABI. Only returned with contracts initially compiled
            by BlockCypher.
        address:
          type: string
          description: Hex-encoded address of this contract.
        created:
          type: string
          description: Timestamp when this contract was confirmed in the Ethereum
            blockchain.
        creation_tx_hash:
          type: string
          description: Hex-encoded transaction hash that created this contract.
        results:
          type: array
          items:
            type: string
          description: If this is a response from a calling a contract method, this
            array of results may appear if the method returns any.
    ethContract:
      type: object
      properties:
        solidity:
          type: string
          description: Solidity code of this contract; required when creating a contract.
            In responses, only returned with contracts initially compiled by BlockCypher.
        params:
          type: array
          items:
            type: string
          description: Parameters for either contract creation or method execution.
        publish:
          type: array
          items:
            type: string
          description: Named contract(s) to publish; necessary to specify when first
            creating a contract.
        private:
          type: string
          description: Private key associated with a funded Ethereum external account
            used to publish a contract or execute a method.
        gas_limit:
          type: integer
          description: Maximum amount of gas to use in contract creation or method
            execution.
        gas_limit_hex:
          type: string
          description: Maximum amount of gas to use in contract creation or method
            execution. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        value:
          type: integer
          description: Amount (in wei) to transfer; can be used when creating a contract
            or calling a method.
        value_hex:
          type: string
          description: Amount (in wei) to transfer; can be used when creating a contract
            or calling a method. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        name:
          type: string
          description: Name of contract as published.
        bin:
          type: string
          description: Hex-encoded binary compilation of this contract.
        abi:
          type: string
          description: JSON-encoded ABI. Only returned with contracts initially compiled
            by BlockCypher.
        address:
          type: string
          description: Hex-encoded address of this contract.
        created:
          type: string
          description: Timestamp when this contract was confirmed in the Ethereum
            blockchain.
        creation_tx_hash:
          type: string
          description: Hex-encoded transaction hash that created this contract.
        results:
          type: array
          items:
            type: string
          description: If this is a response from a calling a contract method, this
            array of results may appear if the method returns any.
    ethContracts:
      type: object
      properties:
        contract:
          type: array
          items:
            $ref: '#/components/schemas/ethContract'
    ethCreateContractEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
        solidity:
          type: string
          description: Solidity code of this contract; required when creating a contract.
            In responses, only returned with contracts initially compiled by BlockCypher.
        params:
          type: array
          items:
            type: string
          description: Parameters for either contract creation or method execution.
        publish:
          type: array
          items:
            type: string
          description: Named contract(s) to publish; necessary to specify when first
            creating a contract.
        private:
          type: string
          description: Private key associated with a funded Ethereum external account
            used to publish a contract or execute a method.
        gas_limit:
          type: integer
          description: Maximum amount of gas to use in contract creation or method
            execution.
        gas_limit_hex:
          type: string
          description: Maximum amount of gas to use in contract creation or method
            execution. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        value:
          type: integer
          description: Amount (in wei) to transfer; can be used when creating a contract
            or calling a method.
        value_hex:
          type: string
          description: Amount (in wei) to transfer; can be used when creating a contract
            or calling a method. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        name:
          type: string
          description: Name of contract as published.
        bin:
          type: string
          description: Hex-encoded binary compilation of this contract.
        abi:
          type: string
          description: JSON-encoded ABI. Only returned with contracts initially compiled
            by BlockCypher.
        address:
          type: string
          description: Hex-encoded address of this contract.
        created:
          type: string
          description: Timestamp when this contract was confirmed in the Ethereum
            blockchain.
        creation_tx_hash:
          type: string
          description: Hex-encoded transaction hash that created this contract.
        results:
          type: array
          items:
            type: string
          description: If this is a response from a calling a contract method, this
            array of results may appear if the method returns any.
    ethCreateTransactionEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
        block_height:
          type: integer
          description: Height of the block that contains this transaction. If this
            is an unconfirmed transaction, it will equal -1.
        hash:
          type: string
          description: The hash of the transaction.
        addresses:
          type: array
          items:
            type: string
          description: Array of Ethereum addresses involved in the transaction.
        total:
          type: integer
          description: The total number of wei exchanged in this transaction.
        total_hex:
          type: string
          description: The total number of wei exchanged in this transaction. This
            is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        fees:
          type: integer
          description: The total number of fees—in wei—collected by miners in this
            transaction. Equal to gas_price * gas_used.
        fees_hex:
          type: string
          description: The total number of fees—in wei—collected by miners in this
            transaction. Equal to gas_price * gas_used. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        size:
          type: integer
          description: The size of the transaction in bytes.
        gas_used:
          type: integer
          description: The amount of gas used by this transaction.
        gas_used_hex:
          type: string
          description: The amount of gas used by this transaction. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        gas_price:
          type: integer
          description: The price of gas—in wei—in this transaction.
        gas_price_hex:
          type: string
          description: The price of gas—in wei—in this transaction. This is a hex
            string.
          pattern: ^0x[0-9a-fA-F]+$
        relayed_by:
          type: string
          description: Address of the peer that sent BlockCypher’s servers this transaction.
            May be empty.
        received:
          type: string
          description: Time this transaction was received by BlockCypher’s servers.
        ver:
          type: integer
          description: Version number of this transaction.
        double_spend:
          type: boolean
          description: true if this is an attempted double spend; false otherwise.
        vin_sz:
          type: integer
          description: Total number of inputs in the transaction.
        vout_sz:
          type: integer
          description: Total number of outputs in the transaction.
        confirmations:
          type: integer
          description: Number of subsequent blocks, including the block the transaction
            is in. Unconfirmed transactions have 0 confirmations.
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/ethInputType'
          description: An array object containing a single input with a sequence number
            (used as a nonce for account balances) and an Ethereum account address.
            Only contains one input in the array; we still use an array to maintain
            parity with the Bitcoin API.
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/ethOutputType'
          description: An array object containing a single output with value (in wei),
            script, and an Ethereum account address. Only contains one output in the
            array; we still use an array to maintain parity with the Bitcoin API.
        internal_txids:
          type: array
          items:
            type: string
          description: Optional If this transaction executed a contract which propagated
            its own subsequent transactions, then this array will be present, containing
            the hashes of those subsequent internal transactions.
        parent_tx:
          type: string
          description: Optional If this transaction was initiated by a contract, this
            field will be present, conveying the hash of the parent transaction that
            executed the contract resulting in this transaction (the inverse of an
            internal_txids hash).
        confirmed:
          type: string
          description: Optional Time at which transaction was included in a block;
            only present for confirmed transactions.
        gas_limit:
          type: integer
          description: Optional If creating a transaction, can optionally set a higher
            default gas limit (useful if your recepient is a contract). If not set,
            default is 21000 gas for external accounts and 80000 for contract accounts.
        gas_limit_hex:
          type: string
          description: Optional If creating a transaction, can optionally set a higher
            default gas limit (useful if your recepient is a contract). If not set,
            default is 21000 gas for external accounts and 80000 for contract accounts.
            This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        contract_creation:
          type: boolean
          description: Optional If true, this transaction was used to create a contract
            and contract account. Note that the contract address (in the outputs field)
            will be blank until the transaction is confirmed.
        receive_count:
          type: integer
          description: Optional Number of peers that have sent this transaction to
            BlockCypher; only present for unconfirmed transactions.
        block_hash:
          type: string
          description: Optional Hash of the block that contains this transaction;
            only present for confirmed transactions.
        block_index:
          type: integer
          description: Optional Canonical, zero-indexed location of this transaction
            in a block; only present for confirmed transactions.
        double_of:
          type: string
          description: Optional If this transaction is a double-spend (i.e. double_spend
            == true) then this is the hash of the transaction it’s double-spending.
        execution_error:
          type: string
          description: Optional If this transaction has an execution error, then this
            field will be included (e.g. “out of gas”).
    ethDecodeRawTransactionEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
        tx:
          type: string
    ethInputType:
      type: object
      properties:
        sequence:
          type: integer
        addresses:
          type: array
          items:
            type: string
    ethOutputType:
      type: object
      properties:
        value:
          type: integer
        value_hex:
          type: string
          pattern: ^0x[0-9a-fA-F]+$
        script:
          type: string
        addresses:
          type: array
          items:
            type: string
    ethPushRawTransactionEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
        tx:
          type: string
    ethSendTransactionEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
        tx:
          $ref: '#/components/schemas/ethTX'
        tosign:
          type: array
          items:
            type: string
          description: Array of hex-encoded data for you to sign, containing one element
            for you to sign. Still an array to maintain parity with the Bitcoin API.
        signatures:
          type: array
          items:
            type: string
          description: Array of signatures corresponding to all the data in tosign,
            typically provided by you. Only one signature is required.
        errors:
          type: array
          items:
            type: string
          description: Optional Array of errors in the form “error”:“description-of-error”.
            This is only returned if there was an error in any stage of transaction
            generation, and is usually accompanied by a HTTP 400 code.
    ethTX:
      type: object
      properties:
        block_height:
          type: integer
          description: Height of the block that contains this transaction. If this
            is an unconfirmed transaction, it will equal -1.
        hash:
          type: string
          description: The hash of the transaction.
        addresses:
          type: array
          items:
            type: string
          description: Array of Ethereum addresses involved in the transaction.
        total:
          type: integer
          description: The total number of wei exchanged in this transaction.
        total_hex:
          type: string
          description: The total number of wei exchanged in this transaction. This
            is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        fees:
          type: integer
          description: The total number of fees—in wei—collected by miners in this
            transaction. Equal to gas_price * gas_used.
        fees_hex:
          type: string
          description: The total number of fees—in wei—collected by miners in this
            transaction. Equal to gas_price * gas_used. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        size:
          type: integer
          description: The size of the transaction in bytes.
        gas_used:
          type: integer
          description: The amount of gas used by this transaction.
        gas_used_hex:
          type: string
          description: The amount of gas used by this transaction. This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        gas_price:
          type: integer
          description: The price of gas—in wei—in this transaction.
        gas_price_hex:
          type: string
          description: The price of gas—in wei—in this transaction. This is a hex
            string.
          pattern: ^0x[0-9a-fA-F]+$
        relayed_by:
          type: string
          description: Address of the peer that sent BlockCypher’s servers this transaction.
            May be empty.
        received:
          type: string
          description: Time this transaction was received by BlockCypher’s servers.
        ver:
          type: integer
          description: Version number of this transaction.
        double_spend:
          type: boolean
          description: true if this is an attempted double spend; false otherwise.
        vin_sz:
          type: integer
          description: Total number of inputs in the transaction.
        vout_sz:
          type: integer
          description: Total number of outputs in the transaction.
        confirmations:
          type: integer
          description: Number of subsequent blocks, including the block the transaction
            is in. Unconfirmed transactions have 0 confirmations.
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/ethInputType'
          description: An array object containing a single input with a sequence number
            (used as a nonce for account balances) and an Ethereum account address.
            Only contains one input in the array; we still use an array to maintain
            parity with the Bitcoin API.
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/ethOutputType'
          description: An array object containing a single output with value (in wei),
            script, and an Ethereum account address. Only contains one output in the
            array; we still use an array to maintain parity with the Bitcoin API.
        internal_txids:
          type: array
          items:
            type: string
          description: Optional If this transaction executed a contract which propagated
            its own subsequent transactions, then this array will be present, containing
            the hashes of those subsequent internal transactions.
        parent_tx:
          type: string
          description: Optional If this transaction was initiated by a contract, this
            field will be present, conveying the hash of the parent transaction that
            executed the contract resulting in this transaction (the inverse of an
            internal_txids hash).
        confirmed:
          type: string
          description: Optional Time at which transaction was included in a block;
            only present for confirmed transactions.
        gas_limit:
          type: integer
          description: Optional If creating a transaction, can optionally set a higher
            default gas limit (useful if your recepient is a contract). If not set,
            default is 21000 gas for external accounts and 80000 for contract accounts.
        gas_limit_hex:
          type: string
          description: Optional If creating a transaction, can optionally set a higher
            default gas limit (useful if your recepient is a contract). If not set,
            default is 21000 gas for external accounts and 80000 for contract accounts.
            This is a hex string.
          pattern: ^0x[0-9a-fA-F]+$
        contract_creation:
          type: boolean
          description: Optional If true, this transaction was used to create a contract
            and contract account. Note that the contract address (in the outputs field)
            will be blank until the transaction is confirmed.
        receive_count:
          type: integer
          description: Optional Number of peers that have sent this transaction to
            BlockCypher; only present for unconfirmed transactions.
        block_hash:
          type: string
          description: Optional Hash of the block that contains this transaction;
            only present for confirmed transactions.
        block_index:
          type: integer
          description: Optional Canonical, zero-indexed location of this transaction
            in a block; only present for confirmed transactions.
        double_of:
          type: string
          description: Optional If this transaction is a double-spend (i.e. double_spend
            == true) then this is the hash of the transaction it’s double-spending.
        execution_error:
          type: string
          description: Optional If this transaction has an execution error, then this
            field will be included (e.g. “out of gas”).
    ethTXSkeleton:
      type: object
      properties:
        tx:
          $ref: '#/components/schemas/ethTX'
        tosign:
          type: array
          items:
            type: string
          description: Array of hex-encoded data for you to sign, containing one element
            for you to sign. Still an array to maintain parity with the Bitcoin API.
        signatures:
          type: array
          items:
            type: string
          description: Array of signatures corresponding to all the data in tosign,
            typically provided by you. Only one signature is required.
        errors:
          type: array
          items:
            type: string
          description: Optional Array of errors in the form “error”:“description-of-error”.
            This is only returned if there was an error in any stage of transaction
            generation, and is usually accompanied by a HTTP 400 code.
    ethTXs:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/ethTX'
    ethCreateWebHookEndpointRequest:
      type: object
      properties:
        network:
          $ref: '#/components/schemas/ethNetworkAllowingAlias'
        id:
          type: string
          description: Identifier of the event; generated when a new request is created.
        event:
          type: string
          description: Type of event; can be unconfirmed-tx, new-block, confirmed-tx,
            tx-confirmation, double-spend-tx.
        hash:
          type: string
          description: optional Only objects with a matching hash will be sent. The
            hash can either be for a block or a transaction.
        address:
          type: string
          description: optional Only transactions associated with the given address
            will be sent.
        confirmations:
          type: integer
          description: optional Used in concert with the tx-confirmation event type
            to set the number of confirmations desired for which to receive an update.
            You’ll receive an updated TX for every confirmation up to this amount.
            The maximum allowed is 10; if not set, it will default to 6.
        url:
          type: string
          description: optional Callback URL for this Event’s WebHook; not applicable
            for WebSockets usage.
        callback_errors:
          type: integer
          description: Number of errors when attempting to POST to callback URL; not
            applicable for WebSockets usage.
    ethEvent:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the event; generated when a new request is created.
        event:
          type: string
          description: Type of event; can be unconfirmed-tx, new-block, confirmed-tx,
            tx-confirmation, double-spend-tx.
        hash:
          type: string
          description: optional Only objects with a matching hash will be sent. The
            hash can either be for a block or a transaction.
        address:
          type: string
          description: optional Only transactions associated with the given address
            will be sent.
        confirmations:
          type: integer
          description: optional Used in concert with the tx-confirmation event type
            to set the number of confirmations desired for which to receive an update.
            You’ll receive an updated TX for every confirmation up to this amount.
            The maximum allowed is 10; if not set, it will default to 6.
        url:
          type: string
          description: optional Callback URL for this Event’s WebHook; not applicable
            for WebSockets usage.
        callback_errors:
          type: integer
          description: Number of errors when attempting to POST to callback URL; not
            applicable for WebSockets usage.
        filter:
          type: string
          title: filter
    ethEvents:
      type: object
      properties:
        event:
          type: array
          items:
            $ref: '#/components/schemas/ethEvent'
    ethNullValue:
      type: object
    error:
      type: object
      properties:
        error:
          type: string
          description: Error message
